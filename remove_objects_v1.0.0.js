#!/usr/bin/env node

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
 * @param {any} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {string} targetKey - –ò—Å–∫–æ–º—ã–π –∫–ª—é—á
 * @param {any} targetValue - –ò—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @returns {any} –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
function removeObjectsByKeyValue(data, targetKey, targetValue) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
  if (Array.isArray(data)) {
    return data
      .filter(item => {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–∞—Ä—ã
        if (item && typeof item === 'object') {
          return item[targetKey] !== targetValue;
        }
        return true;
      })
      .map(item => removeObjectsByKeyValue(item, targetKey, targetValue));
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
  if (data && typeof data === 'object') {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞—Ä—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if (data[targetKey] === targetValue) {
      return null;
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
    const result = {};
    for (const [key, value] of Object.entries(data)) {
      const processed = removeObjectsByKeyValue(value, targetKey, targetValue);
      // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
      if (processed !== null) {
        result[key] = processed;
      }
    }
    return result;
  }

  // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  return data;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const args = process.argv.slice(2);

  if (args.length < 3) {
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node remove_objects_v1.0.0.js <input.json> <key> <value> [output.json]');
    console.error('–ü—Ä–∏–º–µ—Ä: node remove_objects_v1.0.0.js input.json name "üî© SwapMe" output.json');
    process.exit(1);
  }

  const inputFile = args[0];
  const targetKey = args[1];
  const targetValue = args[2];
  const outputFile = args[3] || inputFile.replace('.json', '_cleaned.json');

  try {
    // –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    const rawData = fs.readFileSync(inputFile, 'utf8');
    const data = JSON.parse(rawData);

    console.log(`üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ${targetKey}="${targetValue}"...`);

    // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
    const cleaned = removeObjectsByKeyValue(data, targetKey, targetValue);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fs.writeFileSync(outputFile, JSON.stringify(cleaned, null, 2), 'utf8');

    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFile}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const originalSize = Buffer.byteLength(rawData, 'utf8');
    const cleanedSize = Buffer.byteLength(JSON.stringify(cleaned, null, 2), 'utf8');
    const savedBytes = originalSize - cleanedSize;

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(originalSize / 1024).toFixed(2)} KB`);
    console.log(`   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${(cleanedSize / 1024).toFixed(2)} KB`);
    console.log(`   –°–æ–∫—Ä–∞—â–µ–Ω–æ: ${(savedBytes / 1024).toFixed(2)} KB (${((savedBytes / originalSize) * 100).toFixed(1)}%)`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
if (require.main === module) {
  main();
} else {
  module.exports = { removeObjectsByKeyValue };
}

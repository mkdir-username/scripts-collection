#!/usr/bin/env node

/**
 * Figma Data Cleaner - —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node figma-cleaner.js <figma-response.json>
 */

function cleanFigmaData(data, options = {}) {
  const {
    includeStyles = false,      // –í–∫–ª—é—á–∞—Ç—å –ª–∏ globalVars/styles
    includeComponents = false,   // –í–∫–ª—é—á–∞—Ç—å –ª–∏ components/componentSets
    maxDepth = 2,               // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
    fieldsToKeep = [            // –ö–∞–∫–∏–µ –ø–æ–ª—è –æ—Å—Ç–∞–≤–∏—Ç—å
      'id', 'name', 'type',
      'padding', 'gap', 'spacing',
      'mode', 'sizing', 'borderRadius'
    ]
  } = options;

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–æ–¥
  function cleanNode(node, depth = 0) {
    if (!node || depth >= maxDepth) return null;

    const cleaned = {};

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    if (node.id) cleaned.id = node.id;
    if (node.name) cleaned.name = node.name;
    if (node.type) cleaned.type = node.type;

    // Layout –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ—Ç—Å—Ç—É–ø—ã)
    if (node.layout) {
      cleaned.layout = {};
      ['padding', 'gap', 'spacing', 'mode', 'sizing', 'alignItems', 'justifyContent']
        .forEach(field => {
          if (node.layout[field]) {
            cleaned.layout[field] = node.layout[field];
          }
        });

      // –ü–∞—Ä—Å–∏–º padding –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      if (typeof cleaned.layout.padding === 'string') {
        const paddings = cleaned.layout.padding.split(' ').map(p => p.replace('px', ''));
        cleaned.layout.paddingTop = paddings[0];
        cleaned.layout.paddingRight = paddings[1] || paddings[0];
        cleaned.layout.paddingBottom = paddings[2] || paddings[0];
        cleaned.layout.paddingLeft = paddings[3] || paddings[1] || paddings[0];
      }
    }

    // –†–∞–∑–º–µ—Ä—ã
    if (node.dimensions) {
      cleaned.dimensions = node.dimensions;
    }

    // Borders
    if (node.borderRadius) {
      cleaned.borderRadius = node.borderRadius;
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —á–∏—Å—Ç–∏–º –¥–µ—Ç–µ–π
    if (node.children && node.children.length > 0) {
      cleaned.children = node.children
        .map(child => cleanNode(child, depth + 1))
        .filter(Boolean);
    }

    return cleaned;
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç
  const result = {
    metadata: {
      name: data.metadata?.name,
      lastModified: data.metadata?.lastModified,
      componentsCount: Object.keys(data.components || {}).length,
      stylesCount: Object.keys(data.globalVars?.styles || {}).length
    },
    structure: []
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–¥—ã
  if (data.nodes && Array.isArray(data.nodes)) {
    result.structure = data.nodes.map(node => cleanNode(node));
  }

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
  if (includeComponents && data.components) {
    result.componentNames = Object.values(data.components).map(c => ({
      id: c.id,
      name: c.name
    }));
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  result.stats = {
    originalSize: JSON.stringify(data).length,
    cleanedSize: JSON.stringify(result).length,
    reduction: `${Math.round((1 - JSON.stringify(result).length / JSON.stringify(data).length) * 100)}%`
  };

  return result;
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const fs = require('fs');
  const args = process.argv.slice(2);

  if (args.length === 0) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node figma-cleaner.js <input.json> [output.json]');
    console.log('–û–ø—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∫–æ–¥–µ');
    process.exit(1);
  }

  const inputFile = args[0];
  const outputFile = args[1] || 'cleaned-' + inputFile;

  try {
    const data = JSON.parse(fs.readFileSync(inputFile, 'utf8'));
    const cleaned = cleanFigmaData(data, {
      includeStyles: false,
      includeComponents: false,
      maxDepth: 2
    });

    fs.writeFileSync(outputFile, JSON.stringify(cleaned, null, 2));

    console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ: ${cleaned.stats.reduction} —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ`);
    console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputFile}`);
    console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${cleaned.structure.length} top-level –Ω–æ–¥`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

module.exports = { cleanFigmaData };
#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VS Code –¥–ª—è –ì–õ–£–ë–û–ö–û–ô –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SDUI —Å—Ö–µ–º.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—è –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –∏ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã.
"""

import json
from pathlib import Path
import sys
from typing import Dict, List, Set, Optional
import argparse
from collections import defaultdict

class SDUIDeepSchemaGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ö–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""

    def __init__(self, sdui_path: Path):
        self.sdui_path = sdui_path
        self.schemas = []
        self.processed_refs = set()
        self.atomic_types = {}
        self.schema_dependencies = defaultdict(set)

    def scan_directory(self) -> None:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ SDUI"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SDUI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")

        # 1. –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã
        self._collect_atomic_types()

        # 2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
        self._process_components_deep()

        # 3. –ê—Ç–æ–º—ã
        self._process_atoms()

        # 4. Layouts
        self._process_layouts_deep()

        # 5. Actions
        self._process_actions_deep()

        # 6. Functions
        self._process_functions_deep()

        # 7. Models
        self._process_models()

        # 8. SDUIScreen
        self._process_sdui_screen()

        # 9. Common
        self._process_common()

        # 10. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        self._process_nested_schemas()

        # 11. –ú–µ—Ç–∞—Å—Ö–µ–º–∞
        self._add_metaschema_configs()

    def _collect_atomic_types(self) -> None:
        """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("  üì¶ –°–æ–±–∏—Ä–∞—é –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã...")

        # –ê—Ç–æ–º—ã
        atoms_path = self.sdui_path / "atoms"
        if atoms_path.exists():
            for atom_dir in atoms_path.iterdir():
                if atom_dir.is_dir():
                    self._scan_atomic_schemas(atom_dir)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö (Shape, Size –∏ —Ç.–¥.)
        components_path = self.sdui_path / "components"
        if components_path.exists():
            for comp_dir in components_path.glob("*/v*"):
                for schema_file in comp_dir.glob("*.json"):
                    if not schema_file.name.startswith(comp_dir.parent.name):
                        # –≠—Ç–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ (–Ω–∞–ø—Ä. IconViewShape.json)
                        self._register_atomic_type(schema_file)

    def _scan_atomic_schemas(self, atom_dir: Path) -> None:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö —Å—Ö–µ–º"""
        for schema_file in atom_dir.glob("**/*.json"):
            if not any(p.name == "samples" for p in schema_file.parents):
                self._register_atomic_type(schema_file)

    def _register_atomic_type(self, schema_file: Path) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            with open(schema_file, 'r', encoding='utf-8') as f:
                schema_data = json.load(f)
                name = schema_data.get('name', schema_file.stem)
                self.atomic_types[name] = schema_file

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                pattern = f"**/{name}.json"
                self.schemas.append({
                    "fileMatch": [f"**/SDUI/**/{pattern}"],
                    "url": f"file://{schema_file.absolute()}"
                })
        except:
            pass

    def _process_components_deep(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"""
        print("  üß© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π...")

        components_path = self.sdui_path / "components"
        if not components_path.exists():
            return

        for comp_dir in sorted(components_path.iterdir()):
            if not comp_dir.is_dir():
                continue

            comp_name = comp_dir.name

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤–µ—Ä—Å–∏—é
            for version_dir in sorted(comp_dir.iterdir()):
                if not version_dir.is_dir() or not version_dir.name.startswith('v'):
                    continue

                version = version_dir.name
                schema_file = version_dir / f"{comp_name}.json"

                if schema_file.exists():
                    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    self.schemas.append({
                        "fileMatch": [
                            f"**/SDUI/components/{comp_name}/{version}/samples/*.json",
                            f"**/SDUI/components/{comp_name}/{version}/test*.json",
                            f"**/{comp_name}_*.json",
                            f"**/*_{comp_name}.json"
                        ],
                        "url": f"file://{schema_file.absolute()}"
                    })

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ö–µ–º—ã
                    self._analyze_schema_dependencies(schema_file)

                    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    for aux_schema in version_dir.glob("*.json"):
                        if aux_schema.name != f"{comp_name}.json":
                            # –≠—Ç–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ (–Ω–∞–ø—Ä. IconViewShape.json)
                            aux_name = aux_schema.stem
                            self.schemas.append({
                                "fileMatch": [
                                    f"**/{aux_name}*.json",
                                    f"**/*{aux_name}.json"
                                ],
                                "url": f"file://{aux_schema.absolute()}"
                            })

                    # Presets
                    presets_dir = version_dir / "presets"
                    if presets_dir.exists():
                        self._process_presets_deep(presets_dir, comp_name)

    def _process_presets_deep(self, presets_dir: Path, comp_name: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤ —Å –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"""
        for preset_file in presets_dir.glob("**/*.json"):
            preset_name = preset_file.stem
            relative_path = preset_file.relative_to(presets_dir)

            # –°–æ–∑–¥–∞—ë–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            patterns = [
                f"**/presets/**/{preset_name}.json",
                f"**/{comp_name}/**/{preset_name}.json",
                f"**/{preset_name}.json"
            ]

            self.schemas.append({
                "fileMatch": patterns,
                "url": f"file://{preset_file.absolute()}"
            })

    def _analyze_schema_dependencies(self, schema_file: Path) -> None:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å—Ö–µ–º—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏"""
        try:
            with open(schema_file, 'r', encoding='utf-8') as f:
                schema_data = json.load(f)
                self._extract_refs_recursive(schema_data, schema_file)
        except:
            pass

    def _extract_refs_recursive(self, obj: any, source_file: Path, depth: int = 0) -> None:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö $ref —Å—Å—ã–ª–æ–∫"""
        if depth > 10:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
            return

        if isinstance(obj, dict):
            for key, value in obj.items():
                if key == "$ref" and isinstance(value, str):
                    if value.startswith("file://"):
                        ref_path = Path(value.replace("file://", ""))
                        if ref_path.exists():
                            self.schema_dependencies[source_file].add(ref_path)
                            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º—É—é —Å—Ö–µ–º—É
                            if ref_path not in self.processed_refs:
                                self.processed_refs.add(ref_path)
                                self._analyze_schema_dependencies(ref_path)
                else:
                    self._extract_refs_recursive(value, source_file, depth + 1)
        elif isinstance(obj, list):
            for item in obj:
                self._extract_refs_recursive(item, source_file, depth + 1)

    def _process_atoms(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç–æ–º–æ–≤"""
        print("  ‚öõÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—Ç–æ–º—ã...")

        atoms_path = self.sdui_path / "atoms"
        if not atoms_path.exists():
            return

        for atom_dir in sorted(atoms_path.iterdir()):
            if not atom_dir.is_dir():
                continue

            atom_name = atom_dir.name

            # –í–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –∞—Ç–æ–º—ã
            for version_dir in atom_dir.glob("v*"):
                if version_dir.is_dir():
                    for schema_file in version_dir.glob("*.json"):
                        self.schemas.append({
                            "fileMatch": [
                                f"**/atoms/{atom_name}/{version_dir.name}/**/*.json",
                                f"**/{schema_file.stem}*.json"
                            ],
                            "url": f"file://{schema_file.absolute()}"
                        })

            # –ù–µ–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –∞—Ç–æ–º—ã
            main_schema = atom_dir / f"{atom_name}.json"
            if main_schema.exists():
                self.schemas.append({
                    "fileMatch": [
                        f"**/atoms/{atom_name}/**/*.json",
                        f"**/{atom_name}*.json",
                        f"**/*_{atom_name}.json"
                    ],
                    "url": f"file://{main_schema.absolute()}"
                })

    def _process_layouts_deep(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ layouts —Å –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"""
        print("  üìê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é layouts...")

        layouts_path = self.sdui_path / "layouts"
        if not layouts_path.exists():
            return

        for layout_dir in sorted(layouts_path.iterdir()):
            if not layout_dir.is_dir():
                continue

            layout_name = layout_dir.name

            for version_dir in sorted(layout_dir.iterdir()):
                if not version_dir.is_dir() or not version_dir.name.startswith('v'):
                    continue

                version = version_dir.name
                schema_file = version_dir / f"{layout_name}.json"

                if schema_file.exists():
                    self.schemas.append({
                        "fileMatch": [
                            f"**/layouts/{layout_name}/{version}/**/*.json",
                            f"**/{layout_name}_*.json"
                        ],
                        "url": f"file://{schema_file.absolute()}"
                    })

                    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã
                    for aux_schema in version_dir.glob("*.json"):
                        if aux_schema != schema_file:
                            self.schemas.append({
                                "fileMatch": [f"**/{aux_schema.stem}*.json"],
                                "url": f"file://{aux_schema.absolute()}"
                            })

    def _process_actions_deep(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ actions —Å –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"""
        print("  ‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é actions...")

        actions_path = self.sdui_path / "actions"
        if not actions_path.exists():
            return

        for action_dir in sorted(actions_path.iterdir()):
            if not action_dir.is_dir():
                continue

            # –ò—â–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ö–µ–º—É –¥–µ–π—Å—Ç–≤–∏—è
            for schema_file in action_dir.glob("*.json"):
                action_name = schema_file.stem
                self.schemas.append({
                    "fileMatch": [
                        f"**/actions/{action_dir.name}/**/*.json",
                        f"**/{action_name}*.json"
                    ],
                    "url": f"file://{schema_file.absolute()}"
                })

            # –í–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            for version_dir in action_dir.glob("v*"):
                if version_dir.is_dir():
                    for schema_file in version_dir.glob("*.json"):
                        self.schemas.append({
                            "fileMatch": [
                                f"**/actions/{action_dir.name}/{version_dir.name}/**/*.json",
                                f"**/{schema_file.stem}*.json"
                            ],
                            "url": f"file://{schema_file.absolute()}"
                        })

    def _process_functions_deep(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ functions —Å –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"""
        print("  üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é functions...")

        functions_path = self.sdui_path / "functions"
        if not functions_path.exists():
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É–Ω–∫—Ü–∏–π
        for category_dir in sorted(functions_path.iterdir()):
            if not category_dir.is_dir():
                continue

            category = category_dir.name

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for func_dir in sorted(category_dir.iterdir()):
                if not func_dir.is_dir():
                    continue

                # –í–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                for version_dir in func_dir.glob("v*"):
                    if version_dir.is_dir():
                        for schema_file in version_dir.glob("*.json"):
                            func_name = schema_file.stem
                            self.schemas.append({
                                "fileMatch": [
                                    f"**/functions/{category}/{func_dir.name}/{version_dir.name}/**/*.json",
                                    f"**/{func_name}*.json"
                                ],
                                "url": f"file://{schema_file.absolute()}"
                            })

    def _process_models(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ models"""
        print("  üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é models...")

        models_path = self.sdui_path / "models"
        if not models_path.exists():
            return

        for model_file in models_path.glob("**/*.json"):
            if not any(p.name == "samples" for p in model_file.parents):
                model_name = model_file.stem
                self.schemas.append({
                    "fileMatch": [
                        f"**/models/**/{model_name}.json",
                        f"**/{model_name}*.json"
                    ],
                    "url": f"file://{model_file.absolute()}"
                })

    def _process_sdui_screen(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ SDUIScreen"""
        print("  üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é SDUIScreen...")

        screen_path = self.sdui_path / "SDUIScreen"
        if not screen_path.exists():
            return

        for version_dir in screen_path.glob("v*"):
            if version_dir.is_dir():
                for schema_file in version_dir.glob("*.json"):
                    schema_name = schema_file.stem
                    self.schemas.append({
                        "fileMatch": [
                            f"**/SDUIScreen/{version_dir.name}/**/{schema_name}.json",
                            f"**/{schema_name}*.json"
                        ],
                        "url": f"file://{schema_file.absolute()}"
                    })

    def _process_common(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ common"""
        print("  üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é common...")

        common_path = self.sdui_path / "common"
        if not common_path.exists():
            return

        for common_dir in sorted(common_path.iterdir()):
            if not common_dir.is_dir():
                continue

            for schema_file in common_dir.glob("**/*.json"):
                if not any(p.name == "samples" for p in schema_file.parents):
                    schema_name = schema_file.stem
                    self.schemas.append({
                        "fileMatch": [
                            f"**/common/**/{schema_name}.json",
                            f"**/{schema_name}*.json"
                        ],
                        "url": f"file://{schema_file.absolute()}"
                    })

    def _process_nested_schemas(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
        print("  üîÑ –°–æ–∑–¥–∞—é —Å—Ö–µ–º—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤...")

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for schema_entry in list(self.schemas):
            if "components" in schema_entry["url"]:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                base_patterns = schema_entry.get("fileMatch", [])
                extended_patterns = []

                for pattern in base_patterns:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if "samples" in pattern:
                        comp_match = pattern.split("/components/")[1].split("/")[0]
                        extended_patterns.extend([
                            f"**/{comp_match}_partial*.json",
                            f"**/test_{comp_match}*.json",
                            f"**/{comp_match.lower()}*.json"
                        ])

                if extended_patterns:
                    schema_entry["fileMatch"].extend(extended_patterns)

    def _add_metaschema_configs(self) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞—Å—Ö–µ–º—ã"""
        print("  üìã –î–æ–±–∞–≤–ª—è—é –º–µ—Ç–∞—Å—Ö–µ–º—ã...")

        metaschema_path = self.sdui_path.parent / "metaschema" / "schema" / "strict_unversioned.json"

        if metaschema_path.exists():
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            self.schemas.append({
                "fileMatch": [
                    "**/SDUI/**/*contract*.json",
                    "**/SDUI/**/*Contract*.json"
                ],
                "url": f"file://{metaschema_path.absolute()}"
            })

            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            self.schemas.append({
                "fileMatch": [
                    "**/SDUI/**/samples/*.json",
                    "**/SDUI/**/test*.json",
                    "**/SDUI/**/tests/*.json"
                ],
                "url": f"file://{metaschema_path.absolute()}"
            })

    def generate_config(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"\n‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.schemas)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ö–µ–º")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.schemas.sort(key=lambda x: x["url"])

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_schemas = []
        seen_urls = set()

        for schema in self.schemas:
            url = schema["url"]
            if url not in seen_urls:
                seen_urls.add(url)
                unique_schemas.append(schema)

        print(f"üì¶ –ü–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(unique_schemas)} —Å—Ö–µ–º")

        return {
            "json.schemas": unique_schemas
        }

    def save_config(self, output_path: Path) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        config = self.generate_config()

        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)

        print(f"\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_path}")

    def print_statistics(self) -> None:
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–ª—É–±–æ–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"  - –í—Å–µ–≥–æ —Å—Ö–µ–º: {len(self.schemas)}")
        print(f"  - –ê—Ç–æ–º–∞—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤: {len(self.atomic_types)}")
        print(f"  - –°—Ö–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {len(self.schema_dependencies)}")

        # –¢–æ–ø-5 —Å—Ö–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if self.schema_dependencies:
            sorted_deps = sorted(
                self.schema_dependencies.items(),
                key=lambda x: len(x[1]),
                reverse=True
            )[:5]

            print("\n  üìà –¢–æ–ø-5 —Å—Ö–µ–º –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º:")
            for schema, deps in sorted_deps:
                print(f"    - {schema.name}: {len(deps)} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")


def main():
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VS Code –¥–ª—è –ì–õ–£–ë–û–ö–û–ô –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SDUI —Å—Ö–µ–º"
    )
    parser.add_argument(
        "sdui_path",
        help="–ü—É—Ç—å –∫ SDUI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    )
    parser.add_argument(
        "-o", "--output",
        default="vscode_deep_schemas_config.json",
        help="–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: vscode_deep_schemas_config.json)"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )

    args = parser.parse_args()

    sdui_path = Path(args.sdui_path).resolve()
    if not sdui_path.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {sdui_path}")
        sys.exit(1)

    if not sdui_path.is_dir():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {sdui_path}")
        sys.exit(1)

    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SDUI —Å—Ö–µ–º")
    print(f"üìÅ SDUI –ø—É—Ç—å: {sdui_path}")

    generator = SDUIDeepSchemaGenerator(sdui_path)
    generator.scan_directory()

    output_path = Path(args.output)
    generator.save_config(output_path)
    generator.print_statistics()

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ VS Code settings.json")
    print(f"2. –ù–∞–π–¥–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–∫—Ü–∏—é 'json.schemas'")
    print(f"3. –ó–∞–º–µ–Ω–∏—Ç–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏–∑ {output_path}")
    print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ VS Code –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")


if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π .json –≤ $ref —Å—Å—ã–ª–∫–∞—Ö
"""

import json
import re
from pathlib import Path
import sys
import argparse


class JsonExtensionFixer:
    def __init__(self, base_path: Path):
        self.base_path = base_path
        self.fixed_count = 0
        self.files_modified = 0
        self.errors = []

    def fix_refs_in_file(self, file_path: Path) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                original_content = content

            data = json.loads(content)
            modified = self._fix_refs_recursive(data, file_path)

            if modified:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                new_content = json.dumps(data, indent=2, ensure_ascii=False)

                if new_content != original_content:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                        if not new_content.endswith('\n'):
                            f.write('\n')

                    self.files_modified += 1
                    return True

        except Exception as e:
            self.errors.append(f"{file_path}: {e}")

        return False

    def _fix_refs_recursive(self, obj: any, source_file: Path, depth: int = 0) -> bool:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç $ref —Å—Å—ã–ª–∫–∏"""
        if depth > 20:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
            return False

        modified = False

        if isinstance(obj, dict):
            for key, value in list(obj.items()):
                if key == "$ref" and isinstance(value, str):
                    new_value = self._fix_ref(value, source_file)
                    if new_value != value:
                        obj[key] = new_value
                        self.fixed_count += 1
                        modified = True
                        print(f"  ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {value} ‚Üí {new_value}")
                else:
                    if self._fix_refs_recursive(value, source_file, depth + 1):
                        modified = True

        elif isinstance(obj, list):
            for item in obj:
                if self._fix_refs_recursive(item, source_file, depth + 1):
                    modified = True

        return modified

    def _fix_ref(self, ref: str, source_file: Path) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Å—ã–ª–∫—É"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if ref.startswith("#"):
            return ref

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º file:// —Å—Å—ã–ª–∫–∏
        if ref.startswith("file://"):
            path_part = ref[7:]  # –£–±–∏—Ä–∞–µ–º file://

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            if not path_part.endswith('.json'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                test_path = Path(path_part + '.json')
                if test_path.exists():
                    return f"file://{path_part}.json"

                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ file://
                test_path2 = Path(path_part)
                if test_path2.exists() and test_path2.suffix == '':
                    # –ò—â–µ–º —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json
                    json_file = test_path2.parent / f"{test_path2.name}.json"
                    if json_file.exists():
                        return f"file://{path_part}.json"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        elif not ref.startswith("http"):
            if not ref.endswith('.json') and '.' not in ref.split('/')[-1]:
                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Ç—å –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ
                if source_file:
                    base_dir = source_file.parent
                    test_path = base_dir / f"{ref}.json"

                    # –£–ø—Ä–æ—â–∞–µ–º –ø—É—Ç—å
                    try:
                        test_path = test_path.resolve()
                        if test_path.exists():
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ file:// —Ñ–æ—Ä–º–∞—Ç
                            return f"file://{test_path}"
                    except:
                        pass

        return ref

    def scan_directory(self, directory: Path) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã"""
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory}")

        json_files = list(directory.glob("**/*.json"))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")

        for json_file in json_files:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ .git –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            if any(part.startswith('.') for part in json_file.parts):
                continue

            if self.fix_refs_in_file(json_file):
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {json_file.relative_to(self.base_path)}")

    def print_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–ò:")
        print(f"  ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {self.fixed_count}")
        print(f"  ‚úì –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.files_modified}")

        if self.errors:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors[:10]:
                print(f"    - {error}")


def main():
    parser = argparse.ArgumentParser(
        description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π .json –≤ $ref —Å—Å—ã–ª–∫–∞—Ö"
    )
    parser.add_argument(
        "path",
        help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )

    args = parser.parse_args()

    target_path = Path(args.path).resolve()

    if not target_path.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {target_path}")
        sys.exit(1)

    fixer = JsonExtensionFixer(target_path.parent if target_path.is_file() else target_path)

    if target_path.is_file():
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {target_path}")
        if fixer.fix_refs_in_file(target_path):
            print("‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        fixer.scan_directory(target_path)

    fixer.print_summary()


if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–°–ï–• –ø—Ä–æ–±–ª–µ–º —Å $ref —Å—Å—ã–ª–∫–∞–º–∏
"""

import json
import re
from pathlib import Path
import sys


def fix_refs_in_file(file_path: Path) -> int:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            original_content = content

        data = json.loads(content)
        fixed_count = fix_refs_recursive(data, file_path)

        if fixed_count > 0:
            new_content = json.dumps(data, indent=2, ensure_ascii=False)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
                if not new_content.endswith('\n'):
                    f.write('\n')
            print(f"‚úÖ {file_path.name}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} —Å—Å—ã–ª–æ–∫")

        return fixed_count

    except Exception as e:
        print(f"‚ùå {file_path.name}: {e}")
        return 0


def fix_refs_recursive(obj: any, source_file: Path, depth: int = 0) -> int:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç $ref —Å—Å—ã–ª–∫–∏"""
    if depth > 20:
        return 0

    fixed_count = 0

    if isinstance(obj, dict):
        for key, value in list(obj.items()):
            if key == "$ref" and isinstance(value, str):
                new_value = fix_ref(value, source_file)
                if new_value != value:
                    obj[key] = new_value
                    fixed_count += 1
            else:
                fixed_count += fix_refs_recursive(value, source_file, depth + 1)

    elif isinstance(obj, list):
        for item in obj:
            fixed_count += fix_refs_recursive(item, source_file, depth + 1)

    return fixed_count


def fix_ref(ref: str, source_file: Path) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Å—ã–ª–∫—É"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    if ref.startswith("#"):
        return ref

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º http —Å—Å—ã–ª–∫–∏
    if ref.startswith("http"):
        return ref

    # –î–æ–±–∞–≤–ª—è–µ–º .json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not ref.endswith('.json'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —É–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        parts = ref.split('/')
        last_part = parts[-1]

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º .json
        if '.' not in last_part:
            return ref + '.json'

    return ref


def main():
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    base_path = Path("/Users/username/Documents/front-middle-schema")

    problem_dirs = [
        "multistep",
        "widgets",
        "analytics",
        "dependentfields",
        "valuefields",
        "SDUI"
    ]

    total_fixed = 0

    for dir_name in problem_dirs:
        dir_path = base_path / dir_name
        if dir_path.exists():
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {dir_name}/...")
            for json_file in dir_path.glob("**/*.json"):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if any(part.startswith('.') for part in json_file.parts):
                    continue

                fixed = fix_refs_in_file(json_file)
                total_fixed += fixed

    print(f"\n‚ú® –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {total_fixed}")


if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è $ref —Å—Å—ã–ª–∫–∞–º–∏ –≤ JSON —Å—Ö–µ–º–∞—Ö SDUI
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–µ–∂–¥—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
"""

import json
import os
import sys
import argparse
from pathlib import Path
from typing import Dict, Any, Optional

class SDUIRefsManager:
    def __init__(self, base_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        Args:
            base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ SDUI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        self.base_path = Path(base_path).resolve()
        self.changes_made = 0
        self.files_processed = 0
        self.errors = []

    def resolve_ref_path(self, ref_value: str, current_file_path: Path) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π file:/// URI"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if ref_value.startswith("#"):
            return ref_value

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        if ref_value.startswith("file:///"):
            return ref_value

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        current_dir = current_file_path.parent

        # –†–µ–∑–æ–ª–≤–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        try:
            resolved_path = (current_dir / ref_value).resolve()

            # –î–æ–±–∞–≤–ª—è–µ–º .json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not str(resolved_path).endswith('.json'):
                resolved_path = Path(str(resolved_path) + '.json')

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ file:/// URI
            return f"file://{resolved_path}"
        except Exception as e:
            self.errors.append(f"Error resolving {ref_value} in {current_file_path}: {e}")
            return ref_value

    def make_relative_ref(self, ref_value: str, current_file_path: Path) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if ref_value.startswith("#"):
            return ref_value

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        if ref_value.startswith("file:///"):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ file:/// URI
                abs_path = Path(ref_value.replace("file://", ""))

                # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                current_dir = current_file_path.parent

                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                rel_path = os.path.relpath(abs_path, current_dir)

                # –£–±–∏—Ä–∞–µ–º .json –∏–∑ –∫–æ–Ω—Ü–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if rel_path.endswith('.json'):
                    rel_path = rel_path[:-5]

                # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                rel_path = rel_path.replace("\\", "/")

                return rel_path
            except Exception as e:
                self.errors.append(f"Error making relative {ref_value} in {current_file_path}: {e}")
                return ref_value

        return ref_value

    def process_refs_in_dict(self, obj: Any, current_file_path: Path, mode: str) -> None:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç $ref –≤ —Å–ª–æ–≤–∞—Ä–µ

        Args:
            obj: –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            current_file_path: –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
            mode: 'absolute' –∏–ª–∏ 'relative'
        """
        if isinstance(obj, dict):
            for key, value in obj.items():
                if key == "$ref" and isinstance(value, str):
                    old_value = value
                    if mode == "absolute":
                        new_value = self.resolve_ref_path(value, current_file_path)
                    else:  # relative
                        new_value = self.make_relative_ref(value, current_file_path)

                    if old_value != new_value:
                        obj[key] = new_value
                        self.changes_made += 1
                        print(f"  Changed: {old_value} -> {new_value}")
                else:
                    self.process_refs_in_dict(value, current_file_path, mode)
        elif isinstance(obj, list):
            for item in obj:
                self.process_refs_in_dict(item, current_file_path, mode)

    def process_schema_file(self, filepath: Path, mode: str, dry_run: bool = False) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—Ö–µ–º—ã

        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            mode: 'absolute' –∏–ª–∏ 'relative'
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø–∏—Å–∏
        """
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                schema = json.load(f)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            original = json.dumps(schema, sort_keys=True)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            file_changes = self.changes_made

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
            self.process_refs_in_dict(schema, filepath, mode)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            modified = json.dumps(schema, sort_keys=True)
            if original != modified:
                if not dry_run:
                    with open(filepath, 'w', encoding='utf-8') as f:
                        json.dump(schema, f, indent=2, ensure_ascii=False)

                changes_count = self.changes_made - file_changes
                action = "Would change" if dry_run else "Changed"
                print(f"‚úì {action} {changes_count} refs in: {filepath.relative_to(self.base_path.parent)}")
                return True

        except json.JSONDecodeError as e:
            self.errors.append(f"JSON error in {filepath}: {e}")
        except Exception as e:
            self.errors.append(f"Error processing {filepath}: {e}")

        return False

    def process_directory(self, mode: str, dry_run: bool = False, pattern: str = "**/*.json") -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        Args:
            mode: 'absolute' –∏–ª–∏ 'relative'
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø–∏—Å–∏
            pattern: Glob –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        """
        print(f"Processing directory: {self.base_path}")
        print(f"Mode: {mode}")
        print(f"Pattern: {pattern}")
        if dry_run:
            print("DRY RUN - no files will be modified\n")
        else:
            print()

        files_changed = 0

        for filepath in self.base_path.glob(pattern):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º samples –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–µ
            if "samples" in str(filepath) and "--include-samples" not in sys.argv:
                continue

            self.files_processed += 1
            if self.process_schema_file(filepath, mode, dry_run):
                files_changed += 1

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.files_processed}")
        print(f"  –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_changed}")
        print(f"  –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–æ refs: {self.changes_made}")

        if self.errors:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                print(f"  - {error}")
            if len(self.errors) > 10:
                print(f"  ... –∏ –µ—â—ë {len(self.errors) - 10} –æ—à–∏–±–æ–∫")

def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ $ref —Å—Å—ã–ª–∫–∞–º–∏ –≤ JSON —Å—Ö–µ–º–∞—Ö SDUI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python sdui_refs_manager.py /Users/username/Documents/front-middle-schema/SDUI

  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
  python sdui_refs_manager.py /Users/username/Documents/front-middle-schema/SDUI --relative

  # –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ (dry run)
  python sdui_refs_manager.py /Users/username/Documents/front-middle-schema/SDUI --dry-run

  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  python sdui_refs_manager.py /Users/username/Documents/front-middle-schema/SDUI --pattern "components/*/v1/*.json"

  # –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É samples
  python sdui_refs_manager.py /Users/username/Documents/front-middle-schema/SDUI --include-samples
        """
    )

    parser.add_argument("path", help="–ü—É—Ç—å –∫ SDUI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    parser.add_argument("--relative", action="store_true",
                        help="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ)")
    parser.add_argument("--dry-run", action="store_true",
                        help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª—ã")
    parser.add_argument("--pattern", default="**/*.json",
                        help="Glob –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '**/*.json')")
    parser.add_argument("--include-samples", action="store_true",
                        help="–í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö samples")

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
    mode = "relative" if args.relative else "absolute"

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    manager = SDUIRefsManager(args.path)
    manager.process_directory(mode, args.dry_run, args.pattern)

if __name__ == "__main__":
    main()
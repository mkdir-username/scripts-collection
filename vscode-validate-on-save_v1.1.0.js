#!/usr/bin/env node
/**
 * VSCode On-Save Validator v1.1.0
 *
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è SDUI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ VSCode
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ emeraldwalk.runonsave —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
 *
 * CHANGELOG v1.1.0:
 * - –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è formatOutput —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º validation-formatters
 * - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ errors/warnings –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * - JSON Pointers –∏ file:// links
 * - –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –≤—ã–≤–æ–¥–∞
 *
 * Usage:
 *   node vscode-validate-on-save_v1.1.0.js path/to/contract.json
 */

import { readFileSync } from 'fs';
import { basename, relative, join } from 'path';
import {
  createProgressBar,
  formatSectionHeader,
  formatFileInfo,
  formatValidationStatus,
  formatSummary,
  formatErrorsSection,
  formatWarningsSection,
  formatFooter,
  formatParseError
} from './validation-formatters_v1.0.0.js';

const PROJECT_ROOT =
  process.env.PROJECT_ROOT ||
  '/Users/username/Documents/front-middle-schema';

// –ü—É—Ç—å –∫ MCP —Å–µ—Ä–≤–µ—Ä—É —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
const MCP_ROOT = '/Users/username/Scripts/alfa-sdui-mcp';

// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const filePath = process.argv[2];

if (!filePath) {
  console.error('‚ùå ERROR: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω');
  console.error('Usage: node vscode-validate-on-save_v1.1.0.js <file>');
  process.exit(1);
}

/**
 * –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –¥–ª—è VSCode Output Panel
 * v1.1.0 - —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º validation-formatters
 */
function formatOutput(filePath, report, parseError, fileSize, duration) {
  const SEPARATOR = '‚îÅ'.repeat(80);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ parse error
  if (parseError) {
    console.log(formatParseError(filePath, PROJECT_ROOT, parseError));
    return;
  }

  // –ù–∞—á–∞–ª–æ –≤—ã–≤–æ–¥–∞
  console.log(SEPARATOR);

  // FILE INFO —Å–µ–∫—Ü–∏—è
  console.log(formatFileInfo(filePath, PROJECT_ROOT, fileSize));

  // STATUS —Å–µ–∫—Ü–∏—è
  console.log(formatValidationStatus(report.valid));

  // SUMMARY —Å–µ–∫—Ü–∏—è
  console.log(formatSummary(report));

  // ERRORS —Å–µ–∫—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (report.errors.length > 0) {
    console.log(formatErrorsSection(report.errors, filePath));
  }

  // WARNINGS —Å–µ–∫—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (report.warnings.length > 0) {
    console.log(formatWarningsSection(report.warnings, filePath));
  }

  // FOOTER
  console.log('\n' + formatFooter(duration));
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function showValidationProgress() {
  const steps = [
    { name: 'üìÇ Reading file...', progress: 0.2 },
    { name: 'üîç Parsing JSON...', progress: 0.4 },
    { name: '‚öôÔ∏è  Initializing validator...', progress: 0.6 },
    { name: 'üî¨ Validating contract...', progress: 0.8 }
  ];

  console.log(formatSectionHeader('PROCESSING'));

  steps.forEach(step => {
    console.log(step.name);
  });

  console.log('');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function validateFile(filePath) {
  const startTime = Date.now();

  try {
    // –ü—Ä–æ–≥—Ä–µ—Å—Å: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    showValidationProgress();

    // –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    console.log('üìÇ Reading file...');
    const content = readFileSync(filePath, 'utf-8');
    const fileSizeKB = (Buffer.byteLength(content, 'utf-8') / 1024).toFixed(2);
    console.log(`   Size: ${fileSizeKB} KB`);
    console.log(`   ${createProgressBar(1, 4)}`);

    // –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ JSON
    console.log('\nüîç Parsing JSON...');
    let contract;
    try {
      contract = JSON.parse(content);
      console.log('   ‚úì JSON parsed successfully');
      console.log(`   ${createProgressBar(2, 4)}`);
    } catch (parseError) {
      console.log('   ‚úó JSON parse failed');
      console.log('');
      formatOutput(filePath, null, parseError.message);
      process.exit(1);
    }

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    const { IncrementalValidator } = await import(
      `file://${join(MCP_ROOT, 'dist/validators/incremental-validator.js')}`
    );
    const { SDUISchemaIndex } = await import(
      `file://${join(MCP_ROOT, 'dist/schema-utils/schema-index.js')}`
    );

    // –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    console.log('\n‚öôÔ∏è  Initializing validator...');
    const schemaIndex = new SDUISchemaIndex(PROJECT_ROOT);
    console.log('   ‚úì Schema index loaded');

    const validator = new IncrementalValidator(PROJECT_ROOT, schemaIndex);
    console.log('   ‚úì Validator ready');
    console.log(`   ${createProgressBar(3, 4)}`);

    // –®–∞–≥ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è
    console.log('\nüî¨ Validating contract...');
    const report = validator.validateIncremental(contract);
    console.log('   ‚úì Validation completed');
    console.log(`   ${createProgressBar(4, 4)}`);

    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);

    console.log('');

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    formatOutput(filePath, report, undefined, fileSizeKB, duration);

    // Exit code: 0 –µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω, 1 –µ—Å–ª–∏ –Ω–µ—Ç
    process.exit(report.valid ? 0 : 1);
  } catch (error) {
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);

    console.error('‚îÅ'.repeat(80));
    console.error(`‚ùå VALIDATION ERROR (after ${duration}s)`);
    console.error('‚îÅ'.repeat(80));
    console.error(error);
    console.error('‚îÅ'.repeat(80));
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Output
validateFile(filePath);

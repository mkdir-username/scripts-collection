#!/usr/bin/env node
/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä JSON Schema –¥–ª—è SDUI v2.4.0
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞–≤–∏—Å–∞–Ω–∏—è IntelliSense –∏–∑-–∑–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏ oneOf
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è + enum –¥–ª—è type –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const fs = require('fs').promises;
const path = require('path');

const SDUI_ROOT = process.argv[2]
  ? path.dirname(process.argv[2]).replace(/\/SDUI.*$/, '')
  : '/Users/username/Documents/front-middle-schema';

async function loadJson(filePath) {
  try {
    const content = await fs.readFile(filePath, 'utf8');
    return JSON.parse(content);
  } catch (err) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${filePath}`);
    return null;
  }
}

async function extractComponentNames() {
  const layoutContentPath = path.join(SDUI_ROOT, 'SDUI/common/LayoutElement/LayoutElementContent.json');
  const schema = await loadJson(layoutContentPath);

  if (!schema?.oneOf) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω oneOf –≤ LayoutElementContent.json');
  }

  const componentNames = schema.oneOf
    .map(item => item.$ref?.split('/').pop().replace('.json', ''))
    .filter(Boolean)
    .sort();

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${componentNames.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
  return componentNames;
}

async function main() {
  console.log('üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π SDUI Schema v2.4.0...\n');

  const componentNames = await extractComponentNames();

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞: –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + enum –¥–ª—è type
  const simplifiedSchema = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "SDUI Simplified Schema v2.4.0",
    "description": "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –±–µ–∑ –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ IntelliSense",
    "type": "object",
    "properties": {
      "$schema": {
        "type": "string",
        "description": "–°—Å—ã–ª–∫–∞ –Ω–∞ JSON Schema"
      },
      "version": {
        "type": "integer",
        "description": "–í–µ—Ä—Å–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
        "default": 1
      },
      "rootElement": {
        "type": "object",
        "description": "–ö–æ—Ä–Ω–µ–≤–æ–π UI —ç–ª–µ–º–µ–Ω—Ç",
        "properties": {
          "type": {
            "type": "string",
            "enum": componentNames,
            "description": "–¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"
          }
        },
        "required": ["type"],
        "additionalProperties": true
      },
      "type": {
        "type": "string",
        "enum": componentNames,
        "description": "–¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)"
      },
      "data": {
        "type": "object",
        "description": "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
        "additionalProperties": true
      },
      "state": {
        "type": "object",
        "description": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (runtime –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)",
        "additionalProperties": true
      },
      "computed": {
        "type": "object",
        "description": "–í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞",
        "additionalProperties": true
      },
      "metadata": {
        "type": "object",
        "description": "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
        "additionalProperties": true
      }
    },
    "additionalProperties": true,
    "definitions": {
      "Component": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": componentNames,
            "description": "–¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"
          }
        },
        "required": ["type"],
        "additionalProperties": true
      }
    }
  };

  const outputPath = path.join(SDUI_ROOT, 'Scripts/sdui_vscode_schema_v2.4.0_simplified.json');
  await fs.writeFile(outputPath, JSON.stringify(simplifiedSchema, null, 2) + '\n', 'utf8');

  console.log(`\n‚úÖ –°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${outputPath}`);
  console.log(`üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ enum: ${componentNames.length}`);
  console.log(`üì¶ –†–∞–∑–º–µ—Ä: ${(JSON.stringify(simplifiedSchema).length / 1024).toFixed(1)} KB`);
  console.log('\nüí° –≠—Ç–∞ —Å—Ö–µ–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:');
  console.log('   ‚úì –ë—ã—Å—Ç—Ä—ã–π IntelliSense –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è');
  console.log('   ‚úì –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è type (55 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)');
  console.log('   ‚úì –ë–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
  console.log('   ‚úó –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
}

main().catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  process.exit(1);
});
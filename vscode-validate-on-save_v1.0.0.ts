#!/usr/bin/env node
/**
 * VSCode On-Save Validator v1.0.0
 *
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è SDUI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ VSCode
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ emeraldwalk.runonsave —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
 *
 * Usage:
 *   node vscode-validate-on-save_v1.0.0.js path/to/contract.json
 */

import { readFileSync } from 'fs';
import { basename, relative, join } from 'path';

const PROJECT_ROOT =
  process.env.PROJECT_ROOT ||
  '/Users/username/Documents/front-middle-schema';

// –ü—É—Ç—å –∫ MCP —Å–µ—Ä–≤–µ—Ä—É —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
const MCP_ROOT = '/Users/username/Documents/front-middle-schema/alfa-sdui-mcp';

// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const filePath = process.argv[2];

if (!filePath) {
  console.error('‚ùå ERROR: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω');
  console.error('Usage: node vscode-validate-on-save_v1.0.0.js <file>');
  process.exit(1);
}

// –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –¥–ª—è VSCode Output Panel
function formatOutput(
  filePath: string,
  report: any | null,
  parseError?: string
): void {
  const fileName = basename(filePath);
  const relativePath = relative(PROJECT_ROOT, filePath);

  console.log('‚îÅ'.repeat(80));
  console.log(`üìÑ File: ${fileName}`);
  console.log(`üìÅ Path: ${relativePath}`);
  console.log('‚îÅ'.repeat(80));

  if (parseError) {
    console.log('');
    console.log('‚ùå PARSE ERROR');
    console.log('‚îÅ'.repeat(80));
    console.log(parseError);
    console.log('');
    console.log('üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ JSON');
    console.log('‚îÅ'.repeat(80));
    return;
  }

  if (report.valid) {
    console.log('');
    console.log('‚úÖ CONTRACT VALID');
    console.log('‚îÅ'.repeat(80));
    console.log(
      `üìä Web Compatibility: ${report.webCompatibility.toFixed(1)}%`
    );

    if (report.dataBindings?.hasBindings) {
      console.log(
        `üîó Data Bindings: ${report.dataBindings.totalBindings} found`
      );
      console.log(`   Types: state(${report.dataBindings.byType.state}), data(${report.dataBindings.byType.data}), computed(${report.dataBindings.byType.computed})`
      );
    }

    if (report.versions) {
      const versionsList = Object.entries(report.versions.byVersion)
        .map(([v, count]) => `${v}(${count})`)
        .join(', ');
      console.log(`üì¶ Components: ${report.versions.totalComponents}`);
      console.log(`   Versions: ${versionsList}`);
    }

    if (report.warnings.length > 0) {
      console.log('');
      console.log(`‚ö†Ô∏è  WARNINGS (${report.warnings.length})`);
      console.log('‚îÅ'.repeat(80));
      report.warnings.forEach((warning: string, i: number) => {
        console.log(`${i + 1}. ${warning}`);
      });
    }

    console.log('');
    console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  } else {
    console.log('');
    console.log('‚ùå CONTRACT INVALID');
    console.log('‚îÅ'.repeat(80));
    console.log(
      `üìä Web Compatibility: ${report.webCompatibility.toFixed(1)}%`
    );
    console.log(`üî¥ Errors: ${report.errors.length}`);
    console.log(`üü° Warnings: ${report.warnings.length}`);

    if (report.errors.length > 0) {
      console.log('');
      console.log(`üî¥ ERRORS (${report.errors.length})`);
      console.log('‚îÅ'.repeat(80));
      report.errors.forEach((error: string, i: number) => {
        console.log(`${i + 1}. ${error}`);
      });
    }

    if (report.warnings.length > 0) {
      console.log('');
      console.log(`‚ö†Ô∏è  WARNINGS (${report.warnings.length})`);
      console.log('‚îÅ'.repeat(80));
      report.warnings.forEach((warning: string, i: number) => {
        console.log(`${i + 1}. ${warning}`);
      });
    }

    console.log('');
    console.log('üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
  }

  console.log('‚îÅ'.repeat(80));
  console.log('');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async function validateFile(filePath: string): Promise<void> {
  const startTime = Date.now();

  try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    const { IncrementalValidator } = await import(`file://${join(MCP_ROOT, 'dist/validators/incremental-validator.js')}`);
    const { SDUISchemaIndex } = await import(`file://${join(MCP_ROOT, 'dist/schema-utils/schema-index.js')}`);

    // –ü—Ä–æ–≥—Ä–µ—Å—Å: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const fileName = basename(filePath);
    console.log('‚îÅ'.repeat(80));
    console.log(`üîÑ PROCESSING: ${fileName}`);
    console.log('‚îÅ'.repeat(80));

    // –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
    console.log('üìÇ Reading file...');
    const content = readFileSync(filePath, 'utf-8');
    const fileSizeKB = (Buffer.byteLength(content, 'utf-8') / 1024).toFixed(2);
    console.log(`   Size: ${fileSizeKB} KB`);

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    console.log('üîç Parsing JSON...');
    let contract;
    try {
      contract = JSON.parse(content);
      console.log('   ‚úì JSON parsed successfully');
    } catch (parseError) {
      console.log('   ‚úó JSON parse failed');
      console.log('');
      formatOutput(filePath, null, (parseError as Error).message);
      process.exit(1);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    console.log('‚öôÔ∏è  Initializing validator...');
    const schemaIndex = new SDUISchemaIndex(PROJECT_ROOT);
    console.log('   ‚úì Schema index loaded');

    const validator = new IncrementalValidator(PROJECT_ROOT, schemaIndex);
    console.log('   ‚úì Validator ready');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    console.log('üî¨ Validating contract...');
    const report = validator.validateIncremental(contract);

    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    console.log(`   ‚úì Validation completed in ${duration}s`);
    console.log('');

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    formatOutput(filePath, report);

    // Exit code: 0 –µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω, 1 –µ—Å–ª–∏ –Ω–µ—Ç
    process.exit(report.valid ? 0 : 1);
  } catch (error) {
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);

    console.error('‚îÅ'.repeat(80));
    console.error(`‚ùå VALIDATION ERROR (after ${duration}s)`);
    console.error('‚îÅ'.repeat(80));
    console.error(error);
    console.error('‚îÅ'.repeat(80));
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Output
validateFile(filePath);

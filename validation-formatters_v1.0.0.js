/**
 * Validation Formatters v1.0.0
 *
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SDUI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
 */

import { basename, relative } from 'path';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const SEPARATOR_FULL = '‚îÅ'.repeat(80);
const SEPARATOR_SECTION = '‚îÄ'.repeat(60);

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
 */
export function createProgressBar(current, total, width = 40) {
  const percentage = total > 0 ? current / total : 0;
  const filled = Math.floor(percentage * width);
  const empty = width - filled;

  const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  const percent = (percentage * 100).toFixed(0);

  return `[${bar}] ${percent}%`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
 */
export function formatSectionHeader(title) {
  const padding = Math.floor((80 - title.length - 8) / 2);
  const left = '‚îÅ'.repeat(padding);
  const right = '‚îÅ'.repeat(80 - padding - title.length - 8);
  return `${left} ${title} ${right}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
 */
export function formatFileInfo(filePath, projectRoot, fileSize) {
  const fileName = basename(filePath);
  const relativePath = relative(projectRoot, filePath);

  let output = formatSectionHeader('FILE INFO') + '\n';
  output += `üìÑ Name: ${fileName}\n`;
  output += `üìÅ Path: ${relativePath}\n`;
  if (fileSize) {
    output += `üìä Size: ${fileSize} KB\n`;
  }

  return output;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function formatValidationStatus(valid) {
  let output = formatSectionHeader(valid ? 'STATUS ‚úÖ' : 'STATUS ‚ùå') + '\n';

  if (valid) {
    output += '‚úÖ CONTRACT VALID\n';
    output += '   –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n';
  } else {
    output += '‚ùå CONTRACT INVALID\n';
    output += '   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n';
  }

  return output;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç summary –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function formatSummary(report) {
  let output = formatSectionHeader('SUMMARY') + '\n';

  output += `üìä Web Compatibility: ${report.webCompatibility.toFixed(1)}%\n`;
  output += `üî¥ Errors: ${report.errors.length}\n`;
  output += `üü° Warnings: ${report.warnings.length}\n`;

  if (report.dataBindings?.hasBindings) {
    output += `üîó Data Bindings: ${report.dataBindings.totalBindings} found\n`;
    output += `   Types: state(${report.dataBindings.byType.state}), `;
    output += `data(${report.dataBindings.byType.data}), `;
    output += `computed(${report.dataBindings.byType.computed})\n`;
  }

  if (report.versions) {
    const versionsList = Object.entries(report.versions.byVersion)
      .map(([v, count]) => `${v}(${count})`)
      .join(', ');
    output += `üì¶ Components: ${report.versions.totalComponents}\n`;
    output += `   Versions: ${versionsList}\n`;
  }

  return output;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç path –≤ JSON Pointer
 */
export function pathToJsonPointer(path) {
  if (!path) return '';

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º path –≤–∏–¥–∞ "components[0].id" –≤ "/components/0/id"
  return '/' + path
    .replace(/\[(\d+)\]/g, '/$1')
    .replace(/\./g, '/');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç file:// —Å—Å—ã–ª–∫—É —Å line number
 */
export function createFileLink(filePath, line) {
  const fileUrl = `file://${filePath}`;
  return line ? `${fileUrl}:${line}` : fileUrl;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç issues –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
 */
export function groupIssuesByComponent(issues) {
  const grouped = new Map();

  issues.forEach(issue => {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const componentMatch = issue.match(/Component ['"]([^'"]+)['"]/i) ||
                          issue.match(/at path ['"]?([^'":\s]+)/i) ||
                          issue.match(/^([^:]+):/);

    const component = componentMatch ? componentMatch[1] : 'General';

    if (!grouped.has(component)) {
      grouped.set(component, []);
    }
    grouped.get(component).push(issue);
  });

  return grouped;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç component box
 */
export function formatComponentBox(componentName, issueCount) {
  const titleLine = ` ${componentName} `;
  const countLine = ` ${issueCount} issue${issueCount !== 1 ? 's' : ''} `;
  const maxWidth = Math.max(titleLine.length, countLine.length);

  const topBorder = '‚îå‚îÄ' + '‚îÄ'.repeat(maxWidth) + '‚îÄ‚îê';
  const bottomBorder = '‚îî‚îÄ' + '‚îÄ'.repeat(maxWidth) + '‚îÄ‚îò';

  const paddedTitle = titleLine.padEnd(maxWidth);
  const paddedCount = countLine.padEnd(maxWidth);

  return [
    topBorder,
    `‚îÇ ${paddedTitle} ‚îÇ`,
    `‚îÇ ${paddedCount} ‚îÇ`,
    bottomBorder
  ].join('\n');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç issue —Å –¥–µ—Ç–∞–ª—è–º–∏
 */
export function formatIssue(index, message, filePath, path, jsonPointer) {
  let output = `\n‚ùå [${index}] ${message}\n`;

  if (path) {
    output += `    Path: ${path}\n`;
  }

  if (jsonPointer) {
    output += `    JSON Pointer: ${jsonPointer}\n`;
  }

  if (filePath) {
    output += `    Link: ${createFileLink(filePath)}\n`;
  }

  return output;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç warning —Å –¥–µ—Ç–∞–ª—è–º–∏
 */
export function formatWarning(index, message, filePath, path, jsonPointer) {
  let output = `\n‚ö†Ô∏è  [${index}] ${message}\n`;

  if (path) {
    output += `    Path: ${path}\n`;
  }

  if (jsonPointer) {
    output += `    JSON Pointer: ${jsonPointer}\n`;
  }

  if (filePath) {
    output += `    Link: ${createFileLink(filePath)}\n`;
  }

  return output;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –æ—à–∏–±–æ–∫ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
 */
export function formatErrorsSection(errors, filePath) {
  if (errors.length === 0) return '';

  let output = '\n' + formatSectionHeader(`ERRORS (${errors.length})`) + '\n';

  const grouped = groupIssuesByComponent(errors);

  grouped.forEach((componentErrors, component) => {
    output += '\n' + formatComponentBox(component, componentErrors.length) + '\n';

    componentErrors.forEach((error, index) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º path –µ—Å–ª–∏ –µ—Å—Ç—å
      const pathMatch = error.match(/at path ['"]?([^'":\s]+)/i);
      const path = pathMatch ? pathMatch[1] : undefined;
      const jsonPointer = path ? pathToJsonPointer(path) : undefined;

      output += formatIssue(
        index + 1,
        error,
        filePath,
        path,
        jsonPointer
      );
    });
  });

  return output;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é warnings —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
 */
export function formatWarningsSection(warnings, filePath) {
  if (warnings.length === 0) return '';

  let output = '\n' + formatSectionHeader(`WARNINGS (${warnings.length})`) + '\n';

  const grouped = groupIssuesByComponent(warnings);

  grouped.forEach((componentWarnings, component) => {
    output += '\n' + formatComponentBox(component, componentWarnings.length) + '\n';

    componentWarnings.forEach((warning, index) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º path –µ—Å–ª–∏ –µ—Å—Ç—å
      const pathMatch = warning.match(/at path ['"]?([^'":\s]+)/i);
      const path = pathMatch ? pathMatch[1] : undefined;
      const jsonPointer = path ? pathToJsonPointer(path) : undefined;

      output += formatWarning(
        index + 1,
        warning,
        filePath,
        path,
        jsonPointer
      );
    });
  });

  return output;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç footer
 */
export function formatFooter(duration) {
  let output = SEPARATOR_FULL + '\n';
  if (duration) {
    output += `‚è±Ô∏è  Completed in ${duration}s\n`;
  }
  return output;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export function formatParseError(filePath, projectRoot, errorMessage) {
  let output = SEPARATOR_FULL + '\n';
  output += formatFileInfo(filePath, projectRoot);
  output += '\n' + formatSectionHeader('PARSE ERROR ‚ùå') + '\n';
  output += errorMessage + '\n';
  output += '\nüí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ JSON\n';
  output += formatFooter();

  return output;
}

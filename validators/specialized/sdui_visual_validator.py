#!/usr/bin/env python3
"""
SDUI Visual Validator - –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
"""

import json
import os
import time
import requests
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
import base64
import hashlib

# Playwright –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
try:
    from playwright.sync_api import sync_playwright, Browser, Page
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    print("‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright && playwright install")

# –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
from sdui_web_validator_improved import SDUIWebValidatorImproved


class SDUIVisualValidator:
    """–í–∏–∑—É–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä SDUI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""

    def __init__(self, project_root: str = "/Users/username/Documents/front-middle-schema"):
        self.project_root = Path(project_root)
        self.screenshots_dir = self.project_root / "screenshots" / "validation"
        self.screenshots_dir.mkdir(parents=True, exist_ok=True)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.servers = {
            "sdui_sandbox": "http://localhost:8080",
            "host_ui": "http://localhost:9090",
            "salary_api": "http://localhost:9090/salary-api"
        }

        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        self.contract_validator = SDUIWebValidatorImproved(project_root)

        # Playwright setup
        self.playwright = None
        self.browser = None

    def __enter__(self):
        if PLAYWRIGHT_AVAILABLE:
            self.playwright = sync_playwright().start()
            self.browser = self.playwright.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-dev-shm-usage']
            )
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.browser:
            self.browser.close()
        if self.playwright:
            self.playwright.stop()

    def check_servers_availability(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        availability = {}

        for name, url in self.servers.items():
            try:
                response = requests.get(url, timeout=5)
                availability[name] = response.status_code < 500
                print(f"‚úÖ {name} ({url}): –¥–æ—Å—Ç—É–ø–µ–Ω" if availability[name]
                      else f"‚ùå {name} ({url}): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                availability[name] = False
                print(f"‚ùå {name} ({url}): –æ—à–∏–±–∫–∞ - {e}")

        return availability

    def validate_contract_with_visual(
        self,
        contract: Dict,
        contract_name: str = "test_contract",
        take_screenshot: bool = True
    ) -> Dict:
        """
        –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Returns:
            –û—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
        """
        print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {contract_name}")

        report = {
            "contract_name": contract_name,
            "timestamp": datetime.now().isoformat(),
            "validation": {},
            "visual_test": {},
            "screenshots": [],
            "errors": [],
            "warnings": [],
            "success": False
        }

        # 1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        print("üìã –≠—Ç–∞–ø 1: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è...")
        try:
            valid, validation_report, fixed_contract = self.contract_validator.validate_contract(
                contract, strict=False, auto_fix=True
            )

            report["validation"] = {
                "valid": valid,
                "web_compatibility": validation_report.get("web_compatibility", 0),
                "errors_count": len(validation_report.get("errors", [])),
                "warnings_count": len(validation_report.get("warnings", [])),
                "details": validation_report
            }

            if fixed_contract:
                contract = fixed_contract  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç

            print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {validation_report.get('web_compatibility', 0)}% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")

        except Exception as e:
            report["errors"].append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        print("üåê –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        server_status = self.check_servers_availability()
        report["visual_test"]["server_status"] = server_status

        # 3. –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if take_screenshot and PLAYWRIGHT_AVAILABLE and any(server_status.values()):
            print("üì∏ –≠—Ç–∞–ø 3: –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            try:
                visual_results = self._perform_visual_testing(contract, contract_name)
                report["visual_test"].update(visual_results)
                report["screenshots"] = visual_results.get("screenshots", [])

            except Exception as e:
                report["errors"].append(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        # 4. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        report["success"] = (
            report["validation"].get("valid", False) and
            len(report["errors"]) == 0 and
            len(report["screenshots"]) > 0
        )

        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–®–ù–û' if report['success'] else '‚ùå –û–®–ò–ë–ö–ò'}")
        return report

    def _perform_visual_testing(self, contract: Dict, contract_name: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
        visual_results = {
            "screenshots": [],
            "rendering_errors": [],
            "performance": {},
            "accessibility": {}
        }

        if not self.browser:
            raise Exception("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = self.browser.new_page()
        page.set_viewport_size({"width": 1920, "height": 1080})

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            test_scenarios = [
                {
                    "name": "sdui_sandbox_render",
                    "url": f"{self.servers['sdui_sandbox']}/preview",
                    "method": "POST",
                    "data": contract
                },
                {
                    "name": "host_ui_integration",
                    "url": f"{self.servers['host_ui']}/",
                    "method": "GET"
                }
            ]

            for scenario in test_scenarios:
                try:
                    print(f"   üì∏ –¢–µ—Å—Ç–∏ÔøΩÔøΩ—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
                    screenshot_info = self._test_scenario(page, scenario, contract_name)
                    if screenshot_info:
                        visual_results["screenshots"].append(screenshot_info)

                except Exception as e:
                    visual_results["rendering_errors"].append(f"{scenario['name']}: {e}")
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {scenario['name']}: {e}")

        finally:
            page.close()

        return visual_results

    def _test_scenario(self, page: Page, scenario: Dict, contract_name: str) -> Optional[Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        start_time = time.time()

        try:
            if scenario["method"] == "POST":
                # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                html_content = self._create_test_html(scenario.get("data", {}))
                page.set_content(html_content)

            else:
                # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ URL
                response = page.goto(scenario["url"], wait_until="networkidle", timeout=10000)
                if not response or response.status >= 400:
                    raise Exception(f"HTTP {response.status if response else 'timeout'}")

            # –ñ–¥–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            page.wait_for_timeout(2000)

            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_name = f"{contract_name}_{scenario['name']}_{timestamp}.png"
            screenshot_path = self.screenshots_dir / screenshot_name

            page.screenshot(path=str(screenshot_path), full_page=True)

            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            load_time = time.time() - start_time
            page_title = page.title()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
            console_errors = []
            def handle_console(msg):
                if msg.type == "error":
                    console_errors.append(msg.text)

            page.on("console", handle_console)

            return {
                "scenario": scenario["name"],
                "screenshot_path": str(screenshot_path),
                "screenshot_name": screenshot_name,
                "load_time": round(load_time, 2),
                "page_title": page_title,
                "console_errors": console_errors,
                "timestamp": timestamp,
                "success": True
            }

        except Exception as e:
            return {
                "scenario": scenario["name"],
                "error": str(e),
                "load_time": round(time.time() - start_time, 2),
                "success": False
            }

    def _create_test_html(self, contract: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        contract_json = json.dumps(contract, indent=2, ensure_ascii=False)

        return f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>SDUI Contract Test</title>
            <style>
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 20px;
                    background: #f5f5f5;
                }}
                .container {{
                    max-width: 800px;
                    margin: 0 auto;
                    background: white;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                .header {{
                    color: #ef3124;
                    border-bottom: 2px solid #ef3124;
                    padding-bottom: 10px;
                    margin-bottom: 20px;
                }}
                .contract {{
                    background: #f8f9fa;
                    border: 1px solid #dee2e6;
                    border-radius: 4px;
                    padding: 15px;
                    overflow-x: auto;
                }}
                pre {{
                    margin: 0;
                    white-space: pre-wrap;
                    font-size: 12px;
                }}
                .status {{
                    display: inline-block;
                    padding: 4px 12px;
                    border-radius: 20px;
                    font-size: 12px;
                    font-weight: bold;
                    background: #28a745;
                    color: white;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1 class="header">üè¶ SDUI Contract Validation Test</h1>
                <p>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: <span class="status">–ê–ö–¢–ò–í–ù–û</span></p>
                <p>Timestamp: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>

                <h2>üìã Contract JSON:</h2>
                <div class="contract">
                    <pre>{contract_json}</pre>
                </div>

                <div style="margin-top: 20px;">
                    <small>Generated by SDUI Visual Validator</small>
                </div>
            </div>

            <script>
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                console.log('SDUI Contract loaded successfully');
                document.addEventListener('DOMContentLoaded', function() {{
                    console.log('DOM fully loaded');
                }});
            </script>
        </body>
        </html>
        """

    def generate_validation_report_html(self, report: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        screenshots_html = ""
        if report["screenshots"]:
            screenshots_html = "<h3>üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã:</h3>"
            for screenshot in report["screenshots"]:
                if screenshot.get("success"):
                    screenshots_html += f"""
                    <div style="margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 4px;">
                        <strong>{screenshot['scenario']}</strong><br>
                        <small>–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {screenshot['load_time']}s</small><br>
                        <small>–§–∞–π–ª: {screenshot['screenshot_name']}</small>
                    </div>
                    """

        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>SDUI Validation Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .success {{ color: green; }}
                .error {{ color: red; }}
                .warning {{ color: orange; }}
                .section {{ margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 4px; }}
            </style>
        </head>
        <body>
            <h1>üîç SDUI Validation Report</h1>
            <p><strong>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</strong> {report['contract_name']}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> {report['timestamp']}</p>
            <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> <span class="{'success' if report['success'] else 'error'}">
                {'‚úÖ –£–°–ü–ï–®–ù–û' if report['success'] else '‚ùå –û–®–ò–ë–ö–ò'}
            </span></p>

            <div class="section">
                <h2>üìã –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è</h2>
                <p>–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ' if report['validation'].get('valid') else '‚ùå'}</p>
                <p>Web —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {report['validation'].get('web_compatibility', 0)}%</p>
                <p>–û—à–∏–±–æ–∫: {report['validation'].get('errors_count', 0)}</p>
                <p>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {report['validation'].get('warnings_count', 0)}</p>
            </div>

            <div class="section">
                <h2>üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤</h2>
                {chr(10).join([f"<p>{name}: {'‚úÖ' if status else '‚ùå'}</p>"
                             for name, status in report.get('visual_test', {}).get('server_status', {}).items()])}
            </div>

            <div class="section">
                {screenshots_html}
            </div>

            {f'<div class="section"><h3>‚ùå –û—à–∏–±–∫–∏:</h3>{"<br>".join(report["errors"])}</div>' if report["errors"] else ''}
            {f'<div class="section"><h3>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h3>{"<br>".join(report["warnings"])}</div>' if report["warnings"] else ''}
        </body>
        </html>
        """


def test_sample_contract():
    """–¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    sample_contract = {
        "type": "TextView",
        "content": {
            "text": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤",
            "style": "header"
        },
        "releaseVersion": {
            "web": "released",
            "ios": "released",
            "android": "released"
        }
    }

    with SDUIVisualValidator() as validator:
        report = validator.validate_contract_with_visual(
            sample_contract,
            "agent_test_contract"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –æ—Ç—á–µ—Ç
        html_report = validator.generate_validation_report_html(report)
        report_path = validator.screenshots_dir / f"agent_test_contract_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_report)

        print(f"\nüìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        return report


if __name__ == "__main__":
    print("üöÄ SDUI Visual Validator")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Playwright
    if not PLAYWRIGHT_AVAILABLE:
        print("‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Playwright:")
        print("   pip install playwright")
        print("   playwright install chromium")
        exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    test_sample_contract()
#!/usr/bin/env python3
"""
Agent Validation CLI - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞–º–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
"""

import json
import sys
import argparse
from pathlib import Path
from agent_feedback_system import AgentFeedbackSystem


def validate_for_agent(contract_path: str, visual: bool = True, agent_id: str = None):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not Path(contract_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {contract_path}")
        return False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    try:
        with open(contract_path, 'r', encoding='utf-8') as f:
            contract = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç–∞
    agent_context = {
        "agent_id": agent_id or "unknown_agent",
        "contract_file": contract_path,
        "timestamp": "",
        "task": "contract_validation"
    }

    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_system = AgentFeedbackSystem()

    print(f"ü§ñ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞: {agent_context['agent_id']}")
    print(f"üìÑ –§–∞–π–ª: {contract_path}")
    print("=" * 60)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    result = feedback_system.validate_agent_contract(
        contract,
        agent_context=agent_context,
        visual_test=visual
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò")
    print(f"–û—Ü–µ–Ω–∫–∞: {result['overall_score']}/100")
    print(f"–°—Ç–∞—Ç—É—Å: {result['summary']['recommendation']}")

    if result['success']:
        print("‚úÖ –ö–û–ù–¢–†–ê–ö–¢ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print("‚ùå –ö–û–ù–¢–†–ê–ö–¢ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ê–ì–ï–ù–¢–ê:")
    for i, rec in enumerate(result["recommendations"][:10], 1):
        print(f"  {i}. {rec}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if result["corrections"]["applied_fixes"]:
        print(f"\nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        for fix in result["corrections"]["applied_fixes"]:
            print(f"  ‚Ä¢ {fix}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        fixed_path = contract_path.replace('.json', '_fixed.json')
        try:
            with open(fixed_path, 'w', encoding='utf-8') as f:
                json.dump(result["corrections"]["contract"], f, indent=2, ensure_ascii=False)
            print(f"\nüíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {fixed_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    visual_result = result.get("visual_feedback", {})
    screenshots = visual_result.get("screenshots", [])
    if screenshots:
        print(f"\nüì∏ –°–ö–†–ò–ù–®–û–¢–´ ({len(screenshots)}):")
        for screenshot in screenshots:
            if screenshot.get("success"):
                print(f"  ‚úÖ {screenshot['scenario']}: {screenshot['screenshot_name']}")
                print(f"     –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {screenshot['load_time']}s")
            else:
                print(f"  ‚ùå {screenshot['scenario']}: {screenshot.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    for i, step in enumerate(result["next_steps"], 1):
        print(f"  {i}. {step}")

    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result.get('report_saved', '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')}")

    return result['success']


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(
        description='ü§ñ Agent Validation CLI - –í–∞–ª–∏–¥–∞—Ü–∏—è SDUI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  %(prog)s contract.json

  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID –∞–≥–µ–Ω—Ç–∞
  %(prog)s contract.json --agent-id my_sdui_agent

  # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–±—ã—Å—Ç—Ä–µ–µ)
  %(prog)s contract.json --no-visual

  # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  %(prog)s contract_fixed.json --agent-id agent_v2
        """
    )

    parser.add_argument(
        'contract',
        help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'
    )

    parser.add_argument(
        '--agent-id',
        default='unknown_agent',
        help='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)'
    )

    parser.add_argument(
        '--no-visual',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã—Å—Ç—Ä–µ–µ)'
    )

    parser.add_argument(
        '--json-output',
        action='store_true',
        help='–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ'
    )

    args = parser.parse_args()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    success = validate_for_agent(
        args.contract,
        visual=not args.no_visual,
        agent_id=args.agent_id
    )

    # –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
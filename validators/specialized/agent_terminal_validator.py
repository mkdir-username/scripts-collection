#!/usr/bin/env python3
"""
–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
"""

import json
import sys
import os
import subprocess
from pathlib import Path
import urllib.request
import urllib.error
import time

def test_local_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    endpoints = [
        "http://localhost:8080",
        "http://localhost:9090"
    ]

    available = []

    for endpoint in endpoints:
        try:
            response = urllib.request.urlopen(endpoint, timeout=2)
            if response.getcode() == 200:
                available.append(endpoint)
                print(f"‚úÖ {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è {endpoint} –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.getcode()}")
        except urllib.error.URLError:
            print(f"‚ùå {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ùå {endpoint} –æ—à–∏–±–∫–∞: {e}")

    return available

def test_contract_against_endpoint(contract, endpoint_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print(f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ {endpoint_url}")

    results = {
        "success": False,
        "errors": [],
        "warnings": [],
        "response_time": None
    }

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
        contract_json = json.dumps(contract).encode('utf-8')

        # –î–ª—è SDUI sandbox (8080) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        if "8080" in endpoint_url:
            test_url = f"{endpoint_url}/sdui/test"
        else:
            test_url = f"{endpoint_url}/salary-api"

        start_time = time.time()

        req = urllib.request.Request(
            test_url,
            data=contract_json,
            headers={'Content-Type': 'application/json'}
        )

        response = urllib.request.urlopen(req, timeout=10)
        response_time = time.time() - start_time

        results["response_time"] = response_time

        if response.getcode() == 200:
            results["success"] = True
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ({response_time:.2f}s)")
        else:
            results["errors"].append(f"HTTP {response.getcode()}")
            print(f"  ‚ùå HTTP {response.getcode()}")

    except urllib.error.HTTPError as e:
        error_msg = f"HTTP {e.code}: {e.reason}"
        results["errors"].append(error_msg)
        print(f"  ‚ùå {error_msg}")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        try:
            error_body = e.read().decode('utf-8')
            if error_body:
                try:
                    error_json = json.loads(error_body)
                    if 'message' in error_json:
                        results["errors"].append(error_json['message'])
                    if 'validationErrors' in error_json:
                        results["errors"].extend(error_json['validationErrors'])
                except json.JSONDecodeError:
                    results["errors"].append(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_body[:200]}")
        except:
            pass

    except urllib.error.URLError as e:
        error_msg = f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e.reason}"
        results["errors"].append(error_msg)
        print(f"  ‚ùå {error_msg}")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
        results["errors"].append(error_msg)
        print(f"  ‚ùå {error_msg}")

    return results

def run_metaschema_validation(contract_path):
    """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ metaschema...")

    base_dir = Path(contract_path).parent.parent.parent.parent.parent
    validator_cmd = [
        "python3",
        str(base_dir / "validation-system/src/validator.py"),
        "--config",
        str(base_dir / ".validator.yaml")
    ]

    try:
        result = subprocess.run(
            validator_cmd,
            capture_output=True,
            text=True,
            timeout=30,
            cwd=str(base_dir)
        )

        if result.returncode == 0:
            print("  ‚úÖ Metaschema –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
            return True, []
        else:
            errors = result.stderr.split('\n') if result.stderr else []
            print(f"  ‚ùå Metaschema –æ—à–∏–±–∫–∏ ({len(errors)})")
            for error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                if error.strip():
                    print(f"    ‚Ä¢ {error.strip()}")
            return False, errors

    except subprocess.TimeoutExpired:
        print("  ‚è∞ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return False, ["–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"]
    except FileNotFoundError:
        print("  ‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True, []
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False, [str(e)]

def comprehensive_validation(contract_path):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    print(f"üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {Path(contract_path).name}")
    print("=" * 60)

    total_score = 100
    all_errors = []
    all_warnings = []

    # 1. –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    print("\n1Ô∏è‚É£ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    try:
        with open(contract_path, 'r', encoding='utf-8') as f:
            contract = json.load(f)
        print("  ‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        return False

    # 2. –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–∞—à –≤–∞–ª–∏–¥–∞—Ç–æ—Ä)
    print("\n2Ô∏è‚É£ –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    simple_result = subprocess.run([
        "python3",
        "/Users/username/Documents/front-middle-schema/simple_validator.py",
        contract_path
    ], capture_output=True, text=True)

    if simple_result.returncode == 0:
        print("  ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
    else:
        print("  ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        total_score -= 20

    # 3. Metaschema –≤–∞–ª–∏–¥–∞—Ü–∏—è
    print("\n3Ô∏è‚É£ Metaschema –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    meta_success, meta_errors = run_metaschema_validation(contract_path)
    if not meta_success:
        all_errors.extend(meta_errors)
        total_score -= 30

    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    available_endpoints = test_local_endpoints()

    if available_endpoints:
        for endpoint in available_endpoints:
            endpoint_result = test_contract_against_endpoint(contract, endpoint)
            if not endpoint_result["success"]:
                all_errors.extend(endpoint_result["errors"])
                total_score -= 25
    else:
        print("  ‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–µ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        all_warnings.append("–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        total_score -= 10

    # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢ÔøΩÔøΩ–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)

    if all_errors:
        print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(all_errors)}):")
        for error in all_errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  ‚Ä¢ {error}")
        if len(all_errors) > 10:
            print(f"  ... –∏ –µ—â–µ {len(all_errors) - 10} –æ—à–∏–±–æ–∫")

    if all_warnings:
        print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(all_warnings)}):")
        for warning in all_warnings:
            print(f"  ‚Ä¢ {warning}")

    total_score = max(0, min(100, total_score))
    print(f"\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {total_score}/100")

    if total_score >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        return True
    elif total_score >= 70:
        print("‚úÖ –•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return True
    elif total_score >= 50:
        print("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False
    else:
        print("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
        return False

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python agent_terminal_validator.py contract.json")
        print("\n–≠—Ç–æ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑:")
        print("‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        print("‚Ä¢ Metaschema –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        print("‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö (8080, 9090)")
        sys.exit(1)

    contract_path = sys.argv[1]

    if not os.path.exists(contract_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {contract_path}")
        sys.exit(1)

    success = comprehensive_validation(contract_path)

    print(f"\n{'‚úÖ –ö–û–ù–¢–†–ê–ö–¢ –í–ê–õ–ò–î–ï–ù' if success else '‚ùå –ö–û–ù–¢–†–ê–ö–¢ –ù–ï–í–ê–õ–ò–î–ï–ù'}")
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ SDUI
"""

import json
import sys
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¢–û–†–û–í SDUI")
    print("=" * 60)

    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")

    modules_status = {}

    # –¢–µ—Å—Ç SDUIIndexCache
    try:
        from sdui_index_cache import SDUIIndexCache
        modules_status['SDUIIndexCache'] = '‚úÖ'
    except ImportError as e:
        modules_status['SDUIIndexCache'] = f'‚ùå {e}'

    # –¢–µ—Å—Ç SDUIWebValidator
    try:
        from sdui_web_validator import SDUIWebValidator
        modules_status['SDUIWebValidator'] = '‚úÖ'
    except ImportError as e:
        modules_status['SDUIWebValidator'] = f'‚ùå {e}'

    # –¢–µ—Å—Ç SDUIWebValidatorImproved
    try:
        from sdui_web_validator_improved import SDUIWebValidatorImproved
        modules_status['SDUIWebValidatorImproved'] = '‚úÖ'
    except ImportError as e:
        modules_status['SDUIWebValidatorImproved'] = f'‚ùå {e}'

    # –¢–µ—Å—Ç SDUIVisualValidator (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ requests)
    try:
        from sdui_visual_validator import SDUIVisualValidator
        modules_status['SDUIVisualValidator'] = '‚úÖ'
    except ImportError as e:
        modules_status['SDUIVisualValidator'] = f'‚ö†Ô∏è {e}'

    # –¢–µ—Å—Ç AgentFeedbackSystem
    try:
        from agent_feedback_system import AgentFeedbackSystem
        modules_status['AgentFeedbackSystem'] = '‚úÖ'
    except ImportError as e:
        modules_status['AgentFeedbackSystem'] = f'‚ö†Ô∏è {e}'

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for module, status in modules_status.items():
        print(f"  ‚Ä¢ {module}: {status}")

    return all('‚úÖ' in status for status in modules_status.values() if not '‚ö†Ô∏è' in status)

def test_basic_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")

    try:
        from sdui_web_validator import SDUIWebValidator

        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        validator = SDUIWebValidator()

        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        test_contract = {
            "type": "TextView",
            "text": "Hello, SDUI!",
            "textColor": "#000000",
            "releaseVersion": {
                "web": "released",
                "ios": "released",
                "android": "released"
            }
        }

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        valid, report, fixed = validator.validate_contract(test_contract, strict=False)

        print(f"  ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–∞–ª–∏–¥–µ–Ω: {'‚úÖ' if valid else '‚ùå'}")
        print(f"  ‚Ä¢ WEB —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {report.get('web_compatibility', 0)}%")
        print(f"  ‚Ä¢ –û—à–∏–±–æ–∫: {len(report.get('errors', []))}")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(report.get('warnings', []))}")

        return valid

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def test_index_cache():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ –∫–µ—à–∞"""
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ –∫–µ—à–∞...")

    try:
        from sdui_index_cache import SDUIIndexCache

        # –°–æ–∑–¥–∞–µ–º –∫–µ—à
        cache = SDUIIndexCache()

        # –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        results = cache.find_component("TextView")

        if results:
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ TextView: {len(results)}")
            for result in results[:3]:
                print(f"    ‚îî‚îÄ {result['id']} (WEB: {'‚úÖ' if result['web_supported'] else '‚ùå'})")
        else:
            print("  ‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TextView –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = cache.get_statistics()
        print(f"\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"    ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {stats['total_components']}")
        print(f"    ‚Ä¢ WEB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {stats['web_components']}")
        print(f"    ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {stats['validation_coverage']:.1f}%")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º: {e}")
        return False

def test_validator_wrapper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ wrapper –¥–ª—è MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ validator_wrapper...")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
        sys.path.insert(0, str(Path.cwd() / 'SDUI' / 'sdui-mcp-framework' / 'modules'))

        from validator_wrapper import ValidatorIntegration

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        validator = ValidatorIntegration()

        print(f"  ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤: {len(validator.validators)}")

        # –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        test_contract = {
            "type": "ButtonView",
            "title": "Click me!",
            "releaseVersion": {"web": "released"}
        }

        result = validator.validate_contract(test_contract, platform="web", strict=False)

        print(f"  ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {'‚úÖ' if result['valid'] else '‚ùå'}")
        print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {', '.join(result.get('validators_used', []))}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ wrapper: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –¢–µ—Å—Ç—ã
    test_results = {
        "imports": test_imports(),
        "validation": test_basic_validation(),
        "cache": test_index_cache(),
        "wrapper": test_validator_wrapper()
    }

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 40)

    for test_name, result in test_results.items():
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"  ‚Ä¢ {test_name}: {status}")

    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_passed = all(test_results.values())

    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã SDUI —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("  pip install requests playwright")
        print("  playwright install")

    return 0 if all_passed else 1

if __name__ == "__main__":
    sys.exit(main())
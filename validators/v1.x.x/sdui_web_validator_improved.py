#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä SDUI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è WEB –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ children
- –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è Android –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import json
from typing import Dict, List, Any, Tuple, Optional
from pathlib import Path
from datetime import datetime

class SDUIWebValidatorImproved:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä SDUI –¥–ª—è WEB —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Android –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""

    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root or "/Users/username/Documents/front-middle-schema")

        # –ú–∞–ø–ø–∏–Ω–≥ Android ‚Üí WEB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.component_mapping = {
            "LabelView": "TextView",
            "setValue": "updateState",
            "sequence": "chain",
            "AndroidButton": "ButtonView",
            "IOSButton": "ButtonView"
        }

        # WEB-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        self.web_components = {
            "TextView", "ButtonView", "ImageView", "StackView", "ScrollWrapper",
            "ConstraintWrapper", "BannerWrapper", "IconView", "Spacer",
            "TextField", "TagView", "SwitchView", "StepView", "SquareWrapper",
            "SpinnerView", "Slider", "SkeletonView", "CardIconView", "CarouselWrapper"
        }

        # –î–µ–π—Å—Ç–≤–∏—è (actions) - –Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.actions = {
            "deeplink", "HttpAction", "updateState", "chain", "navigate",
            "openUrl", "copy", "share", "close", "back"
        }

        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ enum –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
        self.enum_values = {
            "center", "scale", "top", "bottom", "left", "right",
            "topAndBottom", "leftAndRight", "all", "fill", "start", "end", "middle",
            "horizontal", "vertical", "control", "focus", "selection",
            "none", "small", "medium", "large", "auto", "manual",
            "zero", "xs", "s", "m", "l", "xl", "xxl"
        }

    def convert_android_to_web(self, contract: Any) -> Any:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Android –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ WEB-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π"""
        if isinstance(contract, dict):
            converted = {}

            for key, value in contract.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Android-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
                if key in ["lifecycleEvents", "state", "androidSpecific", "iosSpecific"]:
                    continue

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                if key == "type" and isinstance(value, str):
                    if value in self.component_mapping:
                        converted[key] = self.component_mapping[value]
                        print(f"  üîÑ {value} ‚Üí {self.component_mapping[value]}")
                    else:
                        converted[key] = value
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º children (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ $children)
                elif key in ["children", "$children"] and isinstance(value, list):
                    # –í—Å–µ–≥–¥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º $children –≤ children –¥–ª—è WEB
                    converted["children"] = [self.convert_android_to_web(child) for child in value]
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                else:
                    converted[key] = self.convert_android_to_web(value)

            return converted

        elif isinstance(contract, list):
            return [self.convert_android_to_web(item) for item in contract]

        return contract

    def validate_contract(
        self,
        contract: Dict,
        strict: bool = False,
        auto_fix: bool = False
    ) -> Tuple[bool, Dict, Optional[Dict]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""

        report = {
            "valid": True,
            "errors": [],
            "warnings": [],
            "info": [],
            "web_compatibility": 100,
            "timestamp": datetime.now().isoformat()
        }

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Android –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        fixed_contract = self.convert_android_to_web(contract) if auto_fix else contract

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self._validate_structure(fixed_contract, report)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._validate_components(fixed_contract, report)

        # –†–∞—Å—á–µ—Ç WEB —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        report["web_compatibility"] = self._calculate_web_compatibility(fixed_contract)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        report["valid"] = len(report["errors"]) == 0

        return report["valid"], report, fixed_contract if auto_fix else None

    def _validate_structure(self, contract: Any, report: Dict, path: str = "root"):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        if isinstance(contract, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if "type" in contract:
                comp_type = contract["type"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∞ –Ω–µ enum –∏–ª–∏ action
                if comp_type not in self.enum_values and comp_type not in self.actions:
                    if comp_type not in self.web_components:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–ø–ø–∏–Ω–≥
                        if comp_type not in self.component_mapping:
                            report["errors"].append(f"{path}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{comp_type}'")

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º children (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ $children)
            for children_key in ["children", "$children"]:
                if children_key in contract:
                    children = contract[children_key]
                    if isinstance(children, list):
                        for i, child in enumerate(children):
                            self._validate_structure(child, report, f"{path}.{children_key}[{i}]")
                    else:
                        report["warnings"].append(f"{path}.{children_key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
                    break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º content
            if "content" in contract:
                self._validate_structure(contract["content"], report, f"{path}.content")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            for key, value in contract.items():
                if key not in ["type", "children", "content"] and isinstance(value, (dict, list)):
                    self._validate_structure(value, report, f"{path}.{key}")

        elif isinstance(contract, list):
            for i, item in enumerate(contract):
                self._validate_structure(item, report, f"{path}[{i}]")

    def _validate_components(self, contract: Any, report: Dict):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        components_count = {}

        def count_components(node):
            if isinstance(node, dict):
                if "type" in node:
                    comp_type = node["type"]
                    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –Ω–µ enum –∏ –Ω–µ actions
                    if comp_type not in self.enum_values and comp_type not in self.actions:
                        components_count[comp_type] = components_count.get(comp_type, 0) + 1

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º children (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ $children)
                for children_key in ["children", "$children"]:
                    if children_key in node and isinstance(node[children_key], list):
                        for child in node[children_key]:
                            count_components(child)
                        break

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                for value in node.values():
                    if isinstance(value, (dict, list)):
                        count_components(value)

            elif isinstance(node, list):
                for item in node:
                    count_components(item)

        count_components(contract)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        report["info"].append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {sum(components_count.values())}")
        report["info"].append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(components_count)}")

    def _calculate_web_compatibility(self, contract: Any) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ WEB —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        total = 0
        compatible = 0

        def check_compatibility(node):
            nonlocal total, compatible

            if isinstance(node, dict):
                if "type" in node:
                    comp_type = node["type"]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                    if comp_type not in self.enum_values and comp_type not in self.actions:
                        total += 1
                        if comp_type in self.web_components:
                            compatible += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º children (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ $children)
                for children_key in ["children", "$children"]:
                    if children_key in node and isinstance(node[children_key], list):
                        for child in node[children_key]:
                            check_compatibility(child)
                        break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                for value in node.values():
                    if isinstance(value, (dict, list)):
                        check_compatibility(value)

            elif isinstance(node, list):
                for item in node:
                    check_compatibility(item)

        check_compatibility(contract)

        if total == 0:
            return 100

        return int((compatible / total) * 100)


def test_improved_validator():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞\n")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º rootElement
    contract_path = '.JSON/ANDROID/main-screen/[FULL_NN]_main-screen.json'

    with open(contract_path, 'r', encoding='utf-8') as f:
        full_contract = json.load(f)

    if 'rootElement' not in full_contract:
        print("‚ùå rootElement –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    root_element = full_contract['rootElement']

    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = SDUIWebValidatorImproved()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
    print("\nüìã –í–∞–ª–∏–¥–∞—Ü–∏—è rootElement:")
    print("-" * 40)

    valid, report, fixed = validator.validate_contract(
        root_element,
        strict=False,
        auto_fix=True
    )

    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–í–ê–õ–ò–î–ù–û' if valid else '–ù–ï–í–ê–õ–ò–î–ù–û'}")
    print(f"üåê WEB —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {report['web_compatibility']}%")
    print(f"üî¥ –û—à–∏–±–æ–∫: {len(report['errors'])}")
    print(f"üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(report['warnings'])}")

    if report['errors']:
        print("\n–û—à–∏–±–∫–∏:")
        for error in report['errors'][:5]:
            print(f"  ‚Ä¢ {error}")

    print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    for info in report['info']:
        print(f"  ‚ÑπÔ∏è {info}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if fixed:
        output_path = '.JSON/ANDROID/main-screen/root_element_improved.json'
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(fixed, f, indent=2, ensure_ascii=False)
        print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {output_path}")


if __name__ == "__main__":
    test_improved_validator()
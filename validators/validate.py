#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ SDUI.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
"""

import sys
import os
import argparse
import subprocess
from pathlib import Path

VALIDATORS = {
    'latest': 'v2.0.0/sdui_web_validator_v2.0.0_advanced_lines.py',
    'v2.0.0': 'v2.0.0/sdui_web_validator_v2.0.0_advanced_lines.py',
    'v1.2.0': 'v1.x.x/sdui_web_validator_v1.2.0_with_lines.py',
    'v1.1.0': 'v1.x.x/sdui_web_validator_v1.1.0.py',
    'v1.0.0': 'v1.x.x/sdui_web_validator_v1.0.0.py',
    'byzantine': 'specialized/byzantine_validator.py',
    'visual': 'specialized/sdui_visual_validator.py',
    'cli': 'specialized/agent_validate_cli.py',
    'terminal': 'specialized/agent_terminal_validator.py',
    'contract': 'specialized/sdui_contract_validator.py',
    'pipeline': 'specialized/validation_pipeline.py',
    'simple': 'basic/simple_validator.py',
    'root': 'basic/validate_root_element.py',
}

def main():
    parser = argparse.ArgumentParser(
        description='SDUI –≤–∞–ª–∏–¥–∞—Ç–æ—Ä - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python validate.py contract.json                    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
  python validate.py --version v1.2.0 contract.json   # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
  python validate.py --type visual contract.json      # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
  python validate.py --list                           # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
        """
    )

    parser.add_argument('file', nargs='?', help='JSON —Ñ–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    parser.add_argument(
        '--version', '-v',
        choices=list(VALIDATORS.keys()),
        default='latest',
        help='–í–µ—Ä—Å–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: latest)'
    )
    parser.add_argument(
        '--type', '-t',
        choices=['byzantine', 'visual', 'cli', 'terminal', 'simple'],
        help='–¢–∏–ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞'
    )
    parser.add_argument(
        '--list', '-l',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã'
    )

    args = parser.parse_args()

    if args.list:
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã:\n")
        print("  –í–µ—Ä—Å–∏–∏:")
        for key in ['latest', 'v2.0.0', 'v1.2.0', 'v1.1.0', 'v1.0.0']:
            print(f"    {key:<10} - {VALIDATORS[key]}")
        print("\n  –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:")
        for key in ['byzantine', 'visual', 'cli', 'terminal', 'contract', 'pipeline']:
            print(f"    {key:<10} - {VALIDATORS[key]}")
        print("\n  –ü—Ä–æ—Å—Ç—ã–µ:")
        for key in ['simple', 'root']:
            print(f"    {key:<10} - {VALIDATORS[key]}")
        print()
        return

    if not args.file:
        parser.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list)")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if args.type:
        validator_key = args.type
    else:
        validator_key = args.version

    validator_path = Path(__file__).parent / VALIDATORS[validator_key]

    if not validator_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {validator_path}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: {validator_key}")
    print(f"üìÑ –§–∞–π–ª: {args.file}")
    print(f"üîß –ü—É—Ç—å: {validator_path}")
    print("=" * 80)
    print()

    try:
        result = subprocess.run(
            [sys.executable, str(validator_path), args.file],
            capture_output=False,
            text=True
        )
        sys.exit(result.returncode)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
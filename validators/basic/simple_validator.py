#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
import sys
import os
from pathlib import Path

def validate_json_syntax(contract_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JSON"""
    try:
        with open(contract_path, 'r', encoding='utf-8') as f:
            contract = json.load(f)
        return True, contract, None
    except json.JSONDecodeError as e:
        return False, None, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ JSON: {e}"
    except Exception as e:
        return False, None, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"

def validate_web_compatibility(contract):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Web –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"""
    errors = []
    warnings = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ releaseVersion
    if 'releaseVersion' not in contract:
        errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'releaseVersion'")
    else:
        release_version = contract['releaseVersion']
        if 'web' not in release_version:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'web' –≤ releaseVersion")
        elif release_version['web'] not in ['released', 'beta', 'alpha']:
            warnings.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å web: {release_version['web']}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö Android-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    forbidden_components = ['LabelView', 'EditText', 'LinearLayout']

    def check_component(obj, path=""):
        if isinstance(obj, dict):
            component_type = obj.get('type')
            if component_type in forbidden_components:
                errors.append(f"Android-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_type}' –≤ {path}")

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            for key, value in obj.items():
                check_component(value, f"{path}.{key}" if path else key)
        elif isinstance(obj, list):
            for i, item in enumerate(obj):
                check_component(item, f"{path}[{i}]")

    check_component(contract)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if 'type' not in contract:
        errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'type'")

    return errors, warnings

def suggest_fixes(contract, errors):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    fixes = []
    fixed_contract = contract.copy()

    # –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ releaseVersion
    if "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'releaseVersion'" in str(errors):
        fixed_contract['releaseVersion'] = {
            "web": "beta",
            "ios": "not_implemented",
            "android": "not_implemented"
        }
        fixes.append("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ releaseVersion —Å web: beta")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Android ‚Üí Web –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    def convert_components(obj):
        if isinstance(obj, dict):
            if obj.get('type') == 'LabelView':
                obj['type'] = 'TextView'
                fixes.append("LabelView ‚Üí TextView")

            for value in obj.values():
                if isinstance(value, (dict, list)):
                    convert_components(value)
        elif isinstance(obj, list):
            for item in obj:
                convert_components(item)

    convert_components(fixed_contract)

    return fixes, fixed_contract

def validate_contract(contract_path):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: {contract_path}")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    syntax_ok, contract, syntax_error = validate_json_syntax(contract_path)

    if not syntax_ok:
        print(f"‚ùå {syntax_error}")
        return False

    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Web
    errors, warnings = validate_web_compatibility(contract)

    # 3. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    score = 100

    if errors:
        print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):")
        for error in errors:
            print(f"  ‚Ä¢ {error}")
        score -= len(errors) * 20

    if warnings:
        print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):")
        for warning in warnings:
            print(f"  ‚Ä¢ {warning}")
        score -= len(warnings) * 5

    # 4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if errors:
        fixes, fixed_contract = suggest_fixes(contract, errors)

        if fixes:
            print(f"\nüîß –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            for fix in fixes:
                print(f"  ‚Ä¢ {fix}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            fixed_path = contract_path.replace('.json', '_fixed.json')
            with open(fixed_path, 'w', encoding='utf-8') as f:
                json.dump(fixed_contract, f, indent=2, ensure_ascii=False)
            print(f"üíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {fixed_path}")

    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    score = max(0, min(100, score))
    print(f"\nüìä –û—Ü–µ–Ω–∫–∞: {score}/100")

    if score >= 80:
        print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    elif score >= 60:
        print("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False
    else:
        print("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
        return False

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python simple_validator.py contract.json")
        sys.exit(1)

    contract_path = sys.argv[1]

    if not os.path.exists(contract_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {contract_path}")
        sys.exit(1)

    success = validate_contract(contract_path)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è rootElement –∏–∑ Android –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path.cwd()))

from sdui_index_cache import SDUIIndexCache
from sdui_web_validator import SDUIWebValidator

def validate_root_element():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è rootElement –∏–∑ Android –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""

    contract_path = '.JSON/ANDROID/main-screen/[FULL_NN]_main-screen.json'

    print(f"üìÑ –í–∞–ª–∏–¥–∞—Ü–∏—è rootElement –∏–∑: {contract_path}")
    print("=" * 80)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    with open(contract_path, 'r', encoding='utf-8') as f:
        contract = json.load(f)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º rootElement
    if 'rootElement' not in contract:
        print("‚ùå rootElement –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ")
        return

    root_element = contract['rootElement']

    print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ rootElement:")
    print(f"  –¢–∏–ø: {root_element.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º rootElement –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    output_path = '.JSON/ANDROID/main-screen/root_element_only.json'
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(root_element, f, indent=2, ensure_ascii=False)
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω rootElement: {output_path}")

    # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –≤–∞–ª–∏–¥–∞—Ç–æ—Ä - —É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä:")
    print("  ‚úÖ –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –ù–ï –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
    print("  ‚úÖ children - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
    print("  ‚úÖ LabelView ‚Üí TextView (–∞–≤—Ç–æ–∑–∞–º–µ–Ω–∞)")

    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = SDUIWebValidator()

    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–ª—É–±–∏–Ω—ã
    validator.MAX_DEPTH = 999  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Android-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    def convert_android_to_web(node):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Android –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ WEB"""
        if isinstance(node, dict):
            # –ó–∞–º–µ–Ω—è–µ–º LabelView –Ω–∞ TextView
            if node.get('type') == 'LabelView':
                node['type'] = 'TextView'
                print(f"    üîÑ LabelView ‚Üí TextView")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Android actions
            if node.get('type') == 'setValue':
                node['type'] = 'updateState'
                print(f"    üîÑ setValue ‚Üí updateState")

            if node.get('type') == 'sequence':
                node['type'] = 'chain'
                print(f"    üîÑ sequence ‚Üí chain")

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for key, value in node.items():
                if key == 'children' and isinstance(value, list):
                    # children –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!
                    for child in value:
                        convert_android_to_web(child)
                elif isinstance(value, (dict, list)):
                    convert_android_to_web(value)
        elif isinstance(node, list):
            for item in node:
                convert_android_to_web(item)

        return node

    print("\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Android ‚Üí WEB:")
    web_root_element = convert_android_to_web(json.loads(json.dumps(root_element)))

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ rootElement...")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã
    original_validate = validator.validate_contract

    def validate_without_depth(contract, strict=False, auto_fix=False):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã"""
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        result = original_validate(contract, strict, auto_fix)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≥–ª—É–±–∏–Ω—ã
        if result[1]['errors']:
            filtered_errors = [
                e for e in result[1]['errors']
                if '–≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏' not in e
            ]
            result[1]['errors'] = filtered_errors

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        result = (
            len(result[1]['errors']) == 0,
            result[1],
            result[2]
        )

        return result

    validator.validate_contract = validate_without_depth

    valid, report, fixed = validator.validate_contract(
        web_root_element,
        strict=False,
        auto_fix=True
    )

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ rootElement:")
    print(f"  {'‚úÖ' if valid else '‚ùå'} –°—Ç–∞—Ç—É—Å: {'–í–ê–õ–ò–î–ù–û' if valid else '–ù–ï–í–ê–õ–ò–î–ù–û'}")
    print(f"  üåê WEB —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {report['web_compatibility']}%")
    print(f"  üî¥ –û—à–∏–±–æ–∫: {len(report['errors'])}")
    print(f"  üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(report['warnings'])}")

    if report['errors']:
        print("\n‚ùå –û—à–∏–±–∫–∏ (–ø–µ—Ä–≤—ã–µ 10):")
        for error in report['errors'][:10]:
            if '–≥–ª—É–±–∏–Ω–∞' not in error:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≥–ª—É–±–∏–Ω—ã
                print(f"  ‚Ä¢ {error}")

    if report['warnings']:
        print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 10):")
        for warning in report['warnings'][:10]:
            print(f"  ‚Ä¢ {warning}")

    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã rootElement:")

    def analyze_structure(node, level=0, parent_type=None):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–µ—Ä–µ–≤–∞"""
        stats = {
            'max_depth': level,
            'components': {},
            'has_children': False
        }

        if isinstance(node, dict):
            if 'type' in node:
                comp_type = node.get('type')
                stats['components'][comp_type] = stats['components'].get(comp_type, 0) + 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º children
            if 'children' in node:
                stats['has_children'] = True
                children = node['children']
                if isinstance(children, list):
                    for child in children:
                        child_stats = analyze_structure(child, level + 1, node.get('type'))
                        stats['max_depth'] = max(stats['max_depth'], child_stats['max_depth'])
                        for comp, count in child_stats['components'].items():
                            stats['components'][comp] = stats['components'].get(comp, 0) + count

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º content
            if 'content' in node:
                content_stats = analyze_structure(node['content'], level + 1, node.get('type'))
                stats['max_depth'] = max(stats['max_depth'], content_stats['max_depth'])
                for comp, count in content_stats['components'].items():
                    stats['components'][comp] = stats['components'].get(comp, 0) + count

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
            for key, value in node.items():
                if key not in ['type', 'children', 'content'] and isinstance(value, (dict, list)):
                    nested_stats = analyze_structure(value, level + 1, node.get('type'))
                    stats['max_depth'] = max(stats['max_depth'], nested_stats['max_depth'])
                    for comp, count in nested_stats['components'].items():
                        stats['components'][comp] = stats['components'].get(comp, 0) + count

        elif isinstance(node, list):
            for item in node:
                item_stats = analyze_structure(item, level, parent_type)
                stats['max_depth'] = max(stats['max_depth'], item_stats['max_depth'])
                for comp, count in item_stats['components'].items():
                    stats['components'][comp] = stats['components'].get(comp, 0) + count

        return stats

    stats = analyze_structure(web_root_element)

    print(f"  üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {stats['max_depth']} —É—Ä–æ–≤–Ω–µ–π")
    print(f"  üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(stats['components'])}")
    print(f"  üë∂ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç children: {'–î–ê' if stats['has_children'] else '–ù–ï–¢'}")

    print("\n  –¢–æ–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    sorted_components = sorted(stats['components'].items(), key=lambda x: x[1], reverse=True)
    for comp, count in sorted_components[:10]:
        print(f"    ‚Ä¢ {comp}: {count} —Ä–∞–∑")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º WEB-–≤–µ—Ä—Å–∏—é
    if fixed or web_root_element:
        web_output_path = '.JSON/ANDROID/main-screen/root_element_web.json'
        with open(web_output_path, 'w', encoding='utf-8') as f:
            json.dump(fixed if fixed else web_root_element, f, indent=2, ensure_ascii=False)
        print(f"\n‚úÖ WEB-–≤–µ—Ä—Å–∏—è rootElement —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {web_output_path}")

    return valid

if __name__ == "__main__":
    validate_root_element()
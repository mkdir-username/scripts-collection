#!/usr/bin/env python3
"""
SDUI Web Platform Validator v3.0.0 - Simple and Accurate
–ü—Ä–æ—Å—Ç–æ–π –∏ —Ç–æ—á–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç–µ —Ñ–∞–π–ª–∞
"""

import json
import sys
import os
import re
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from collections import defaultdict

class SimpleLineMapper:
    """–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –ø–æ JSON –ø—É—Ç–∏"""

    def __init__(self, file_path: str):
        self.file_path = file_path
        self.lines = []
        self.json_data = None
        self._load_file()

    def _load_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ JSON"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                self.lines = content.split('\n')
                self.json_data = json.loads(content)
        except Exception as e:
            print(f"Error loading file: {e}")

    def find_component_lines(self, component_type: str) -> List[Tuple[str, int]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫
        """
        results = []

        # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        pattern = rf'"type"\s*:\s*"{component_type}"'
        component_lines = []

        for i, line in enumerate(self.lines, 1):
            if re.search(pattern, line):
                component_lines.append(i)

        # –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å
        for line_num in component_lines:
            path = self._find_path_for_line(line_num, component_type)
            results.append((path, line_num))

        return results

    def _find_path_for_line(self, line_num: int, component_type: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç JSON –ø—É—Ç—å –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        """
        # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–∏ –≤—ã—à–µ –ø–æ —Ñ–∞–π–ª—É
        path_parts = []
        current_indent = len(self.lines[line_num - 1]) - len(self.lines[line_num - 1].lstrip())

        # –ò–¥–µ–º –≤–≤–µ—Ä—Ö –ø–æ —Ñ–∞–π–ª—É, —Å–æ–±–∏—Ä–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–∏
        for i in range(line_num - 1, 0, -1):
            line = self.lines[i - 1]
            indent = len(line) - len(line.lstrip())

            # –ò—â–µ–º –∫–ª—é—á–∏ —Å –º–µ–Ω—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ)
            if indent < current_indent:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–ª—é—á–æ–º –æ–±—ä–µ–∫—Ç–∞
                key_match = re.search(r'"([^"]+)"\s*:', line)
                if key_match:
                    key = key_match.group(1)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ–º –º–∞—Å—Å–∏–≤–∞
                    if '[' in line:
                        # –≠—Ç–æ –º–∞—Å—Å–∏–≤, –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å
                        array_index = self._find_array_index(i, line_num)
                        path_parts.insert(0, f"{key}[{array_index}]")
                    else:
                        path_parts.insert(0, key)

                    current_indent = indent

                    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ—Ä–Ω—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    if indent == 0:
                        break

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        return '.'.join(path_parts) if path_parts else f"line_{line_num}"

    def _find_array_index(self, array_start_line: int, target_line: int) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
        """
        index = 0
        brace_depth = 0
        in_array = False

        for i in range(array_start_line, target_line):
            line = self.lines[i - 1]

            # –ù–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
            if '[' in line and not in_array:
                in_array = True
                if '{' in line:
                    if i >= target_line - 10:  # –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                        return index
                    index += 1
                continue

            if in_array:
                # –°—á–∏—Ç–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –ø–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º —Å–∫–æ–±–∫–∞–º
                stripped = line.strip()
                if stripped.startswith('{'):
                    if brace_depth == 0:
                        if i >= target_line - 10:  # –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                            return index
                        index += 1
                    brace_depth += stripped.count('{') - stripped.count('}')
                elif '{' in stripped:
                    brace_depth += stripped.count('{') - stripped.count('}')
                elif '}' in stripped:
                    brace_depth -= stripped.count('}')

        return index


class SDUIWebValidator:
    def __init__(self):
        # –ò—â–µ–º –ø—É—Ç—å –∫ —Å—Ö–µ–º–∞–º
        possible_paths = [
            Path('/Users/username/Documents/front-middle-schema'),
            Path.home() / 'Documents' / 'front-middle-schema',
            Path(__file__).parent.parent.parent.parent / 'Documents' / 'front-middle-schema',
        ]

        self.base_path = None
        for path in possible_paths:
            if path.exists() and (path / 'SDUI').exists():
                self.base_path = path
                break

        if not self.base_path:
            self.base_path = Path(__file__).parent

        self.schema_cache = {}

    def load_schema(self, schema_path: Path) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ö–µ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if schema_path in self.schema_cache:
            return self.schema_cache[schema_path]

        try:
            with open(schema_path, 'r', encoding='utf-8') as f:
                schema = json.load(f)
                self.schema_cache[schema_path] = schema
                return schema
        except Exception as e:
            return {}

    def find_component_schema(self, component_type: str) -> Optional[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ö–µ–º—É –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        patterns = [
            f"SDUI/components/{component_type}/v*/{component_type}.json",
            f"SDUI/layouts/{component_type}/v*/{component_type}.json",
            f"SDUI/components/{component_type}/v1/{component_type}.json",
            f"SDUI/layouts/{component_type}/v1/{component_type}.json",
        ]

        for pattern in patterns:
            matches = list(self.base_path.glob(pattern))
            if matches:
                return sorted(matches)[-1]

        return None

    def check_component_compatibility(self, component_type: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"""
        schema_path = self.find_component_schema(component_type)

        if not schema_path:
            return True, "Schema not found"

        schema = self.load_schema(schema_path)

        if 'releaseVersion' in schema:
            web_release = schema['releaseVersion'].get('web', 'released')
            if web_release in ['notReleased', 'willNotBeReleased']:
                return False, f"web: {web_release}"

        return True, "released"

    def validate_contract(self, contract_path: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"""
        line_mapper = SimpleLineMapper(contract_path)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        component_types = set()
        pattern = r'"type"\s*:\s*"([^"]+)"'

        for line in line_mapper.lines:
            match = re.search(pattern, line)
            if match:
                comp_type = match.group(1)
                if comp_type.endswith('View') or comp_type.endswith('Wrapper'):
                    component_types.add(comp_type)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        incompatible_components = defaultdict(list)

        for comp_type in component_types:
            is_compatible, reason = self.check_component_compatibility(comp_type)

            if not is_compatible:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                occurrences = line_mapper.find_component_lines(comp_type)

                for path, line_num in occurrences:
                    incompatible_components[comp_type].append({
                        'path': path,
                        'line': line_num,
                        'reason': reason
                    })

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")

        print(f"\n{'‚ïê'*80}")
        print(f"üìã –í–ê–õ–ò–î–ê–¶–ò–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° WEB v3.0 | {timestamp}")
        print(f"{'‚ïê'*80}")

        if incompatible_components:
            for comp_type, occurrences in incompatible_components.items():
                if occurrences:
                    print(f"\n‚ùå {comp_type} ‚Äî –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ({occurrences[0]['reason']})")
                    print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(occurrences)} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")

                    for occurrence in occurrences:
                        print(f"\n   üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:")
                        print(f"      –ü—É—Ç—å: {occurrence['path']}")
                        print(f"      ‚Üí {contract_path}:{occurrence['line']}:1")
        else:
            print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π")

        # –ò—Ç–æ–≥
        print(f"\n{'‚îÄ'*80}")
        if not incompatible_components:
            print(f"–ò–¢–û–ì: ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π")
        else:
            total_errors = sum(len(v) for v in incompatible_components.values())
            print(f"–ò–¢–û–ì: ‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º (–≤—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors})")

        print(f"{'‚ïê'*80}\n")

        return len(incompatible_components) == 0


def main():
    if len(sys.argv) < 2:
        print("Usage: python sdui_web_validator.py <contract.json>")
        sys.exit(1)

    contract_path = sys.argv[1]

    if not os.path.exists(contract_path):
        print(f"Error: File not found: {contract_path}")
        sys.exit(1)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-JSON —Ñ–∞–π–ª—ã
    if not contract_path.endswith('.json'):
        sys.exit(0)

    validator = SDUIWebValidator()
    is_valid = validator.validate_contract(contract_path)

    sys.exit(0 if is_valid else 1)


if __name__ == "__main__":
    main()
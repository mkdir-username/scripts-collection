#!/usr/bin/env python3
"""
Jinja Hot Reload Monitor - Daemon Runner
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–ª—É–∂–±—ã
"""

import os
import sys
import time
import signal
import daemon
import lockfile
import argparse
import logging
from pathlib import Path
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
sys.path.insert(0, str(Path(__file__).parent))
from jinja_hot_reload_v2_0_0 import JinjaHotReloadMonitor


class JinjaHotReloadDaemon:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∫ daemon –ø—Ä–æ—Ü–µ—Å—Å–∞"""

    def __init__(self, base_path: str, pid_file: str, log_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è daemon

        Args:
            base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            pid_file: –ü—É—Ç—å –∫ PID —Ñ–∞–π–ª—É
            log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        """
        self.base_path = base_path
        self.pid_file = pid_file
        self.log_file = log_file
        self.monitor = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
        self.setup_logging()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log_dir = Path(self.log_file).parent
        log_dir.mkdir(parents=True, exist_ok=True)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger('JinjaHotReloadDaemon')

    def start(self):
        """–ó–∞–ø—É—Å–∫ daemon –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ daemon
        if Path(self.pid_file).exists():
            self.logger.error(f"PID —Ñ–∞–π–ª {self.pid_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. Daemon –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            sys.exit(1)

        self.logger.info("–ó–∞–ø—É—Å–∫ Jinja Hot Reload Daemon...")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ daemon
        context = daemon.DaemonContext(
            working_directory=str(Path.home()),
            umask=0o002,
            pidfile=lockfile.FileLock(self.pid_file),
            files_preserve=[
                sys.stdout,
                sys.stderr,
            ],
            signal_map={
                signal.SIGTERM: self.shutdown,
                signal.SIGINT: self.shutdown,
            }
        )

        # –ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ daemon
        with context:
            self.run()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã daemon"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID
            with open(self.pid_file, 'w') as f:
                f.write(str(os.getpid()))

            self.logger.info(f"Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: {os.getpid()}")
            self.logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.base_path}")
            self.logger.info(f"–õ–æ–≥–∏ –ø–∏—à—É—Ç—Å—è –≤: {self.log_file}")

            # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
            self.monitor = JinjaHotReloadMonitor(self.base_path)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            self.monitor.start()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ daemon: {e}", exc_info=True)
            self.cleanup()
            sys.exit(1)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if not Path(self.pid_file).exists():
            self.logger.error("PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            return

        # –ß–∏—Ç–∞–µ–º PID
        with open(self.pid_file, 'r') as f:
            pid = int(f.read())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            os.kill(pid, signal.SIGTERM)
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")

            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            for _ in range(10):
                try:
                    os.kill(pid, 0)
                    time.sleep(1)
                except ProcessLookupError:
                    break

            # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            Path(self.pid_file).unlink(missing_ok=True)
            self.logger.info("Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except ProcessLookupError:
            self.logger.warning("–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            Path(self.pid_file).unlink(missing_ok=True)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

    def restart(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ daemon –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ daemon...")
        self.stop()
        time.sleep(2)
        self.start()

    def status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ daemon"""
        if not Path(self.pid_file).exists():
            print("‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        with open(self.pid_file, 'r') as f:
            pid = int(f.read())

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(pid, 0)
            print(f"‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω (PID: {pid})")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ª–æ–≥–∞
            if Path(self.log_file).exists():
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    if lines:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
                        print("\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ:")
                        for line in lines[-5:]:
                            print(f"  {line.strip()}")

            return True

        except ProcessLookupError:
            print("‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            Path(self.pid_file).unlink(missing_ok=True)
            return False

    def shutdown(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.cleanup()
        sys.exit(0)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.monitor:
            self.monitor.stop()

        # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
        Path(self.pid_file).unlink(missing_ok=True)
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='Jinja Hot Reload Monitor - Daemon Runner',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å daemon
  %(prog)s stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon
  %(prog)s restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon
  %(prog)s status   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å daemon
        """
    )

    parser.add_argument(
        'action',
        choices=['start', 'stop', 'restart', 'status'],
        help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--base-path',
        default='/Users/username/Documents/front-middle-schema/.JSON',
        help='–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /Users/username/Documents/front-middle-schema/.JSON)'
    )

    parser.add_argument(
        '--pid-file',
        default='/tmp/jinja_hot_reload.pid',
        help='–ü—É—Ç—å –∫ PID —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /tmp/jinja_hot_reload.pid)'
    )

    parser.add_argument(
        '--log-file',
        default='/tmp/jinja_hot_reload.log',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /tmp/jinja_hot_reload.log)'
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è python-daemon
    try:
        import daemon
        import lockfile
    except ImportError:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å python-daemon")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-daemon")
        sys.exit(1)

    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä daemon
    daemon_runner = JinjaHotReloadDaemon(
        base_path=args.base_path,
        pid_file=args.pid_file,
        log_file=args.log_file
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if args.action == 'start':
        daemon_runner.start()
    elif args.action == 'stop':
        daemon_runner.stop()
    elif args.action == 'restart':
        daemon_runner.restart()
    elif args.action == 'status':
        daemon_runner.status()


if __name__ == '__main__':
    main()
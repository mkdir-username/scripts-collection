#!/usr/bin/env python3
"""
Jinja2 JSON Template Hot Reload Monitor v3.0.0
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ Jinja2 —à–∞–±–ª–æ–Ω–æ–≤ –≤ JSON —Ñ–∞–π–ª–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
"""

import os
import sys
import json
import time
import logging
import traceback
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional, Set, Tuple, List
from collections import defaultdict
from enum import Enum

import jinja2
from jinja2 import Template, Environment, FileSystemLoader, TemplateSyntaxError
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileModifiedEvent, FileCreatedEvent

# –ò–º–ø–æ—Ä—Ç SDUI –º–æ–¥—É–ª–µ–π
from sdui_to_jinja2_transformer import SDUIToJinja2Transformer
from sdui_jinja_extensions import (
    SDUIConditionalExtension,
    SDUILoopExtension,
    create_sdui_filters,
    create_sdui_tests,
    create_sdui_globals
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


class ProcessingMode(Enum):
    """–†–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    JINJA_ONLY = "jinja_only"  # –¢–æ–ª—å–∫–æ Jinja2 –æ–±—Ä–∞–±–æ—Ç–∫–∞
    SDUI_ONLY = "sdui_only"    # –¢–æ–ª—å–∫–æ SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    SDUI_THEN_JINJA = "sdui_then_jinja"  # –°–Ω–∞—á–∞–ª–∞ SDUI, –ø–æ—Ç–æ–º Jinja2
    AUTO_DETECT = "auto_detect"  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ


class SDUIJinjaJsonProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ —Å SDUI –∏ Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏"""

    def __init__(self, base_path: str, sdui_mapping_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

        Args:
            base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            sdui_mapping_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–∞–ø–ø–∏–Ω–≥–∞ SDUI‚ÜíJinja2
        """
        self.base_path = Path(base_path)
        self.processed_files: Set[str] = set()
        self.data_cache: Dict[str, Dict] = {}
        self.last_process_time: Dict[str, float] = {}
        self.processing_stats: Dict[str, Dict] = defaultdict(lambda: {
            'sdui_transformations': 0,
            'jinja_renders': 0,
            'errors': 0,
            'warnings': []
        })

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDUI —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
        self.sdui_transformer = SDUIToJinja2Transformer(sdui_mapping_file)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å SDUI —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
        self.jinja_env = self._setup_jinja_environment()

    def _setup_jinja_environment(self) -> Environment:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å SDUI —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏"""
        env = Environment(
            loader=FileSystemLoader(str(self.base_path)),
            undefined=jinja2.StrictUndefined,
            trim_blocks=True,
            lstrip_blocks=True,
            extensions=[SDUIConditionalExtension, SDUILoopExtension]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º SDUI —Ñ–∏–ª—å—Ç—Ä—ã
        sdui_filters = create_sdui_filters()
        for name, filter_func in sdui_filters.items():
            env.filters[name] = filter_func

        # –î–æ–±–∞–≤–ª—è–µ–º SDUI —Ç–µ—Å—Ç—ã
        sdui_tests = create_sdui_tests()
        for name, test_func in sdui_tests.items():
            env.tests[name] = test_func

        # –î–æ–±–∞–≤–ª—è–µ–º SDUI –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        sdui_globals = create_sdui_globals()
        for name, global_func in sdui_globals.items():
            env.globals[name] = global_func

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._setup_basic_filters(env)

        return env

    def _setup_basic_filters(self, env: Environment):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è Jinja2"""
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –ø–æ–ª—è–º
        def safe_get(obj, key, default=None):
            try:
                return obj.get(key, default) if isinstance(obj, dict) else default
            except:
                return default

        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
        def format_date(value, format='%Y-%m-%d'):
            try:
                if isinstance(value, str):
                    dt = datetime.fromisoformat(value)
                else:
                    dt = value
                return dt.strftime(format)
            except:
                return value

        env.filters['safe_get'] = safe_get
        env.filters['format_date'] = format_date

    def detect_processing_mode(self, content: Any) -> ProcessingMode:
        """
        –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        has_sdui = False
        has_jinja = False

        def check_content(obj):
            nonlocal has_sdui, has_jinja

            if isinstance(obj, str):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SDUI —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                if '${' in obj or (isinstance(obj, str) and obj.startswith('$')):
                    has_sdui = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Jinja2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                if '{{' in obj or '{%' in obj:
                    has_jinja = True

            elif isinstance(obj, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SDUI —Ñ—É–Ω–∫—Ü–∏–∏
                if 'type' in obj and isinstance(obj.get('type'), str):
                    sdui_types = ['if', 'and', 'or', 'not', 'concat', 'uppercase',
                                  'add', 'subtract', 'equals', 'length', 'join']
                    if obj['type'] in sdui_types:
                        has_sdui = True

                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                for value in obj.values():
                    check_content(value)

            elif isinstance(obj, list):
                for item in obj:
                    check_content(item)

        check_content(content)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
        if has_sdui and has_jinja:
            return ProcessingMode.SDUI_THEN_JINJA
        elif has_sdui:
            return ProcessingMode.SDUI_ONLY
        elif has_jinja:
            return ProcessingMode.JINJA_ONLY
        else:
            return ProcessingMode.JINJA_ONLY  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def find_data_file(self, jj_file_path: Path) -> Optional[Path]:
        """
        –ü–æ–∏—Å–∫ [data] —Ñ–∞–π–ª–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö

        Args:
            jj_file_path: –ü—É—Ç—å –∫ [JJ_] —Ñ–∞–π–ª—É

        Returns:
            Path –∫ [data] —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        current_dir = jj_file_path.parent

        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –¥–ª—è –ø–æ–∏—Å–∫–∞ [data] —Ñ–∞–π–ª–∞
        while current_dir >= self.base_path.parent:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.listdir –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
            try:
                files = os.listdir(current_dir)
                data_files = [
                    current_dir / f for f in files
                    if f.startswith('[data]') and f.endswith('.json')
                ]

                if data_files:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π [data] —Ñ–∞–π–ª
                    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω data —Ñ–∞–π–ª: {data_files[0]}")
                    return data_files[0]
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ {current_dir}: {e}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            current_dir = current_dir.parent

        logger.warning(f"‚ö†Ô∏è [data] —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {jj_file_path}")
        return None

    def load_data_file(self, data_file_path: Path) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ [data] —Ñ–∞–π–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Args:
            data_file_path: –ü—É—Ç—å –∫ [data] —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        str_path = str(data_file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if str_path in self.data_cache:
            file_mtime = data_file_path.stat().st_mtime
            if file_mtime <= self.last_process_time.get(str_path, 0):
                logger.debug(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data_file_path.name}")
                return self.data_cache[str_path]

        try:
            with open(data_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.data_cache[str_path] = data
            self.last_process_time[str_path] = time.time()

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑: {data_file_path.name}")
            return data

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {data_file_path}: {e}")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {data_file_path}: {e}")
            return {}

    def process_sdui_transformation(self, content: Any, file_path: Path) -> Tuple[Any, List[str]]:
        """
        –≠—Ç–∞–ø 1: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ SDUI –≤ Jinja2

        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)
        """
        logger.info(f"üîÑ –≠—Ç–∞–ø 1: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ SDUI‚ÜíJinja2 –¥–ª—è {file_path.name}")

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SDUI –≤ Jinja2
            transformed = self.sdui_transformer.transform(content)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            is_valid, warnings = self.sdui_transformer.validate_transformation(content, transformed)

            if warnings:
                for warning in warnings:
                    logger.warning(f"‚ö†Ô∏è {warning}")
                self.processing_stats[str(file_path)]['warnings'].extend(warnings)

            self.processing_stats[str(file_path)]['sdui_transformations'] += 1

            if is_valid:
                logger.info(f"‚úÖ SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

            return transformed, warnings

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
            self.processing_stats[str(file_path)]['errors'] += 1
            return content, [f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}"]

    def process_jinja_template(self, template_str: str, context: Dict[str, Any]) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ Jinja2 —à–∞–±–ª–æ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ

        Args:
            template_str: –°—Ç—Ä–æ–∫–∞ —Å Jinja2 —à–∞–±–ª–æ–Ω–æ–º
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏

        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        try:
            template = Template(template_str)
            return template.render(**context)
        except TemplateSyntaxError as e:
            logger.error(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ: {e}")
            return template_str
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            return template_str

    def process_json_with_jinja(self, json_obj: Any, context: Dict[str, Any]) -> Any:
        """
        –≠—Ç–∞–ø 2: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –æ–±—ä–µ–∫—Ç–∞ —Å Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏

        Args:
            json_obj: JSON –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏

        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç
        """
        if isinstance(json_obj, dict):
            result = {}
            for key, value in json_obj.items():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á
                processed_key = self.process_jinja_template(key, context) if isinstance(key, str) else key
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                result[processed_key] = self.process_json_with_jinja(value, context)
            return result

        elif isinstance(json_obj, list):
            return [self.process_json_with_jinja(item, context) for item in json_obj]

        elif isinstance(json_obj, str):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            if '{{' in json_obj or '{%' in json_obj:
                processed = self.process_jinja_template(json_obj, context)

                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
                if processed.lower() in ('true', 'false'):
                    return processed.lower() == 'true'
                elif processed.replace('.', '', 1).replace('-', '', 1).isdigit():
                    try:
                        return int(processed) if '.' not in processed else float(processed)
                    except:
                        return processed
                else:
                    return processed
            return json_obj

        else:
            return json_obj

    def generate_output_filename(self, jj_file_path: Path, suffix: str = '') -> Path:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

        Args:
            jj_file_path: –ü—É—Ç—å –∫ [JJ_] —Ñ–∞–π–ª—É
            suffix: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏

        Returns:
            Path –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        filename = jj_file_path.name

        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å [JJ_*] –Ω–∞ [FULL_*]
        if filename.startswith('[JJ_'):
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            close_bracket = filename.find(']')
            if close_bracket != -1:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ JJ_
                prefix_content = filename[4:close_bracket]
                rest_of_name = filename[close_bracket + 1:]

                if suffix:
                    new_filename = f'[FULL_{prefix_content}_{suffix}]{rest_of_name}'
                else:
                    new_filename = f'[FULL_{prefix_content}]{rest_of_name}'
            else:
                new_filename = filename.replace('[JJ_', '[FULL_')
        else:
            prefix = f'[FULL_{suffix}]' if suffix else '[FULL]'
            new_filename = f'{prefix}{filename}'

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        return jj_file_path.parent / new_filename

    def process_jj_file(self, jj_file_path: Path, mode: ProcessingMode = ProcessingMode.AUTO_DETECT) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ [JJ_] —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SDUI

        Args:
            jj_file_path: –ü—É—Ç—å –∫ [JJ_] —Ñ–∞–π–ª—É
            mode: –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {jj_file_path.name}")

        # –ù–∞—Ö–æ–¥–∏–º [data] —Ñ–∞–π–ª
        data_file_path = self.find_data_file(jj_file_path)
        if not data_file_path:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω [data] —Ñ–∞–π–ª –¥–ª—è: {jj_file_path}")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context = self.load_data_file(data_file_path)
        if not context:
            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {jj_file_path}")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω JSON
            with open(jj_file_path, 'r', encoding='utf-8') as f:
                template_json = json.load(f)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if mode == ProcessingMode.AUTO_DETECT:
                mode = self.detect_processing_mode(template_json)
                logger.info(f"üéØ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: {mode.value}")

            processed_json = template_json
            warnings = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if mode == ProcessingMode.SDUI_THEN_JINJA:
                # –≠—Ç–∞–ø 1: SDUI ‚Üí Jinja2
                processed_json, warnings = self.process_sdui_transformation(processed_json, jj_file_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                if logger.level <= logging.DEBUG:
                    debug_path = self.generate_output_filename(jj_file_path, 'SDUI')
                    with open(debug_path, 'w', encoding='utf-8') as f:
                        json.dump(processed_json, f, ensure_ascii=False, indent=2)
                    logger.debug(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π SDUI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {debug_path.name}")

                # –≠—Ç–∞–ø 2: Jinja2 –æ–±—Ä–∞–±–æ—Ç–∫–∞
                logger.info(f"üîÑ –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ Jinja2 —à–∞–±–ª–æ–Ω–æ–≤")
                processed_json = self.process_json_with_jinja(processed_json, context)
                self.processing_stats[str(jj_file_path)]['jinja_renders'] += 1

            elif mode == ProcessingMode.SDUI_ONLY:
                # –¢–æ–ª—å–∫–æ SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                processed_json, warnings = self.process_sdui_transformation(processed_json, jj_file_path)

            elif mode == ProcessingMode.JINJA_ONLY:
                # –¢–æ–ª—å–∫–æ Jinja2 –æ–±—Ä–∞–±–æ—Ç–∫–∞
                processed_json = self.process_json_with_jinja(processed_json, context)
                self.processing_stats[str(jj_file_path)]['jinja_renders'] += 1

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_path = self.generate_output_filename(jj_file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(processed_json, f, ensure_ascii=False, indent=2)

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_path.name}")

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if warnings:
                logger.info(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            self.processed_files.add(str(jj_file_path))

            return True

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {jj_file_path}: {e}")
            self.processing_stats[str(jj_file_path)]['errors'] += 1
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {jj_file_path}: {e}")
            logger.debug(traceback.format_exc())
            self.processing_stats[str(jj_file_path)]['errors'] += 1
            return False

    def process_all_jj_files(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö [JJ_] —Ñ–∞–π–ª–æ–≤"""
        logger.info("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö [JJ_] —Ñ–∞–π–ª–æ–≤...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.walk –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
        jj_files = []
        for root, dirs, files in os.walk(self.base_path):
            for file in files:
                if file.startswith('[JJ_') and file.endswith('.json'):
                    jj_files.append(Path(root) / file)

        if not jj_files:
            logger.warning("‚ö†Ô∏è [JJ_] —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(jj_files)} [JJ_] —Ñ–∞–π–ª–æ–≤")

        success_count = 0
        for jj_file in jj_files:
            if self.process_jj_file(jj_file):
                success_count += 1

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(jj_files)} —Ñ–∞–π–ª–æ–≤")
        self.print_processing_statistics()

    def print_processing_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("=" * 60)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
        logger.info("-" * 60)

        total_sdui = 0
        total_jinja = 0
        total_errors = 0
        total_warnings = 0

        for file_path, stats in self.processing_stats.items():
            if stats['sdui_transformations'] > 0 or stats['jinja_renders'] > 0 or stats['errors'] > 0:
                file_name = Path(file_path).name
                logger.info(f"üìÑ {file_name}:")
                logger.info(f"   SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: {stats['sdui_transformations']}")
                logger.info(f"   Jinja2 —Ä–µ–Ω–¥–µ—Ä–æ–≤: {stats['jinja_renders']}")
                logger.info(f"   –û—à–∏–±–æ–∫: {stats['errors']}")
                logger.info(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(stats['warnings'])}")

                total_sdui += stats['sdui_transformations']
                total_jinja += stats['jinja_renders']
                total_errors += stats['errors']
                total_warnings += len(stats['warnings'])

        logger.info("-" * 60)
        logger.info(f"–ò–¢–û–ì–û:")
        logger.info(f"   SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: {total_sdui}")
        logger.info(f"   Jinja2 —Ä–µ–Ω–¥–µ—Ä–æ–≤: {total_jinja}")
        logger.info(f"   –û—à–∏–±–æ–∫: {total_errors}")
        logger.info(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
        transformer_stats = self.sdui_transformer.get_statistics()
        logger.info(f"   –ö—ç—à —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞: {transformer_stats['cache_size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        logger.info(f"   –í–µ—Ä—Å–∏—è –º–∞–ø–ø–∏–Ω–≥–∞: {transformer_stats['mapping_version']}")
        logger.info("=" * 60)


class SDUIJinjaJsonWatcher(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ [JJ_] —Ñ–∞–π–ª–æ–≤"""

    def __init__(self, processor: SDUIJinjaJsonProcessor):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

        Args:
            processor: –≠–∫–∑–µ–º–ø–ª—è—Ä SDUIJinjaJsonProcessor
        """
        self.processor = processor
        self.last_event_time: Dict[str, float] = {}
        self.debounce_delay = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

    def _should_process(self, file_path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Ñ–∞–π–ª —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [JJ_
        if not file_path.name.endswith('.json'):
            return False

        if not file_path.name.startswith('[JJ_'):
            return False

        # Debounce –ø—Ä–æ–≤–µ—Ä–∫–∞
        str_path = str(file_path)
        current_time = time.time()

        if str_path in self.last_event_time:
            if current_time - self.last_event_time[str_path] < self.debounce_delay:
                return False

        self.last_event_time[str_path] = current_time
        return True

    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return

        file_path = Path(event.src_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º [JJ_] —Ñ–∞–π–ª—ã
        if self._should_process(file_path):
            logger.info(f"üìù –ò–∑–º–µ–Ω—ë–Ω —Ñ–∞–π–ª: {file_path.name}")
            self.processor.process_jj_file(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è [data] —Ñ–∞–π–ª–æ–≤
        elif file_path.name.startswith('[data]') and file_path.name.endswith('.json'):
            logger.info(f"üìù –ò–∑–º–µ–Ω—ë–Ω data —Ñ–∞–π–ª: {file_path.name}")
            self._reprocess_dependent_files(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ SDUI
        elif file_path.name == 'sdui_mapping.json':
            logger.info(f"üîÑ –ò–∑–º–µ–Ω—ë–Ω –º–∞–ø–ø–∏–Ω–≥ SDUI: {file_path.name}")
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
            self.processor.sdui_transformer = SDUIToJinja2Transformer(str(file_path))
            logger.info(f"‚úÖ –ú–∞–ø–ø–∏–Ω–≥ SDUI –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")

    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return

        file_path = Path(event.src_path)

        if self._should_process(file_path):
            logger.info(f"‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_path.name}")
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            time.sleep(0.2)
            self.processor.process_jj_file(file_path)

    def _reprocess_dependent_files(self, data_file_path: Path):
        """
        –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö [JJ_] —Ñ–∞–π–ª–æ–≤, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ [data] —Ñ–∞–π–ª–∞

        Args:
            data_file_path: –ü—É—Ç—å –∫ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–º—É [data] —Ñ–∞–π–ª—É
        """
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ data —Ñ–∞–π–ª–∞
        str_path = str(data_file_path)
        if str_path in self.processor.data_cache:
            del self.processor.data_cache[str_path]

        # –û—á–∏—â–∞–µ–º –∫—ç—à —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        self.processor.sdui_transformer.clear_cache()

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ [JJ_] —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        search_dir = data_file_path.parent
        jj_files = list(search_dir.rglob('[JJ_*.json'))

        if jj_files:
            logger.info(f"‚ôªÔ∏è –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(jj_files)} –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            for jj_file in jj_files:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç JJ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ—Ç data —Ñ–∞–π–ª
                if self.processor.find_data_file(jj_file) == data_file_path:
                    self.processor.process_jj_file(jj_file)


class SDUIJinjaHotReloadMonitor:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SDUI"""

    def __init__(self, base_path: str, sdui_mapping_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞

        Args:
            base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            sdui_mapping_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–∞–ø–ø–∏–Ω–≥–∞ SDUI‚ÜíJinja2
        """
        self.base_path = Path(base_path)

        if not self.base_path.exists():
            raise ValueError(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {base_path}")

        self.processor = SDUIJinjaJsonProcessor(base_path, sdui_mapping_file)
        self.watcher = SDUIJinjaJsonWatcher(self.processor)
        self.observer = Observer()

    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ SDUI+Jinja JSON Hot Reload Monitor v3.0.0")
        logger.info(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.base_path}")
        logger.info("üéØ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: SDUI –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è + Jinja2 —à–∞–±–ª–æ–Ω—ã")
        logger.info("=" * 60)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        self.processor.process_all_jj_files()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º observer
        self.observer.schedule(self.watcher, str(self.base_path), recursive=True)
        self.observer.start()

        logger.info("üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        logger.info("-" * 60)

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("\n" + "=" * 60)
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        self.observer.stop()
        self.observer.join()

        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {len(self.processor.processed_files)}")
        logger.info(f"üíæ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ –¥–∞–Ω–Ω—ã—Ö: {len(self.processor.data_cache)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
        transformer_stats = self.processor.sdui_transformer.get_statistics()
        logger.info(f"üîÑ SDUI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   –ö—ç—à –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: {transformer_stats['cache_size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–∑–ª–æ–≤: {transformer_stats['processed_nodes']}")
        logger.info(f"   –í–µ—Ä—Å–∏—è –º–∞–ø–ø–∏–Ω–≥–∞: {transformer_stats['mapping_version']}")

        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("=" * 60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description='SDUI+Jinja2 JSON Template Hot Reload Monitor v3.0.0',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                                     # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  %(prog)s --path /path/to/json               # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  %(prog)s --mapping /path/to/mapping.json    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ SDUI
  %(prog)s --debug                            # –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
  %(prog)s --test                             # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
    )

    parser.add_argument(
        '--path', '-p',
        default="/Users/username/Documents/front-middle-schema/.JSON",
        help='–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /Users/username/Documents/front-middle-schema/.JSON)'
    )

    parser.add_argument(
        '--mapping', '-m',
        default=None,
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–∞–ø–ø–∏–Ω–≥–∞ SDUI‚ÜíJinja2 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: sdui_mapping.json –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞)'
    )

    parser.add_argument(
        '--debug', '-d',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    parser.add_argument(
        '--test', '-t',
        action='store_true',
        help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("üêõ –í–∫–ª—é—á—ë–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import jinja2
        from watchdog.observers import Observer
    except ImportError as e:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e}")
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install jinja2 watchdog")
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –º–∞–ø–ø–∏–Ω–≥—É
    if args.mapping:
        mapping_file = Path(args.mapping)
        if not mapping_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.mapping}")
            sys.exit(1)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        script_dir = Path(__file__).parent
        mapping_file = script_dir / 'sdui_mapping.json'

    try:
        # –°–æ–∑–¥–∞—ë–º –º–æ–Ω–∏—Ç–æ—Ä
        monitor = SDUIJinjaHotReloadMonitor(args.path, str(mapping_file))

        if args.test:
            # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
            monitor.processor.process_all_jj_files()
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            monitor.start()

    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)


if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–§–∏–∫—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Jinja2 –±–ª–æ–∫–∏ –≤ –≤–∞–ª–∏–¥–Ω—ã–µ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import json
import re
import sys
from pathlib import Path
from typing import Dict, Any, Tuple

def fix_mixed_syntax(content: str) -> Tuple[str, Dict[str, str]]:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å

    Returns:
        Tuple[str, Dict]: (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω)
    """
    replacements = {}
    counter = 0

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ Jinja2 –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    patterns = [
        # {% if ... %} ... {% endif %}
        (r'\{%\s*if\s+.*?%\}.*?\{%\s*endif\s*%\}', 'JINJA_IF_BLOCK'),
        # {% for ... %} ... {% endfor %}
        (r'\{%\s*for\s+.*?%\}.*?\{%\s*endfor\s*%\}', 'JINJA_FOR_BLOCK'),
        # –û–¥–∏–Ω–æ—á–Ω—ã–µ {% ... %}
        (r'\{%[^}]*%\}', 'JINJA_TAG'),
    ]

    fixed = content

    # –ó–∞–º–µ–Ω—è–µ–º Jinja2 –±–ª–æ–∫–∏ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    for pattern, block_type in patterns:
        matches = re.finditer(pattern, fixed, re.DOTALL)
        for match in reversed(list(matches)):
            counter += 1
            placeholder = f'"__JINJA_PLACEHOLDER_{block_type}_{counter}__"'
            replacements[placeholder.strip('"')] = match.group()
            fixed = fixed[:match.start()] + placeholder + fixed[match.end():]

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—è—Ç—ã–º–∏
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤–∞—Ö
    fixed = re.sub(r'\}\s*\n\s*\{', '},\n{', fixed)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
    fixed = re.sub(r',\s*([}\]])', r'\1', fixed)

    return fixed, replacements

def restore_jinja_blocks(content: str, replacements: Dict[str, str]) -> str:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Jinja2 –±–ª–æ–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    result = content
    for placeholder, original in replacements.items():
        result = result.replace(f'"{placeholder}"', original)
    return result

def process_file(file_path: Path) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    print(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")

    try:
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = file_path.with_suffix('.json.backup')
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"  üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path.name}")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        fixed_content, replacements = fix_mixed_syntax(content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
        try:
            json_obj = json.loads(fixed_content)
            print(f"  ‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        except json.JSONDecodeError as e:
            print(f"  ‚ùå JSON –≤—Å–µ –µ—â–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            debug_path = file_path.with_name(f"{file_path.stem}_debug.json")
            with open(debug_path, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
            print(f"  üìù –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {debug_path.name}")
            return False

        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏)
        processing_path = file_path.with_name(f"{file_path.stem}_processing.json")
        with open(processing_path, 'w', encoding='utf-8') as f:
            json.dump(json_obj, f, indent=2, ensure_ascii=False)
        print(f"  üìÑ –í–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_path.name}")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é (—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ Jinja –±–ª–æ–∫–∞–º–∏)
        final_json_str = json.dumps(json_obj, indent=2, ensure_ascii=False)
        final_content = restore_jinja_blocks(final_json_str, replacements)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        fixed_path = file_path.with_name(f"{file_path.stem}_fixed.json")
        with open(fixed_path, 'w', encoding='utf-8') as f:
            f.write(final_content)
        print(f"  ‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {fixed_path.name}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –∑–∞–º–µ–Ω
        map_path = file_path.with_name(f"{file_path.stem}_replacements.json")
        with open(map_path, 'w', encoding='utf-8') as f:
            json.dump(replacements, f, indent=2, ensure_ascii=False)
        print(f"  üó∫Ô∏è  –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω: {map_path.name}")

        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python fix_mixed_jinja_json.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
        print("–ü—Ä–∏–º–µ—Ä: python fix_mixed_jinja_json.py [JJ_NN]_main-screen_v1.json")
        sys.exit(1)

    file_path = Path(sys.argv[1])

    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        sys.exit(1)

    if not file_path.suffix == '.json':
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .json")

    print(f"\nüéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
    print(f"üìÅ –§–∞–π–ª: {file_path}")
    print("-" * 50)

    success = process_file(file_path)

    print("-" * 50)
    if success:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {file_path.stem}_processing.json –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ JSON")
        print(f"2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {file_path.stem}_fixed.json –¥–ª—è Jinja2 –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print(f"3. –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path.stem}_replacements.json")
    else:
        print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ _debug.json —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        print("2. –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")

    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
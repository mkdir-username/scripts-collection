#!/usr/bin/env python3
"""
Jinja Hot Reload v3.2.3 - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞

–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ v3.2.3:
1. üåê –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
2. ‚ö° –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
3. üéØ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ (v3.2.2):
1. üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ file:///path/to/file
2. üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
3. üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ JSON
4. üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ (v3.2.1):
1. üìä –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
2. üé® –ß—ë—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏

–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ (v3.2.0):
1. üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
2. üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è undefined –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

–ó–∞–ø—É—Å–∫:
  python3 jinja_hot_reload_v3.2.3.py --smart          # Smart —Ä–µ–∂–∏–º
  python3 jinja_hot_reload_v3.2.3.py --smart --debug  # Smart + Debug
"""

import os
import sys
import json
import time
import re
import argparse
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple, Set
from collections import defaultdict
from urllib.parse import unquote, urlparse
import logging

# –ò–º–ø–æ—Ä—Ç Jinja2 –∏ watchdog
try:
    from jinja2 import Environment, Template, TemplateSyntaxError, UndefinedError
    from jinja2.exceptions import TemplateError
    from jinja2 import StrictUndefined, DebugUndefined
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler, FileModifiedEvent
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install jinja2 watchdog")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π SDUI
sys.path.append(str(Path(__file__).parent))
try:
    from sdui_to_jinja2_transformer import SDUIToJinja2Transformer
    from sdui_jinja_extensions import SDUIJinja2Extensions
except ImportError:
    print("‚ö†Ô∏è SDUI –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞ –±–µ–∑ SDUI –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    SDUIToJinja2Transformer = None
    SDUIJinja2Extensions = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


class SmartJSONFixer:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""

    def __init__(self, debug: bool = False):
        self.debug = debug
        self.fixes_applied = []

    def fix_json(self, content: str) -> Tuple[str, List[str]]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ JSON
        Returns: (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON, —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–∫—Å–æ–≤)
        """
        self.fixes_applied = []
        fixed = content

        # 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ trailing commas
        fixed = self._fix_trailing_commas(fixed)

        # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ missing commas
        fixed = self._fix_missing_commas(fixed)

        # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        fixed = self._fix_empty_values(fixed)

        # 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
        fixed = self._fix_unescaped_quotes(fixed)

        # 5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–ª—é—á–µ–π
        fixed = self._fix_duplicate_keys(fixed)

        # 6. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
        fixed = self._normalize_whitespace(fixed)

        return fixed, self.fixes_applied

    def _fix_trailing_commas(self, content: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç trailing –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ ] –∏ }"""
        # –ó–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ }
        pattern1 = r',(\s*)\}'
        if re.search(pattern1, content):
            content = re.sub(pattern1, r'\1}', content)
            self.fixes_applied.append("–£–¥–∞–ª–µ–Ω—ã trailing –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ }")

        # –ó–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ ]
        pattern2 = r',(\s*)\]'
        if re.search(pattern2, content):
            content = re.sub(pattern2, r'\1]', content)
            self.fixes_applied.append("–£–¥–∞–ª–µ–Ω—ã trailing –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ ]")

        return content

    def _fix_missing_commas(self, content: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        # –ú–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ: } {
        pattern1 = r'\}(\s*)\{'
        matches = re.findall(pattern1, content)
        if matches:
            content = re.sub(pattern1, r'},\1{', content)
            self.fixes_applied.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã {len(matches)} –∑–∞–ø—è—Ç—ã—Ö –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏")

        # –ú–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –æ–±—ä–µ–∫—Ç–µ: "value" "key"
        pattern2 = r'"(\s+)"(\w+)"\s*:'
        matches = re.findall(pattern2, content)
        if matches:
            content = re.sub(pattern2, r'",\1"\2":', content)
            self.fixes_applied.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã {len(matches)} –∑–∞–ø—è—Ç—ã—Ö –º–µ–∂–¥—É —Å–≤–æ–π—Å—Ç–≤–∞–º–∏")

        return content

    def _fix_empty_values(self, content: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ null"""
        # : , –∏–ª–∏ : }
        patterns = [
            (r':\s*,', ': null,', '–ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—è—Ç–æ–π'),
            (r':\s*\}', ': null}', '–ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–µ—Ä–µ–¥ }'),
            (r':\s*\]', ': null]', '–ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–µ—Ä–µ–¥ ]'),
        ]

        for pattern, replacement, desc in patterns:
            matches = re.findall(pattern, content)
            if matches:
                content = re.sub(pattern, replacement, content)
                self.fixes_applied.append(f"–ó–∞–º–µ–Ω–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ null ({desc})")

        return content

    def _fix_unescaped_quotes(self, content: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫"""
        # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return content

    def _fix_duplicate_keys(self, content: str) -> str:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª—é—á–∏"""
        # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
        return content

    def _normalize_whitespace(self, content: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã (—É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ)"""
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
        content = re.sub(r'\s{2,}', ' ', content)
        return content


class SmartJinja2ContextBuilder:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è Jinja2"""

    def __init__(self, debug: bool = False):
        self.debug = debug
        self.auto_vars = {}

    def extract_undefined_vars(self, template_str: str, context: Dict[str, Any]) -> Set[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ undefined –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        patterns = [
            r'\{\{\s*([a-zA-Z_][a-zA-Z0-9_\.]*)\s*\}\}',  # {{ var }}
            r'\{%\s*if\s+([a-zA-Z_][a-zA-Z0-9_\.]*)',     # {% if var %}
            r'\{%\s*for\s+\w+\s+in\s+([a-zA-Z_][a-zA-Z0-9_\.]*)',  # {% for x in var %}
        ]

        all_vars = set()
        for pattern in patterns:
            matches = re.findall(pattern, template_str)
            for match in matches:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–¥–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏)
                root_var = match.split('.')[0].split('[')[0]
                if root_var not in context:
                    all_vars.add(root_var)

        return all_vars

    def build_smart_context(self, template_str: str, base_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°—Ç—Ä–æ–∏—Ç —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –¥–ª—è undefined –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        """
        undefined_vars = self.extract_undefined_vars(template_str, base_context)

        smart_context = base_context.copy()

        for var in undefined_vars:
            # –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            stub = self._create_smart_stub(var, template_str)
            smart_context[var] = stub
            self.auto_vars[var] = stub

            if self.debug:
                logger.debug(f"üîß –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: {var} = {stub}")

        return smart_context

    def _create_smart_stub(self, var_name: str, template_str: str) -> Any:
        """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        # –ï—Å–ª–∏ –≤ —Ü–∏–∫–ª–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        pattern_for = r'\{%\s*for\s+\w+\s+in\s+' + re.escape(var_name)
        if re.search(pattern_for, template_str):
            return []

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ if - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
        pattern_if = r'\{%\s*if\s+' + re.escape(var_name)
        if re.search(pattern_if, template_str):
            return False

        # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏
        pattern_attr = re.escape(var_name) + r'\.\w+'
        if re.search(pattern_attr, template_str):
            return defaultdict(lambda: None)

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        return ""

    def get_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∑–∞–≥–ª—É—à–∫–∞–º"""
        if not self.auto_vars:
            return "–ó–∞–≥–ª—É—à–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å"

        summary = f"–°–æ–∑–¥–∞–Ω–æ {len(self.auto_vars)} –∑–∞–≥–ª—É—à–µ–∫:\n"
        for var, value in self.auto_vars.items():
            value_repr = f"list[{len(value)}]" if isinstance(value, list) else repr(value)
            summary += f"  ‚Ä¢ {var} = {value_repr}\n"

        return summary


class JSONCommentImportProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON"""

    def __init__(self, debug: bool = False):
        self.debug = debug
        self.processed_files = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

    def process_imports(self, content: str, base_path: Path) -> Tuple[str, int]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

        –§–æ—Ä–º–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∏–º–ø–æ—Ä—Ç–æ–º:
        // [–û–ø–∏—Å–∞–Ω–∏–µ](file:///absolute/path/to/file.json)

        Returns: (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–æ–≤)
        """
        import_count = 0
        self.processed_files.clear()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        processed = self._process_imports_recursive(content, base_path, import_count)
        content_with_imports, import_count = processed

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
        # –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ // (–Ω–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫)
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–æ–≤
        cleaned = re.sub(r'(?:^|\s)//[^\n]*', '', content_with_imports, flags=re.MULTILINE)

        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ /* */
        cleaned = re.sub(r'/\*.*?\*/', '', cleaned, flags=re.DOTALL)

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        cleaned = re.sub(r'\n\s*\n\s*\n', '\n\n', cleaned)

        return cleaned, import_count

    def _process_imports_recursive(self, content: str, base_path: Path, count: int) -> Tuple[str, int]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
        # –§–æ—Ä–º–∞—Ç: // [–ª—é–±–æ–π —Ç–µ–∫—Å—Ç](file:///path/to/file)
        import_pattern = r'//[^\n]*?\(file:///(.*?)\)[^\n]*'

        matches = list(re.finditer(import_pattern, content))

        if not matches:
            return content, count

        result = content

        for match in reversed(matches):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã
            file_url = match.group(1)

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, %5B -> [)
            decoded_path = unquote(file_url)

            # –£–±–∏—Ä–∞–µ–º —è–∫–æ—Ä—å (#65) –µ—Å–ª–∏ –µ—Å—Ç—å
            if '#' in decoded_path:
                decoded_path = decoded_path.split('#')[0]

            import_file = Path('/' + decoded_path)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
            if import_file in self.processed_files:
                if self.debug:
                    logger.warning(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç: {import_file.name}")
                continue

            if not import_file.exists():
                logger.warning(f"   ‚ö†Ô∏è –§–∞–π–ª –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {import_file}")
                continue

            try:
                # –ß–∏—Ç–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª
                with open(import_file, 'r', encoding='utf-8') as f:
                    imported_content = f.read()

                self.processed_files.add(import_file)
                count += 1

                if self.debug:
                    logger.debug(f"   üì• –ò–º–ø–æ—Ä—Ç: {import_file.name}")

                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
                imported_content, count = self._process_imports_recursive(
                    imported_content,
                    import_file.parent,
                    count
                )

                # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                before_text = result[:match.start()].rstrip()
                after_text = result[match.end():].lstrip()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–ø—è—Ç–∞—è
                needs_comma_before = before_text and before_text[-1] not in '[{,'
                needs_comma_after = after_text and after_text[0] not in ']},'

                replacement = ''
                if needs_comma_before:
                    replacement = ','
                replacement += '\n' + imported_content.strip()
                if needs_comma_after:
                    replacement += ','

                result = result[:match.start()] + replacement + result[match.end():]

            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {import_file.name}: {e}")
                continue

        return result, count


class EnhancedJinjaJsonPreprocessor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""

    def __init__(self, smart_mode: bool = False, debug: bool = False):
        self.smart_mode = smart_mode
        self.debug = debug
        self.json_fixer = SmartJSONFixer(debug) if smart_mode else None
        self.import_processor = JSONCommentImportProcessor(debug)

    def clean_mixed_syntax(self, content: str, source_file: Path = None) -> Tuple[str, Dict[str, str]]:
        """
        –û—á–∏—â–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å —É–º–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        Returns: (–æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω)
        """
        replacements = {}
        counter = 0

        # 1. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ —É–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if source_file:
            content, import_count = self.import_processor.process_imports(content, source_file.parent)
            if import_count > 0:
                logger.info(f"   üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {import_count}")
        else:
            # –ï—Å–ª–∏ source_file –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            content = re.sub(r'(?:^|\s)//[^\n]*', '', content, flags=re.MULTILINE)
            content = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã Jinja2 (–æ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∫ –ø—Ä–æ—Å—Ç—ã–º)
        patterns = [
            (r'\{%\s*if\s+[^%]+%\}.*?\{%\s*endif\s*%\}', 'JINJA_IF'),
            (r'\{%\s*for\s+[^%]+%\}.*?\{%\s*endfor\s*%\}', 'JINJA_FOR'),
            (r'\{%\s*set\s+[^%]+%\}', 'JINJA_SET'),
            (r'\{%[^}]+%\}', 'JINJA_TAG'),
            (r'\{\{[^}]+\}\}', 'JINJA_VAR'),
        ]

        cleaned = content

        # –£–¥–∞–ª—è–µ–º Jinja2 –±–ª–æ–∫–∏
        for pattern, block_type in patterns:
            matches = list(re.finditer(pattern, cleaned, re.DOTALL | re.MULTILINE))
            for match in reversed(matches):
                counter += 1
                key = f"__{block_type}_{counter}__"
                replacements[key] = match.group()
                cleaned = cleaned[:match.start()] + cleaned[match.end():]

        # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        while ',,' in cleaned:
            cleaned = cleaned.replace(',,', ',')

        cleaned = re.sub(r',\s*\]', ']', cleaned)
        cleaned = re.sub(r',\s*\}', '}', cleaned)
        cleaned = re.sub(r'\[\s*,', '[', cleaned)
        cleaned = re.sub(r'\{\s*,', '{', cleaned)
        cleaned = re.sub(r',\s*:', ':', cleaned)
        cleaned = re.sub(r':\s*,', ': null,', cleaned)
        cleaned = re.sub(r':\s*\}', ': null}', cleaned)
        cleaned = re.sub(r':\s*\]', ': null]', cleaned)

        # Smart —Ä–µ–∂–∏–º - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if self.smart_mode and self.json_fixer:
            cleaned, fixes = self.json_fixer.fix_json(cleaned)
            if fixes and self.debug:
                logger.info(f"üß† Smart –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(fixes)}")

        return cleaned, replacements


class JinjaHotReloaderV32(FileSystemEventHandler):
    """Hot Reload v3.2.3 —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –±—Ä–∞—É–∑–µ—Ä–∞"""

    SUPPORTED_EXTENSIONS = {'.json', '.jinja', '.j2', '.json.jinja', '.json.j2'}

    def __init__(self, watch_dir: str = None, debug: bool = False,
                 browser_reload: bool = True, smart_mode: bool = False):
        self.watch_dir = Path(watch_dir) if watch_dir else Path('/Users/username/Documents/front-middle-schema/.JSON')
        self.debug = debug
        self.browser_reload = browser_reload
        self.smart_mode = smart_mode
        self.data_cache = {}
        self.processing_files = set()
        self.last_process_time = {}

        # Smart –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.preprocessor = EnhancedJinjaJsonPreprocessor(smart_mode, debug)
        self.context_builder = SmartJinja2ContextBuilder(debug) if smart_mode else None

        # SDUI —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
        self.sdui_transformer = SDUIToJinja2Transformer() if SDUIToJinja2Transformer else None

        # Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if smart_mode:
            # –í smart —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º DebugUndefined –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
            self.jinja_env = Environment(undefined=DebugUndefined)
        else:
            self.jinja_env = Environment()

        if SDUIJinja2Extensions:
            SDUIJinja2Extensions.register_all(self.jinja_env)

        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—É—Ç—å
        self.validator_path = Path('/Users/username/Documents/front-middle-schema/sdui_web_validator_v3.0.0.py')

        logger.info("‚îÅ" * 80)
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {self.watch_dir}")
        logger.info(f"üîç SDUI –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if self.sdui_transformer else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logger.info(f"üåê –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞ (Vivaldi:9090)' if self.browser_reload else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logger.info(f"üß† Smart —Ä–µ–∂–∏–º: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.smart_mode else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {', '.join(self.SUPPORTED_EXTENSIONS)}")
        logger.info("‚îÅ" * 80)

    def is_jj_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª JJ_ —Ñ–∞–π–ª–æ–º"""
        if not file_path.name.startswith('[JJ_'):
            return False

        if file_path.suffix in self.SUPPORTED_EXTENSIONS:
            return True

        name_parts = file_path.name.split('.')
        if len(name_parts) >= 3:
            compound_ext = '.' + '.'.join(name_parts[-2:])
            if compound_ext in self.SUPPORTED_EXTENSIONS:
                return True

        return False

    def find_data_file(self, jj_file: Path) -> Optional[Path]:
        """–ò—â–µ—Ç [data] —Ñ–∞–π–ª"""
        current_dir = jj_file.parent

        while current_dir != current_dir.parent:
            for file in current_dir.iterdir():
                if file.is_file() and file.name.startswith('[data'):
                    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω data —Ñ–∞–π–ª: {file.name}")
                    return file
            current_dir = current_dir.parent

        return None

    def process_jj_file(self, file_path: Path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç [JJ_] —Ñ–∞–π–ª —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
        if file_path in self.processing_files:
            return

        current_time = time.time()
        if file_path in self.last_process_time:
            if current_time - self.last_process_time[file_path] < 1:
                return

        self.last_process_time[file_path] = current_time
        self.processing_files.add(file_path)

        try:
            logger.info("")
            logger.info("‚îÄ" * 80)
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")
            logger.info("‚îÄ" * 80)

            # 1. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # 2. –û—á–∏—â–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (—Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ smart —Ñ–∏–∫—Å–∞–º–∏)
            cleaned_content, jinja_blocks = self.preprocessor.clean_mixed_syntax(content, file_path)

            # 3. –ü–∞—Ä—Å–∏–º JSON
            try:
                json_obj = json.loads(cleaned_content)
            except json.JSONDecodeError as e:
                logger.error("")
                logger.error("‚îÑ" * 80)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}: {e.msg}")
                logger.error(f"   üìÑ –§–∞–π–ª: {file_path.name}")
                logger.error("‚îÑ" * 80)

                if self.debug:
                    debug_path = file_path.with_name(f"{file_path.stem}_debug_cleaned.json")
                    with open(debug_path, 'w', encoding='utf-8') as f:
                        f.write(cleaned_content)
                    logger.info(f"   üìù Debug —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {debug_path.name}")

                    lines = cleaned_content.split('\n')
                    if e.lineno <= len(lines):
                        start = max(0, e.lineno - 3)
                        end = min(len(lines), e.lineno + 2)
                        logger.info(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (—Å—Ç—Ä–æ–∫–∏ {start+1}-{end}):")
                        for i in range(start, end):
                            marker = " >>> " if i == e.lineno - 1 else "     "
                            logger.info(f"{marker}{i+1:4d} | {lines[i][:100]}")
                return

            # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è WEB
            if 'ANDROID' in str(file_path):
                logger.info("   üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Android ‚Üí WEB")
                json_obj = self._convert_to_web(json_obj)

            # 5. SDUI —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
            if self.sdui_transformer:
                json_str = json.dumps(json_obj, ensure_ascii=False)
                if '${' in json_str or '"type": "if"' in json_str:
                    logger.info("   üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ SDUI ‚Üí Jinja2")
                    json_str = self.sdui_transformer.transform(json_str)
                    json_obj = json.loads(json_str)

            # 6. –ó–∞–≥—Ä—É–∂–∞–µ–º data —Ñ–∞–π–ª
            data_file = self.find_data_file(file_path)
            context = {}

            if data_file:
                try:
                    with open(data_file, 'r', encoding='utf-8') as f:
                        context = json.load(f)
                    logger.info(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑: {data_file.name}")
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

            # 7. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Jinja2 —Å smart –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            json_str = json.dumps(json_obj, ensure_ascii=False)
            json_str = re.sub(r'\$\{([^}]+)\}', r'{{ \1 }}', json_str)

            # Smart —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if self.smart_mode and self.context_builder:
                context = self.context_builder.build_smart_context(json_str, context)

                if self.context_builder.auto_vars:
                    logger.info(f"   üß† –°–æ–∑–¥–∞–Ω–æ –∑–∞–≥–ª—É—à–µ–∫: {len(self.context_builder.auto_vars)}")
                    if self.debug:
                        logger.debug(self.context_builder.get_summary())

            try:
                template = self.jinja_env.from_string(json_str)
                rendered = template.render(**context)
                result_obj = json.loads(rendered)
            except (TemplateSyntaxError, UndefinedError) as e:
                if self.smart_mode:
                    logger.warning(f"‚ö†Ô∏è Jinja2: {e} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π JSON)")
                else:
                    logger.warning(f"‚ö†Ô∏è Jinja2: {e} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π JSON)")
                result_obj = json_obj
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                result_obj = json_obj

            # 8. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            file_name = file_path.name
            for ext in sorted(self.SUPPORTED_EXTENSIONS, key=len, reverse=True):
                if file_name.endswith(ext):
                    file_stem = file_name[:-len(ext)]
                    break
            else:
                file_stem = file_path.stem

            if file_stem.startswith('[JJ_'):
                platform = file_stem[4:file_stem.find(']')]
                full_name = f"[FULL_{platform}]{file_stem[file_stem.find(']')+1:]}_web.json"
            else:
                full_name = f"[FULL_{file_stem}]_web.json"

            output_path = file_path.parent / full_name

            # 9. –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(result_obj, f, indent=2, ensure_ascii=False)

            logger.info("")
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_path.name}")

            # 10. –í–∞–ª–∏–¥–∞—Ü–∏—è
            if self.validator_path.exists():
                self.validate_output(output_path)

        except Exception as e:
            logger.error("")
            logger.error("‚îÑ" * 80)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
            logger.error("‚îÑ" * 80)
            if self.debug:
                import traceback
                traceback.print_exc()
        finally:
            self.processing_files.discard(file_path)

    def _convert_to_web(self, component: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Android ‚Üí WEB"""
        MAPPING = {
            'ScrollView': 'ScrollWrapper',
            'ConstraintLayout': 'ConstraintWrapper',
            'LinearLayout': 'StackView',
            'TextView': 'LabelView',
            'Button': 'ButtonView',
            'Image': 'ImageView',
            'Icon': 'IconView',
            'Card': 'BannerWrapper',
        }

        if not isinstance(component, dict):
            return component

        if 'type' in component and component['type'] in MAPPING:
            component['type'] = MAPPING[component['type']]

        if 'content' in component and isinstance(component['content'], dict):
            component['content'] = self._convert_to_web(component['content'])

        if 'children' in component and isinstance(component['children'], list):
            component['children'] = [self._convert_to_web(c) for c in component['children']]

        return component

    def validate_output(self, file_path: Path):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ sdui_web_validator"""
        try:
            result = subprocess.run(
                [sys.executable, str(self.validator_path), str(file_path)],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                logger.info(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: {file_path.name}")
            else:
                logger.warning(f"   ‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {result.stderr}")
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

    def reload_browser(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Vivaldi:9090"""
        try:
            applescript = '''
            tell application "Vivaldi"
                activate
                set allWindows to every window
                repeat with aWindow in allWindows
                    set allTabs to every tab of aWindow
                    repeat with aTab in allTabs
                        set tabURL to URL of aTab
                        if tabURL contains ":9090" then
                            tell aTab to reload
                            return "Reloaded"
                        end if
                    end repeat
                end repeat
                return "Not found"
            end tell
            '''

            result = subprocess.run(
                ['osascript', '-e', applescript],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0 and "Reloaded" in result.stdout:
                logger.info("   üåê –ë—Ä–∞—É–∑–µ—Ä Vivaldi –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (–ø–æ—Ä—Ç 9090)")
        except:
            pass

    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return

        path = Path(event.src_path)

        if self.is_jj_file(path):
            self.process_jj_file(path)
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.browser_reload:
                self.reload_browser()
        elif path.name.startswith('[data'):
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω data —Ñ–∞–π–ª: {path.name}")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for jj_file in path.parent.iterdir():
                if self.is_jj_file(jj_file):
                    self.process_jj_file(jj_file)
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            if self.browser_reload:
                self.reload_browser()

    def process_all(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã"""
        logger.info("")
        logger.info("‚îÅ" * 80)
        logger.info("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö [JJ_] —Ñ–∞–π–ª–æ–≤...")
        logger.info("‚îÅ" * 80)

        jj_files = []
        for root, dirs, files in os.walk(self.watch_dir):
            for file in files:
                file_path = Path(root) / file
                if self.is_jj_file(file_path):
                    jj_files.append(file_path)

        logger.info("")
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(jj_files)} [JJ_] —Ñ–∞–π–ª–æ–≤")
        logger.info("")

        for jj_file in jj_files:
            self.process_jj_file(jj_file)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        if self.browser_reload and jj_files:
            self.reload_browser()

        logger.info("")
        logger.info("‚îÅ" * 80)
        logger.info("‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info("‚îÅ" * 80)

    def watch(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        observer = Observer()
        observer.schedule(self, str(self.watch_dir), recursive=True)
        observer.start()

        logger.info("")
        logger.info("‚îÅ" * 80)
        logger.info("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        logger.info("‚îÅ" * 80)

        self.process_all()

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
            logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        observer.join()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='Jinja Hot Reload v3.2.3 - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞'
    )

    parser.add_argument(
        '--path',
        default='/Users/username/Documents/front-middle-schema/.JSON',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--debug',
        action='store_true',
        help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'
    )

    parser.add_argument(
        '--test',
        action='store_true',
        help='–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--no-browser-reload',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±—Ä–∞—É–∑–µ—Ä–∞'
    )

    parser.add_argument(
        '--smart',
        action='store_true',
        help='üß† –í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫'
    )

    args = parser.parse_args()

    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë     Jinja Hot Reload v3.2.3                     ‚ïë
    ‚ïë     üß† SMART MODE: Intelligent Error Fixing     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    reloader = JinjaHotReloaderV32(
        watch_dir=args.path,
        debug=args.debug,
        browser_reload=not args.no_browser_reload,
        smart_mode=args.smart
    )

    if args.test:
        logger.info("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        reloader.process_all()
    else:
        reloader.watch()


if __name__ == '__main__':
    main()
#!/usr/bin/env python3
"""
Jinja Hot Reload v3.1.0 - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SDUI –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–ª—è WEB

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ SDUI —Ñ—É–Ω–∫—Ü–∏–π –≤ Jinja2
3. –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ sdui_web_validator
4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è WEB –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""

import os
import sys
import json
import time
import re
import argparse
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
import logging

# –ò–º–ø–æ—Ä—Ç Jinja2 –∏ watchdog
try:
    from jinja2 import Environment, Template, TemplateSyntaxError, UndefinedError
    from jinja2.exceptions import TemplateError
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler, FileModifiedEvent
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install jinja2 watchdog")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π SDUI
sys.path.append(str(Path(__file__).parent))
try:
    from sdui_to_jinja2_transformer import SDUIToJinja2Transformer
    from sdui_jinja_extensions import SDUIJinja2Extensions
except ImportError:
    print("‚ö†Ô∏è SDUI –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞ –±–µ–∑ SDUI –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    SDUIToJinja2Transformer = None
    SDUIJinja2Extensions = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


class JinjaJsonPreprocessor:
    """–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º"""

    @staticmethod
    def clean_mixed_syntax(content: str) -> Tuple[str, Dict[str, str]]:
        """
        –û—á–∏—â–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        Returns: (–æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω)
        """
        replacements = {}
        counter = 0

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã Jinja2 –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–º–∞—é—Ç JSON (–æ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∫ –ø—Ä–æ—Å—Ç—ã–º)
        patterns = [
            # {% if ... %} ... {% elif %} ... {% else %} ... {% endif %}
            (r'\{%\s*if\s+[^%]+%\}.*?\{%\s*endif\s*%\}', 'JINJA_IF'),
            # {% for ... %} ... {% endfor %}
            (r'\{%\s*for\s+[^%]+%\}.*?\{%\s*endfor\s*%\}', 'JINJA_FOR'),
            # {% set ... %}
            (r'\{%\s*set\s+[^%]+%\}', 'JINJA_SET'),
            # {% ... %} (–ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏)
            (r'\{%[^}]+%\}', 'JINJA_TAG'),
            # {{ ... }} (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Jinja2)
            (r'\{\{[^}]+\}\}', 'JINJA_VAR'),
        ]

        cleaned = content

        # –£–¥–∞–ª—è–µ–º Jinja2 –±–ª–æ–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON
        for pattern, block_type in patterns:
            matches = list(re.finditer(pattern, cleaned, re.DOTALL | re.MULTILINE))
            for match in reversed(matches):
                counter += 1
                key = f"__{block_type}_{counter}__"
                replacements[key] = match.group()
                # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                cleaned = cleaned[:match.start()] + cleaned[match.end():]

        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        # 1. –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
        while ',,' in cleaned:
            cleaned = cleaned.replace(',,', ',')

        # 2. –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
        cleaned = re.sub(r',\s*\]', ']', cleaned)
        cleaned = re.sub(r',\s*\}', '}', cleaned)

        # 3. –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫
        cleaned = re.sub(r'\[\s*,', '[', cleaned)
        cleaned = re.sub(r'\{\s*,', '{', cleaned)

        # 4. –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è)
        cleaned = re.sub(r',\s*:', ':', cleaned)

        # 5. –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
        cleaned = re.sub(r':\s*,', ': null,', cleaned)
        cleaned = re.sub(r':\s*\}', ': null}', cleaned)
        cleaned = re.sub(r':\s*\]', ': null]', cleaned)

        # 6. –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        cleaned = re.sub(r'"\w+"\s*:\s*null\s*,\s*', '', cleaned)
        cleaned = re.sub(r',\s*"\w+"\s*:\s*null\s*\}', '}', cleaned)

        return cleaned, replacements


class SDUIWebConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä SDUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è WEB –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""

    # –ú–∞–ø–ø–∏–Ω–≥ Android –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ WEB –∞–Ω–∞–ª–æ–≥–∏
    COMPONENT_MAPPING = {
        # Android -> Web
        'ScrollView': 'ScrollWrapper',
        'ConstraintLayout': 'ConstraintWrapper',
        'LinearLayout': 'StackView',
        'TextView': 'LabelView',
        'Button': 'ButtonView',
        'Image': 'ImageView',
        'Icon': 'IconView',
        'Card': 'BannerWrapper',
    }

    @classmethod
    def convert_to_web(cls, component: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è WEB –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if not isinstance(component, dict):
            return component

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if 'type' in component:
            component_type = component['type']
            if component_type in cls.COMPONENT_MAPPING:
                component['type'] = cls.COMPONENT_MAPPING[component_type]

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if 'content' in component and isinstance(component['content'], dict):
            component['content'] = cls.convert_to_web(component['content'])

        if 'children' in component:
            if isinstance(component['children'], list):
                component['children'] = [
                    cls.convert_to_web(child) for child in component['children']
                ]

        return component


class JinjaHotReloaderV3(FileSystemEventHandler):
    """Hot Reload –¥–ª—è Jinja2/SDUI —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–ª—è WEB"""

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è [JJ_] —Ñ–∞–π–ª–æ–≤
    SUPPORTED_EXTENSIONS = {'.json', '.jinja', '.j2', '.json.jinja', '.json.j2'}

    def __init__(self, watch_dir: str = None, debug: bool = False, browser_reload: bool = True):
        self.watch_dir = Path(watch_dir) if watch_dir else Path('/Users/username/Documents/front-middle-schema/.JSON')
        self.debug = debug
        self.browser_reload = browser_reload
        self.data_cache = {}
        self.processing_files = set()
        self.last_process_time = {}

        # SDUI —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
        self.sdui_transformer = SDUIToJinja2Transformer() if SDUIToJinja2Transformer else None

        # Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        self.jinja_env = Environment()
        if SDUIJinja2Extensions:
            SDUIJinja2Extensions.register_all(self.jinja_env)

        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—É—Ç—å
        self.validator_path = Path('/Users/username/Documents/front-middle-schema/sdui_web_validator_v3.0.0.py')

        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {self.watch_dir}")
        logger.info(f"üîç SDUI –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if self.sdui_transformer else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logger.info(f"üåê –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞ (Vivaldi:9090)' if self.browser_reload else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logger.info(f"üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {', '.join(self.SUPPORTED_EXTENSIONS)}")

    def is_jj_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª JJ_ —Ñ–∞–π–ª–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º"""
        if not file_path.name.startswith('[JJ_'):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        # –î–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ç–∏–ø–∞ .json.jinja –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —á–∞—Å—Ç–∏
        if file_path.suffix in self.SUPPORTED_EXTENSIONS:
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (.json.jinja, .json.j2)
        name_parts = file_path.name.split('.')
        if len(name_parts) >= 3:
            compound_ext = '.' + '.'.join(name_parts[-2:])
            if compound_ext in self.SUPPORTED_EXTENSIONS:
                return True

        return False

    def find_data_file(self, jj_file: Path) -> Optional[Path]:
        """–ò—â–µ—Ç [data] —Ñ–∞–π–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ [JJ_] —Ñ–∞–π–ª–∞"""
        current_dir = jj_file.parent

        while current_dir != current_dir.parent:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [data
            for file in current_dir.iterdir():
                if file.is_file() and file.name.startswith('[data'):
                    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω data —Ñ–∞–π–ª: {file.name}")
                    return file
            current_dir = current_dir.parent

        return None

    def process_jj_file(self, file_path: Path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç [JJ_] —Ñ–∞–π–ª"""
        if file_path in self.processing_files:
            return

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        current_time = time.time()
        if file_path in self.last_process_time:
            if current_time - self.last_process_time[file_path] < 1:
                return

        self.last_process_time[file_path] = current_time
        self.processing_files.add(file_path)

        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")

            # 1. –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # 2. –û—á–∏—â–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            cleaned_content, jinja_blocks = JinjaJsonPreprocessor.clean_mixed_syntax(content)

            # 3. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            try:
                json_obj = json.loads(cleaned_content)
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}: {e.msg}")
                logger.error(f"   –§–∞–π–ª: {file_path.name}")
                if self.debug:
                    debug_path = file_path.with_name(f"{file_path.stem}_debug.json")
                    with open(debug_path, 'w', encoding='utf-8') as f:
                        f.write(cleaned_content)
                    logger.info(f"üìù Debug —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {debug_path.name}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –º–µ—Å—Ç–æ
                    lines = cleaned_content.split('\n')
                    if e.lineno <= len(lines):
                        start = max(0, e.lineno - 3)
                        end = min(len(lines), e.lineno + 2)
                        logger.info(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (—Å—Ç—Ä–æ–∫–∏ {start+1}-{end}):")
                        for i in range(start, end):
                            marker = " >>> " if i == e.lineno - 1 else "     "
                            logger.info(f"{marker}{i+1:4d} | {lines[i][:100]}")
                return

            # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è WEB –µ—Å–ª–∏ —ç—Ç–æ Android –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if 'ANDROID' in str(file_path):
                logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Android ‚Üí WEB")
                json_obj = SDUIWebConverter.convert_to_web(json_obj)

            # 5. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SDUI —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Jinja2 –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.sdui_transformer:
                json_str = json.dumps(json_obj, ensure_ascii=False)
                if '${' in json_str or '"type": "if"' in json_str:
                    logger.info("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ SDUI ‚Üí Jinja2")
                    json_str = self.sdui_transformer.transform(json_str)
                    json_obj = json.loads(json_str)

            # 6. –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º [data] —Ñ–∞–π–ª
            data_file = self.find_data_file(file_path)
            context = {}

            if data_file:
                try:
                    with open(data_file, 'r', encoding='utf-8') as f:
                        context = json.load(f)
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑: {data_file.name}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

            # 7. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Jinja2 —à–∞–±–ª–æ–Ω—ã
            json_str = json.dumps(json_obj, ensure_ascii=False)

            # –ó–∞–º–µ–Ω—è–µ–º ${ –Ω–∞ {{ –¥–ª—è Jinja2
            json_str = re.sub(r'\$\{([^}]+)\}', r'{{ \1 }}', json_str)

            # –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ Jinja2
            try:
                template = self.jinja_env.from_string(json_str)
                rendered = template.render(**context)
                result_obj = json.loads(rendered)
            except (TemplateSyntaxError, UndefinedError) as e:
                logger.warning(f"‚ö†Ô∏è Jinja2: {e} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π JSON)")
                result_obj = json_obj
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                result_obj = json_obj

            # 8. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º [FULL_] —Ñ–∞–π–ª
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            file_name = file_path.name
            for ext in sorted(self.SUPPORTED_EXTENSIONS, key=len, reverse=True):
                if file_name.endswith(ext):
                    file_stem = file_name[:-len(ext)]
                    break
            else:
                file_stem = file_path.stem

            if file_stem.startswith('[JJ_'):
                # –ó–∞–º–µ–Ω—è–µ–º JJ_ –Ω–∞ FULL_
                platform = file_stem[4:file_stem.find(']')]
                full_name = f"[FULL_{platform}]{file_stem[file_stem.find(']')+1:]}_web.json"
            else:
                full_name = f"[FULL_{file_stem}]_web.json"

            output_path = file_path.parent / full_name

            # 9. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(result_obj, f, indent=2, ensure_ascii=False)

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_path.name}")

            # 10. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ sdui_web_validator –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.validator_path.exists():
                self.validate_output(output_path)

            # 11. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Vivaldi (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.browser_reload:
                self.reload_browser()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
            if self.debug:
                import traceback
                traceback.print_exc()
        finally:
            self.processing_files.discard(file_path)

    def validate_output(self, file_path: Path):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ sdui_web_validator"""
        try:
            result = subprocess.run(
                [sys.executable, str(self.validator_path), str(file_path)],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: {file_path.name}")
            else:
                logger.warning(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {result.stderr}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

    def reload_browser(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ—Ä—Ç–æ–º 9090 –≤ –±—Ä–∞—É–∑–µ—Ä–µ Vivaldi"""
        try:
            # AppleScript –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ Vivaldi —Å –ø–æ—Ä—Ç–æ–º 9090
            applescript = '''
            tell application "Vivaldi"
                activate
                set allWindows to every window
                repeat with aWindow in allWindows
                    set allTabs to every tab of aWindow
                    repeat with aTab in allTabs
                        set tabURL to URL of aTab
                        if tabURL contains ":9090" then
                            tell aTab to reload
                            return "Reloaded"
                        end if
                    end repeat
                end repeat
                return "Not found"
            end tell
            '''

            result = subprocess.run(
                ['osascript', '-e', applescript],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                if "Reloaded" in result.stdout:
                    logger.info("üåê –ë—Ä–∞—É–∑–µ—Ä Vivaldi –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (–ø–æ—Ä—Ç 9090)")
                elif "Not found" in result.stdout:
                    logger.debug("‚ÑπÔ∏è –í–∫–ª–∞–¥–∫–∞ —Å –ø–æ—Ä—Ç–æ–º 9090 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Vivaldi")
            else:
                logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {result.stderr}")

        except subprocess.TimeoutExpired:
            logger.debug("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
        except Exception as e:
            logger.debug(f"‚ÑπÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return

        path = Path(event.src_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ [JJ_] —Ñ–∞–π–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
        if self.is_jj_file(path):
            self.process_jj_file(path)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º data —Ñ–∞–π–ª—ã
        elif path.name.startswith('[data'):
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω data —Ñ–∞–π–ª: {path.name}")
            # –ü–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ [JJ_] —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for jj_file in path.parent.iterdir():
                if self.is_jj_file(jj_file):
                    self.process_jj_file(jj_file)

    def process_all(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ [JJ_] —Ñ–∞–π–ª—ã"""
        logger.info("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö [JJ_] —Ñ–∞–π–ª–æ–≤...")

        jj_files = []
        for root, dirs, files in os.walk(self.watch_dir):
            for file in files:
                file_path = Path(root) / file
                if self.is_jj_file(file_path):
                    jj_files.append(file_path)

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(jj_files)} [JJ_] —Ñ–∞–π–ª–æ–≤")

        for jj_file in jj_files:
            self.process_jj_file(jj_file)

        logger.info("‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def watch(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
        observer = Observer()
        observer.schedule(self, str(self.watch_dir), recursive=True)
        observer.start()

        logger.info("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

        # –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self.process_all()

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
            logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        observer.join()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='Jinja Hot Reload v3.1.0 - SDUI/Jinja2 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å WEB –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π'
    )

    parser.add_argument(
        '--path',
        default='/Users/username/Documents/front-middle-schema/.JSON',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--debug',
        action='store_true',
        help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'
    )

    parser.add_argument(
        '--test',
        action='store_true',
        help='–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--no-browser-reload',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±—Ä–∞—É–∑–µ—Ä–∞ Vivaldi'
    )

    args = parser.parse_args()

    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë     Jinja Hot Reload v3.1.0                     ‚ïë
    ‚ïë     SDUI + Jinja2 + WEB Validation              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    reloader = JinjaHotReloaderV3(
        watch_dir=args.path,
        debug=args.debug,
        browser_reload=not args.no_browser_reload
    )

    if args.test:
        logger.info("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        reloader.process_all()
    else:
        reloader.watch()


if __name__ == '__main__':
    main()
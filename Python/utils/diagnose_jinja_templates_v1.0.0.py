#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Pure Jinja2 Templates v1.0.0

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- FileSystemLoader –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
- –ù–∞–ª–∏—á–∏–µ import/include –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —à–∞–±–ª–æ–Ω–∞–º
- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å test data
"""

import sys
import json
from pathlib import Path
from jinja2 import Environment, FileSystemLoader, TemplateNotFound, TemplateSyntaxError

def diagnose_template(template_path: Path):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Pure Jinja2 —à–∞–±–ª–æ–Ω–∞"""

    print("=" * 80)
    print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: {template_path.name}")
    print("=" * 80)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    if not template_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
        return False

    print(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {template_path}")

    # 2. –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    with open(template_path, 'r', encoding='utf-8') as f:
        content = f.read()

    print(f"‚úÖ –†–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ import/include –¥–∏—Ä–µ–∫—Ç–∏–≤
    import re
    import_pattern = r"\{%\s*import\s+['\"]([^'\"]+)['\"]\s+"
    include_pattern = r"\{%\s*include\s+['\"]([^'\"]+)['\"]\s*%\}"

    imports = re.findall(import_pattern, content)
    includes = re.findall(include_pattern, content)

    print(f"\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    print(f"   Import –¥–∏—Ä–µ–∫—Ç–∏–≤: {len(imports)}")
    for imp in imports:
        print(f"      - {imp}")
    print(f"   Include –¥–∏—Ä–µ–∫—Ç–∏–≤: {len(includes)}")
    for inc in includes:
        print(f"      - {inc}")

    # 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ search paths
    search_paths = [
        str(template_path.parent),  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞
        str(template_path.parent.parent),  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    ]

    print(f"\nüìÇ SEARCH PATHS:")
    for i, path in enumerate(search_paths, 1):
        print(f"   {i}. {path}")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print(f"\nüîó –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:")

    all_deps = set(imports + includes)
    missing_deps = []

    for dep in all_deps:
        found = False
        for search_path in search_paths:
            dep_path = Path(search_path) / dep
            if dep_path.exists():
                print(f"   ‚úÖ {dep} ‚Üí {dep_path}")
                found = True
                break

        if not found:
            print(f"   ‚ùå {dep} ‚Üí –ù–ï –ù–ê–ô–î–ï–ù")
            missing_deps.append(dep)

    if missing_deps:
        print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: {len(missing_deps)}")
        return False

    # 6. –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    print(f"\nüöÄ –¢–ï–°–¢ –†–ï–ù–î–ï–†–ò–ù–ì–ê:")

    try:
        env = Environment(loader=FileSystemLoader(search_paths))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        def format_currency(val):
            return f"‚ÇΩ {val:,.2f}".replace(',', ' ').replace('.', ',')

        def format_date(val):
            return str(val)

        env.filters['formatCurrency'] = format_currency
        env.filters['formatDate'] = format_date
        env.filters['isoformat'] = str

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        from datetime import datetime
        env.globals['now'] = datetime.now

        # Test data
        test_data = {
            "images": {
                "coins_stack": "https://example.com/coins.png",
                "calendar_icon": "https://example.com/calendar.png",
                "video_poster": "https://example.com/video.jpg"
            },
            "salary": {
                "current": 125000,
                "average": 120000,
                "change": 4.2,
                "accrued": 145000,
                "deducted": 20000,
                "payout": 125000,
                "paymentDate": "2025-10-15"
            },
            "privileges": [
                {"id": "1", "title": "–î–ú–°", "description": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"},
                {"id": "2", "title": "–°–ø–æ—Ä—Ç", "description": "–§–∏—Ç–Ω–µ—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"}
            ],
            "actions": {
                "salaryDetails": "https://app.com/salary/details",
                "allPrivileges": "https://app.com/privileges"
            },
            "video": {
                "posterUrl": "https://example.com/poster.jpg",
                "url": "https://example.com/video.mp4",
                "title": "–û –∑–∞—Ä–ø–ª–∞—Ç–µ",
                "subtitle": "–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ"
            }
        }

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
        template_name = template_path.name
        template = env.get_template(template_name)

        print(f"   ‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {template_name}")

        # –ü—Ä–æ–±—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
        rendered = template.render(data=test_data)

        print(f"   ‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
        print(f"   üìè –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(rendered)} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
        try:
            json_obj = json.loads(rendered)
            print(f"   ‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω!")
            print(f"   üìä –ö–ª—é—á–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {len(json_obj)}")
            return True

        except json.JSONDecodeError as e:
            print(f"   ‚ùå JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {e}")
            print(f"   üìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(rendered[:500])
            return False

    except TemplateNotFound as e:
        print(f"   ‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {e.name}")
        print(f"   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ search paths")
        return False

    except TemplateSyntaxError as e:
        print(f"   ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.message}")
        print(f"   üìç –°—Ç—Ä–æ–∫–∞ {e.lineno}")
        return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    if len(sys.argv) < 2:
        print("Usage: python diagnose_jinja_templates_v1.0.0.py <template_path>")
        sys.exit(1)

    template_path = Path(sys.argv[1])
    success = diagnose_template(template_path)

    print("\n" + "=" * 80)
    if success:
        print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–ê")
        print("=" * 80)
        sys.exit(0)
    else:
        print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê")
        print("=" * 80)
        sys.exit(1)


if __name__ == '__main__':
    main()

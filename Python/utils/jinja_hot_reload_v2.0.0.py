#!/usr/bin/env python3
"""
Jinja2 JSON Template Hot Reload Monitor v2.0.0
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ Jinja2 —à–∞–±–ª–æ–Ω–æ–≤ –≤ JSON —Ñ–∞–π–ª–∞—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
import time
import logging
import traceback
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional, Set, Tuple
from collections import defaultdict

import jinja2
from jinja2 import Template, Environment, FileSystemLoader, TemplateSyntaxError
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileModifiedEvent, FileCreatedEvent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


class JinjaJsonProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ —Å Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏"""

    def __init__(self, base_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

        Args:
            base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        self.base_path = Path(base_path)
        self.processed_files: Set[str] = set()
        self.data_cache: Dict[str, Dict] = {}
        self.last_process_time: Dict[str, float] = {}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.jinja_env = Environment(
            loader=FileSystemLoader(str(self.base_path)),
            undefined=jinja2.StrictUndefined,  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è undefined –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            trim_blocks=True,
            lstrip_blocks=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        self._setup_custom_filters()

    def _setup_custom_filters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è Jinja2"""
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –ø–æ–ª—è–º
        def safe_get(obj, key, default=None):
            try:
                return obj.get(key, default) if isinstance(obj, dict) else default
            except:
                return default

        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
        def format_date(value, format='%Y-%m-%d'):
            try:
                if isinstance(value, str):
                    dt = datetime.fromisoformat(value)
                else:
                    dt = value
                return dt.strftime(format)
            except:
                return value

        self.jinja_env.filters['safe_get'] = safe_get
        self.jinja_env.filters['format_date'] = format_date

    def find_data_file(self, jj_file_path: Path) -> Optional[Path]:
        """
        –ü–æ–∏—Å–∫ [data] —Ñ–∞–π–ª–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö

        Args:
            jj_file_path: –ü—É—Ç—å –∫ [JJ_] —Ñ–∞–π–ª—É

        Returns:
            Path –∫ [data] —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        current_dir = jj_file_path.parent

        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –¥–ª—è –ø–æ–∏—Å–∫–∞ [data] —Ñ–∞–π–ª–∞
        while current_dir >= self.base_path.parent:
            # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [data]
            data_files = list(current_dir.glob('[data]*.json'))

            if data_files:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π [data] —Ñ–∞–π–ª
                logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω data —Ñ–∞–π–ª: {data_files[0]}")
                return data_files[0]

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            current_dir = current_dir.parent

        logger.warning(f"‚ö†Ô∏è [data] —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {jj_file_path}")
        return None

    def load_data_file(self, data_file_path: Path) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ [data] —Ñ–∞–π–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Args:
            data_file_path: –ü—É—Ç—å –∫ [data] —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        str_path = str(data_file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if str_path in self.data_cache:
            file_mtime = data_file_path.stat().st_mtime
            if file_mtime <= self.last_process_time.get(str_path, 0):
                logger.debug(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data_file_path.name}")
                return self.data_cache[str_path]

        try:
            with open(data_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.data_cache[str_path] = data
            self.last_process_time[str_path] = time.time()

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑: {data_file_path.name}")
            return data

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {data_file_path}: {e}")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {data_file_path}: {e}")
            return {}

    def process_jinja_template(self, template_str: str, context: Dict[str, Any]) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ Jinja2 —à–∞–±–ª–æ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ

        Args:
            template_str: –°—Ç—Ä–æ–∫–∞ —Å Jinja2 —à–∞–±–ª–æ–Ω–æ–º
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏

        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        try:
            template = Template(template_str)
            return template.render(**context)
        except TemplateSyntaxError as e:
            logger.error(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ: {e}")
            return template_str
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            return template_str

    def process_json_with_jinja(self, json_obj: Any, context: Dict[str, Any]) -> Any:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –æ–±—ä–µ–∫—Ç–∞ —Å Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏

        Args:
            json_obj: JSON –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏

        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç
        """
        if isinstance(json_obj, dict):
            result = {}
            for key, value in json_obj.items():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á
                processed_key = self.process_jinja_template(key, context) if isinstance(key, str) else key
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                result[processed_key] = self.process_json_with_jinja(value, context)
            return result

        elif isinstance(json_obj, list):
            return [self.process_json_with_jinja(item, context) for item in json_obj]

        elif isinstance(json_obj, str):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            if '{{' in json_obj or '{%' in json_obj:
                processed = self.process_jinja_template(json_obj, context)

                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
                if processed.lower() in ('true', 'false'):
                    return processed.lower() == 'true'
                elif processed.replace('.', '', 1).replace('-', '', 1).isdigit():
                    try:
                        return int(processed) if '.' not in processed else float(processed)
                    except:
                        return processed
                else:
                    return processed
            return json_obj

        else:
            return json_obj

    def generate_output_filename(self, jj_file_path: Path) -> Path:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ [FULL_] —Ñ–∞–π–ª–∞

        Args:
            jj_file_path: –ü—É—Ç—å –∫ [JJ_] —Ñ–∞–π–ª—É

        Returns:
            Path –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        filename = jj_file_path.name

        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å [JJ_*] –Ω–∞ [FULL_*]
        if filename.startswith('[JJ_'):
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            close_bracket = filename.find(']')
            if close_bracket != -1:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ JJ_
                prefix_content = filename[4:close_bracket]
                rest_of_name = filename[close_bracket + 1:]
                new_filename = f'[FULL_{prefix_content}]{rest_of_name}'
            else:
                new_filename = filename.replace('[JJ_', '[FULL_')
        else:
            new_filename = f'[FULL]{filename}'

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        return jj_file_path.parent / new_filename

    def process_jj_file(self, jj_file_path: Path) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ [JJ_] —Ñ–∞–π–ª–∞

        Args:
            jj_file_path: –ü—É—Ç—å –∫ [JJ_] —Ñ–∞–π–ª—É

        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {jj_file_path.name}")

        # –ù–∞—Ö–æ–¥–∏–º [data] —Ñ–∞–π–ª
        data_file_path = self.find_data_file(jj_file_path)
        if not data_file_path:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω [data] —Ñ–∞–π–ª –¥–ª—è: {jj_file_path}")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context = self.load_data_file(data_file_path)
        if not context:
            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {jj_file_path}")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω JSON
            with open(jj_file_path, 'r', encoding='utf-8') as f:
                template_json = json.load(f)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Å Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏
            processed_json = self.process_json_with_jinja(template_json, context)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_path = self.generate_output_filename(jj_file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(processed_json, f, ensure_ascii=False, indent=2)

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_path.name}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            self.processed_files.add(str(jj_file_path))

            return True

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {jj_file_path}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {jj_file_path}: {e}")
            logger.debug(traceback.format_exc())
            return False

    def process_all_jj_files(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö [JJ_] —Ñ–∞–π–ª–æ–≤"""
        logger.info("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö [JJ_] —Ñ–∞–π–ª–æ–≤...")

        jj_files = list(self.base_path.rglob('[JJ_*.json'))

        if not jj_files:
            logger.warning("‚ö†Ô∏è [JJ_] —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(jj_files)} [JJ_] —Ñ–∞–π–ª–æ–≤")

        success_count = 0
        for jj_file in jj_files:
            if self.process_jj_file(jj_file):
                success_count += 1

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(jj_files)} —Ñ–∞–π–ª–æ–≤")


class JinjaJsonWatcher(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ [JJ_] —Ñ–∞–π–ª–æ–≤"""

    def __init__(self, processor: JinjaJsonProcessor):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

        Args:
            processor: –≠–∫–∑–µ–º–ø–ª—è—Ä JinjaJsonProcessor
        """
        self.processor = processor
        self.last_event_time: Dict[str, float] = {}
        self.debounce_delay = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

    def _should_process(self, file_path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Ñ–∞–π–ª —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [JJ_
        if not file_path.name.endswith('.json'):
            return False

        if not file_path.name.startswith('[JJ_'):
            return False

        # Debounce –ø—Ä–æ–≤–µ—Ä–∫–∞
        str_path = str(file_path)
        current_time = time.time()

        if str_path in self.last_event_time:
            if current_time - self.last_event_time[str_path] < self.debounce_delay:
                return False

        self.last_event_time[str_path] = current_time
        return True

    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return

        file_path = Path(event.src_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º [JJ_] —Ñ–∞–π–ª—ã
        if self._should_process(file_path):
            logger.info(f"üìù –ò–∑–º–µ–Ω—ë–Ω —Ñ–∞–π–ª: {file_path.name}")
            self.processor.process_jj_file(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è [data] —Ñ–∞–π–ª–æ–≤
        elif file_path.name.startswith('[data]') and file_path.name.endswith('.json'):
            logger.info(f"üìù –ò–∑–º–µ–Ω—ë–Ω data —Ñ–∞–π–ª: {file_path.name}")
            self._reprocess_dependent_files(file_path)

    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return

        file_path = Path(event.src_path)

        if self._should_process(file_path):
            logger.info(f"‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_path.name}")
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            time.sleep(0.2)
            self.processor.process_jj_file(file_path)

    def _reprocess_dependent_files(self, data_file_path: Path):
        """
        –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö [JJ_] —Ñ–∞–π–ª–æ–≤, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ [data] —Ñ–∞–π–ª–∞

        Args:
            data_file_path: –ü—É—Ç—å –∫ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–º—É [data] —Ñ–∞–π–ª—É
        """
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ data —Ñ–∞–π–ª–∞
        str_path = str(data_file_path)
        if str_path in self.processor.data_cache:
            del self.processor.data_cache[str_path]

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ [JJ_] —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        search_dir = data_file_path.parent
        jj_files = list(search_dir.rglob('[JJ_*.json'))

        if jj_files:
            logger.info(f"‚ôªÔ∏è –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(jj_files)} –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            for jj_file in jj_files:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç JJ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ—Ç data —Ñ–∞–π–ª
                if self.processor.find_data_file(jj_file) == data_file_path:
                    self.processor.process_jj_file(jj_file)


class JinjaHotReloadMonitor:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""

    def __init__(self, base_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞

        Args:
            base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        self.base_path = Path(base_path)

        if not self.base_path.exists():
            raise ValueError(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {base_path}")

        self.processor = JinjaJsonProcessor(base_path)
        self.watcher = JinjaJsonWatcher(self.processor)
        self.observer = Observer()

    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Jinja JSON Hot Reload Monitor v2.0.0")
        logger.info(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.base_path}")
        logger.info("=" * 60)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        self.processor.process_all_jj_files()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º observer
        self.observer.schedule(self.watcher, str(self.base_path), recursive=True)
        self.observer.start()

        logger.info("üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        logger.info("-" * 60)

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("\n" + "=" * 60)
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        self.observer.stop()
        self.observer.join()

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {len(self.processor.processed_files)}")
        logger.info(f"üíæ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ –¥–∞–Ω–Ω—ã—Ö: {len(self.processor.data_cache)}")
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("=" * 60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    BASE_PATH = "/Users/username/Documents/front-middle-schema/.JSON"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import jinja2
        from watchdog.observers import Observer
    except ImportError as e:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e}")
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install jinja2 watchdog")
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        monitor = JinjaHotReloadMonitor(BASE_PATH)
        monitor.start()

    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)


if __name__ == "__main__":
    main()
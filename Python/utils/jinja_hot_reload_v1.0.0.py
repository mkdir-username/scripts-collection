#!/usr/bin/env python3
"""
Jinja2 Template Hot Reload Server
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ Jinja2 —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
"""

import os
import sys
import time
import json
import argparse
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional

try:
    from jinja2 import Environment, FileSystemLoader, Template
    from jinja2.exceptions import TemplateError
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler, FileModifiedEvent
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("pip install jinja2 watchdog")
    sys.exit(1)


class JinjaHotReloader(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è hot reload Jinja2 —à–∞–±–ª–æ–Ω–æ–≤"""

    def __init__(self, template_dir: str, output_dir: str = None,
                 context_file: str = None, auto_render: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è hot reloader

        Args:
            template_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            context_file: JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            auto_render: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        """
        self.template_dir = Path(template_dir)
        self.output_dir = Path(output_dir) if output_dir else self.template_dir / 'rendered'
        self.context_file = Path(context_file) if context_file else None
        self.auto_render = auto_render

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.output_dir.mkdir(parents=True, exist_ok=True)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        self.env = Environment(
            loader=FileSystemLoader(str(self.template_dir)),
            auto_reload=True,
            cache_size=0  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à –¥–ª—è hot reload
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.context = self.load_context()

        print(f"üî• Hot Reload —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {self.template_dir}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {self.output_dir}")
        if self.context_file:
            print(f"üìÑ –§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.context_file}")

    def load_context(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if not self.context_file or not self.context_file.exists():
            return {}

        try:
            with open(self.context_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {}

    def render_template(self, template_path: Path) -> Optional[str]:
        """
        –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞

        Args:
            template_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞

        Returns:
            –†–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
            relative_path = template_path.relative_to(self.template_dir)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            template = self.env.get_template(str(relative_path))

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            render_context = {
                **self.context,
                'render_time': datetime.now().isoformat(),
                'template_name': str(relative_path),
            }

            rendered = template.render(render_context)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if self.auto_render:
                output_file = self.output_dir / relative_path.with_suffix('.html')
                output_file.parent.mkdir(parents=True, exist_ok=True)

                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(rendered)

                print(f"‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥: {relative_path} -> {output_file.name}")

            return rendered

        except TemplateError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞ {template_path.name}: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None

    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return

        path = Path(event.src_path)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è JSON
        if self.context_file and path == self.context_file:
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {path.name}")
            self.context = self.load_context()
            # –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            self.render_all_templates()
            return

        # –†–µ–Ω–¥–µ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        if path.suffix in ['.j2', '.jinja2', '.jinja', '.html.j2']:
            print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω —à–∞–±–ª–æ–Ω: {path.name}")
            self.render_template(path)

    def render_all_templates(self):
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        templates = list(self.template_dir.glob('**/*.j2')) + \
                   list(self.template_dir.glob('**/*.jinja2')) + \
                   list(self.template_dir.glob('**/*.jinja'))

        print(f"üöÄ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤...")

        for template_path in templates:
            self.render_template(template_path)

        print("‚ú® –í—Å–µ —à–∞–±–ª–æ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

    def watch(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤"""
        observer = Observer()

        # –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π —à–∞–±–ª–æ–Ω–æ–≤
        observer.schedule(self, str(self.template_dir), recursive=True)

        # –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if self.context_file and self.context_file.exists():
            observer.schedule(self, str(self.context_file.parent), recursive=False)

        observer.start()

        print("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

        try:
            # –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
            self.render_all_templates()

            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
            print("\nüõë Hot reload –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        observer.join()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='Jinja2 Hot Reload Server - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  %(prog)s

  # –£–∫–∞–∑–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
  %(prog)s templates/

  # –° –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ JSON —Ñ–∞–π–ª–∞
  %(prog)s templates/ --context data.json

  # –í—ã–≤–æ–¥ –≤ –¥—Ä—É–≥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  %(prog)s templates/ --output dist/

  # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–µ–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
  %(prog)s templates/ --no-watch
"""
    )

    parser.add_argument(
        'template_dir',
        nargs='?',
        default='.',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å Jinja2 —à–∞–±–ª–æ–Ω–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)'
    )

    parser.add_argument(
        '-o', '--output',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
    )

    parser.add_argument(
        '-c', '--context',
        help='JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞'
    )

    parser.add_argument(
        '--no-watch',
        action='store_true',
        help='–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'
    )

    parser.add_argument(
        '--no-auto-render',
        action='store_true',
        help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    template_dir = Path(args.template_dir)
    if not template_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {template_dir}")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º hot reloader
    reloader = JinjaHotReloader(
        template_dir=str(template_dir),
        output_dir=args.output,
        context_file=args.context,
        auto_render=not args.no_auto_render
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    if args.no_watch:
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        reloader.render_all_templates()
    else:
        # Hot reload —Ä–µ–∂–∏–º
        reloader.watch()


if __name__ == '__main__':
    main()
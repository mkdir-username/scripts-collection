#!/usr/bin/env python3
"""
–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º.
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ñ–∞–π–ª –≤ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
1. –ß–∏—Å—Ç—ã–π JSON –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º Jinja2 –±–ª–æ–∫–æ–≤)
2. Jinja2 —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
"""

import json
import re
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Any

class JinjaJsonPreprocessor:
    """–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ Jinja2/JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""

    def __init__(self):
        self.jinja_blocks = []
        self.block_counter = 0

    def extract_jinja_blocks(self, content: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç Jinja2 –±–ª–æ–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Jinja2 –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        patterns = [
            # {% if %} ... {% endif %} –±–ª–æ–∫–∏ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
            (r'\{%\s*if\s+[^%]+%[^}]?\}.*?\{%\s*endif\s*%[^}]?\}', 'IF_BLOCK'),
            # {% for %} ... {% endfor %} –±–ª–æ–∫–∏ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
            (r'\{%\s*for\s+[^%]+%[^}]?\}.*?\{%\s*endfor\s*%[^}]?\}', 'FOR_BLOCK'),
            # –û–¥–∏–Ω–æ—á–Ω—ã–µ {% %} —Ç–µ–≥–∏
            (r'\{%[^}]*%[^}]?\}', 'SINGLE_TAG'),
        ]

        result = content
        self.jinja_blocks = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏
        for pattern, block_type in patterns:
            while True:
                match = re.search(pattern, result, re.DOTALL | re.MULTILINE)
                if not match:
                    break

                self.block_counter += 1
                block_id = f"__JINJA_{block_type}_{self.block_counter}__"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                self.jinja_blocks.append({
                    'id': block_id,
                    'content': match.group(),
                    'type': block_type,
                    'start': match.start(),
                    'end': match.end()
                })

                # –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫ –Ω–∞ null (–≤–∞–ª–∏–¥–Ω–æ–µ JSON –∑–Ω–∞—á–µ–Ω–∏–µ)
                result = result[:match.start()] + 'null' + result[match.end():]

        return result

    def fix_json_structure(self, content: str) -> str:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã JSON
        """
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ null (–æ—Ç Jinja –±–ª–æ–∫–æ–≤)
        content = re.sub(r',\s*null\s*,', ',', content)
        content = re.sub(r',\s*null\s*\]', ']', content)
        content = re.sub(r',\s*null\s*\}', '}', content)

        # –£–¥–∞–ª—è–µ–º null –≤ –º–∞—Å—Å–∏–≤–∞—Ö $children
        content = re.sub(r'\[\s*null\s*,', '[', content)
        content = re.sub(r',\s*null\s*\]', ']', content)
        content = re.sub(r'\[\s*null\s*\]', '[]', content)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏ –ø–æ—Å–ª–µ Jinja
        # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∏–¥–∞ "% }" –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π }
        content = re.sub(r'%\s*\}\s*\n\s*\{', '%}\n{', content)

        # –£–±–∏—Ä–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ } –ø–æ—Å–ª–µ Jinja –±–ª–æ–∫–æ–≤
        lines = content.split('\n')
        fixed_lines = []
        skip_next = False

        for i, line in enumerate(lines):
            if skip_next:
                skip_next = False
                continue

            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ } –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å Jinja
            if i > 0 and line.strip() == '}' and 'null' in lines[i-1]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π JSON –æ–±—ä–µ–∫—Ç–∞
                if i + 1 < len(lines) and lines[i+1].strip().startswith('{'):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

            fixed_lines.append(line)

        return '\n'.join(fixed_lines)

    def create_template(self, original_content: str, json_content: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç Jinja2 —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        """
        template = original_content

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ Jinja2 –±–ª–æ–∫–∞—Ö
        # {% if ... % } -> {% if ... %}
        template = re.sub(r'\{%\s*([^%]+)\s*%\s*\}', r'{% \1 %}', template)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è
        template = re.sub(r'\{%\s*if\s+(\w+)\s*!=\s*null\s*%\}', r'{% if \1 is defined and \1 is not none %}', template)
        template = re.sub(r'\{%\s*if\s+(\w+\.\w+)\s*!=\s*null\s*%\}', r'{% if \1 is defined and \1 is not none %}', template)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª–∏–Ω—ã
        template = re.sub(r'(\w+)\|length', r'\1|length', template)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏–∫–ª—ã
        template = re.sub(r'\{%\s*for\s+(\w+)\s+in\s+([^%]+)\s*%\}', r'{% for \1 in \2 %}', template)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º endif –∏ endfor
        template = re.sub(r'\{%\s*endif\s*%\s*\}', r'{% endif %}', template)
        template = re.sub(r'\{%\s*endfor\s*%\s*\}', r'{% endfor %}', template)

        return template

    def process_file(self, file_path: Path) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π
        """
        print(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path.name}")

        with open(file_path, 'r', encoding='utf-8') as f:
            original_content = f.read()

        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º Jinja –±–ª–æ–∫–∏
        json_content = self.extract_jinja_blocks(original_content)

        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        json_content = self.fix_json_structure(json_content)

        # 3. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            json_obj = json.loads(json_content)
            json_valid = True
            print("  ‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        except json.JSONDecodeError as e:
            json_valid = False
            json_obj = None
            print(f"  ‚ö†Ô∏è  JSON –æ—à–∏–±–∫–∞: {e}")

        # 4. –°–æ–∑–¥–∞–µ–º Jinja2 —à–∞–±–ª–æ–Ω
        template_content = self.create_template(original_content, json_content)

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'original_file': file_path,
            'json_valid': json_valid,
            'jinja_blocks_count': len(self.jinja_blocks),
            'files_created': []
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å—Ç—ã–π JSON (–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞)
        json_path = file_path.with_name(f"{file_path.stem}_clean.json")
        if json_valid:
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(json_obj, f, indent=2, ensure_ascii=False)
            print(f"  üìÑ –ß–∏—Å—Ç—ã–π JSON: {json_path.name}")
            results['files_created'].append(json_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Jinja2 —à–∞–±–ª–æ–Ω
        template_path = file_path.with_name(f"{file_path.stem}_template.j2")
        with open(template_path, 'w', encoding='utf-8') as f:
            f.write(template_content)
        print(f"  üìù Jinja2 —à–∞–±–ª–æ–Ω: {template_path.name}")
        results['files_created'].append(template_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö
        blocks_path = file_path.with_name(f"{file_path.stem}_blocks.json")
        with open(blocks_path, 'w', encoding='utf-8') as f:
            json.dump(self.jinja_blocks, f, indent=2, ensure_ascii=False)
        print(f"  üîñ –ò–Ω—Ñ–æ –æ –±–ª–æ–∫–∞—Ö: {blocks_path.name}")
        results['files_created'].append(blocks_path)

        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python jinja_json_preprocessor.py <—Ñ–∞–π–ª.json>")
        sys.exit(1)

    file_path = Path(sys.argv[1])
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        sys.exit(1)

    preprocessor = JinjaJsonPreprocessor()
    results = preprocessor.process_file(file_path)

    print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"  JSON –≤–∞–ª–∏–¥–µ–Ω: {results['json_valid']}")
    print(f"  Jinja2 –±–ª–æ–∫–æ–≤: {results['jinja_blocks_count']}")
    print(f"  –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for file in results['files_created']:
        print(f"    - {file.name}")

    if results['json_valid']:
        print("\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"  1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {file_path.stem}_clean.json –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ JSON")
        print(f"  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {file_path.stem}_template.j2 –¥–ª—è Jinja2 —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
        print(f"  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ jinja_hot_reload_v3.0.0.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print("\n‚ö†Ô∏è  JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

if __name__ == '__main__':
    main()
#!/usr/bin/env python3
"""
SDUI Enhanced Resolver - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ SDUI —Ä–µ–∑–æ–ª–≤–µ—Ä–∞
–¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDUI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.
"""

import json
import sys
from pathlib import Path
from typing import Dict, List
from sdui_resolver_enhanced import (
    SDUIEnhancedResolver, 
    ResolverConfig,
    SDUIResolverAPI,
    ValidationLevel,
    ComponentMetrics
)

# ============================================================================
# –ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# ============================================================================
def example_basic_resolution():
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ SDUI —Å—Ö–µ–º—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å—Ö–µ–º—ã")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ResolverConfig(
        base_path="/Users/username/Documents/front-middle-schema/SDUI",
        web_only=True,  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ web –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        verbose=False   # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä
    resolver = SDUIEnhancedResolver(config)
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ñ–∞–π–ª
    try:
        result = resolver.resolve_file("screens/salary/get-salary.json")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        metadata = result.get("_metadata", {})
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print(f"   Truth Score: {metadata.get('truth_score', 0):.2f}")
        print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {metadata.get('unique_components', 0)}")
        print(f"   –í—Ä–µ–º—è: {metadata.get('processing_time', 0):.3f}—Å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = Path("resolved_salary.json")
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_path}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


# ============================================================================
# –ü–†–ò–ú–ï–† 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ –º–µ—Ç–∞—Å—Ö–µ–º—ã —Å Truth Score
# ============================================================================
def example_validation_with_metaschema():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø—Ä–æ—Ç–∏–≤ strict_unversioned.json –º–µ—Ç–∞—Å—Ö–µ–º—ã."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –º–µ—Ç–∞—Å—Ö–µ–º–æ–π –∏ Truth Score")
    print("="*60)
    
    config = ResolverConfig(
        base_path="/Users/username/Documents/front-middle-schema/SDUI",
        metaschema_path="/Users/username/Documents/front-middle-schema/metaschemas/strict_unversioned.json",
        web_only=True,
        truth_score_threshold=0.95,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è production
        validation_level=ValidationLevel.STRICT,
        verbose=True
    )
    
    resolver = SDUIEnhancedResolver(config)
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_files = [
        "screens/salary/get-salary.json",
        "components/Button.json",
        "templates/form-template.json"
    ]
    
    for file_path in test_files:
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º: {file_path}")
        try:
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ö–µ–º—É
            resolved = resolver.resolve_file(file_path)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ –º–µ—Ç–∞—Å—Ö–µ–º—ã
            validation = resolver.validate_against_metaschema(resolved)
            
            # –†–∞—Å—á–µ—Ç Truth Score
            score = resolver.calculate_truth_score(resolved, None)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if validation["valid"]:
                print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
                for error in validation["errors"][:3]:  # –ü–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                    print(f"      - {error}")
            
            # Truth Score –∞–Ω–∞–ª–∏–∑
            if score >= 0.95:
                print(f"   ‚úÖ Truth Score: {score:.3f} (Production Ready)")
            elif score >= 0.80:
                print(f"   ‚ö†Ô∏è  Truth Score: {score:.3f} (Needs Review)")
            else:
                print(f"   ‚ùå Truth Score: {score:.3f} (Not Ready)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ web release —Å—Ç–∞—Ç—É—Å–∞
            if "_metadata" in resolved:
                web_released = resolved["_metadata"].get("web_released_components", [])
                if web_released:
                    print(f"   üåê Web-released –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(web_released[:5])}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


# ============================================================================
# –ü–†–ò–ú–ï–† 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ StateAware –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
# ============================================================================
def example_stateaware_patterns():
    """–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ StateAware –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ StateAware –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    print("="*60)
    
    config = ResolverConfig(
        base_path="/Users/username/Documents/front-middle-schema/SDUI",
        web_only=True,
        verbose=False
    )
    
    resolver = SDUIEnhancedResolver(config)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å StateAware –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    test_contract = {
        "type": "Screen",
        "title": "StateAware Example",
        "content": {
            "type": "Container",
            "children": [
                {
                    "type": "Control<Input>",
                    "id": "nameInput",
                    "stateRef": "userForm.name",
                    "validation": {"required": True}
                },
                {
                    "type": "Focus<Button>",
                    "id": "submitBtn",
                    "focusCondition": "userForm.isValid"
                },
                {
                    "type": "Selection<List>",
                    "id": "optionsList",
                    "selectionMode": "multiple",
                    "stateRef": "selectedOptions"
                },
                {
                    "type": "StateRef<Display>",
                    "binding": "userForm.summary"
                },
                {
                    "type": "Binding<Text>",
                    "dataSource": "api.response.message"
                }
            ]
        }
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º StateAware –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    patterns = resolver.extract_stateaware_patterns(test_contract)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ StateAware –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
    print("\n–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    pattern_groups = {}
    for pattern in patterns:
        pattern_type = pattern["pattern"]
        if pattern_type not in pattern_groups:
            pattern_groups[pattern_type] = []
        pattern_groups[pattern_type].append(pattern)
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    for pattern_type, items in pattern_groups.items():
        print(f"\nüîπ {pattern_type}: {len(items)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        for item in items[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–∏–º–µ—Ä–∞
            print(f"   - –ü—É—Ç—å: {item['path']}")
            print(f"     –¢–∏–ø: {item['component_type']}")
            if 'state_ref' in item['details']:
                print(f"     State: {item['details']['state_ref']}")
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –Ω–∞ Truth Score
    base_score = 1.0
    state_bonus = min(len(patterns) * 0.05, 0.15)  # Max 0.15 bonus
    final_score = min(base_score + state_bonus, 1.0)
    
    print(f"\nüìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ Truth Score:")
    print(f"   –ë–∞–∑–æ–≤—ã–π score: {base_score:.2f}")
    print(f"   StateAware –±–æ–Ω—É—Å: +{state_bonus:.2f}")
    print(f"   –ò—Ç–æ–≥–æ–≤—ã–π score: {final_score:.2f}")


# ============================================================================
# –ü–†–ò–ú–ï–† 4: Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
# ============================================================================
def example_batch_processing():
    """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö SDUI —Ñ–∞–π–ª–æ–≤."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 4: Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
    print("="*60)
    
    config = ResolverConfig(
        base_path="/Users/username/Documents/front-middle-schema/SDUI",
        web_only=True,
        max_parallel=3,  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        verbose=False
    )
    
    resolver = SDUIEnhancedResolver(config)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    files_to_process = [
        "screens/salary/get-salary.json",
        "screens/profile/user-profile.json", 
        "components/Button.json",
        "components/Input.json",
        "components/List.json",
        "templates/form-template.json",
        "templates/card-template.json"
    ]
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(files_to_process)} —Ñ–∞–π–ª–æ–≤...")
    
    # Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞
    results = resolver.batch_resolve(files_to_process)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    successful = 0
    failed = 0
    total_score = 0.0
    processing_time = 0.0
    
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print("-" * 40)
    
    for result in results:
        if result["success"]:
            successful += 1
            metadata = result["data"].get("_metadata", {})
            score = metadata.get("truth_score", 0)
            time = metadata.get("processing_time", 0)
            total_score += score
            processing_time += time
            
            status = "‚úÖ" if score >= 0.95 else "‚ö†Ô∏è" if score >= 0.80 else "‚ùå"
            print(f"{status} {result['file']}: Score {score:.2f}, Time {time:.3f}s")
        else:
            failed += 1
            print(f"‚ùå {result['file']}: {result['error']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {successful}/{len(files_to_process)}")
    print(f"   –û—à–∏–±–∫–∏: {failed}")
    if successful > 0:
        avg_score = total_score / successful
        print(f"   –°—Ä–µ–¥–Ω–∏–π Truth Score: {avg_score:.3f}")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {processing_time:.2f}—Å")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {processing_time/successful:.3f}—Å")


# ============================================================================
# –ü–†–ò–ú–ï–† 5: API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
# ============================================================================
def example_api_interface():
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 5: API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    api = SDUIResolverAPI(
        base_path="/Users/username/Documents/front-middle-schema/SDUI",
        metaschema_path="/Users/username/Documents/front-middle-schema/metaschemas/strict_unversioned.json"
    )
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–∞
    agent_requests = [
        {
            "action": "resolve",
            "file_path": "screens/salary/get-salary.json"
        },
        {
            "action": "validate",
            "file_path": "components/Button.json"
        },
        {
            "action": "calculate_score",
            "file_path": "templates/form-template.json"
        },
        {
            "action": "extract_patterns",
            "file_path": "screens/profile/user-profile.json"
        },
        {
            "action": "batch",
            "files": [
                "components/Input.json",
                "components/Button.json",
                "components/Text.json"
            ]
        }
    ]
    
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–∞:\n")
    
    for i, request in enumerate(agent_requests, 1):
        print(f"üì® –ó–∞–ø—Ä–æ—Å {i}: {request['action']}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = api.process_request(request)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        if response["success"]:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            if "truth_score" in response:
                print(f"   Truth Score: {response['truth_score']:.3f}")
            
            if request["action"] == "validate":
                validation = response["data"]
                if validation["valid"]:
                    print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
                else:
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(validation['errors'])}")
            
            elif request["action"] == "extract_patterns":
                patterns = response["data"]
                print(f"   –ù–∞–π–¥–µ–Ω–æ StateAware –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
            
            elif request["action"] == "batch":
                results = response["data"]
                successful = sum(1 for r in results if r["success"])
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {successful}/{len(results)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.get('error', 'Unknown')}")
        
        print()


# ============================================================================
# –ü–†–ò–ú–ï–† 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
# ============================================================================  
def example_component_map():
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 6: –ö–∞—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Å–≤—è–∑–µ–π")
    print("="*60)
    
    config = ResolverConfig(
        base_path="/Users/username/Documents/front-middle-schema/SDUI",
        web_only=True,
        verbose=False
    )
    
    resolver = SDUIEnhancedResolver(config)
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ö–µ–º—É
    resolved = resolver.resolve_file("screens/salary/get-salary.json")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    component_map = resolver.generate_component_map(resolved)
    
    print("üìç –ö–∞—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = component_map["components"]
    print(f"\n–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(components)}")
    
    # –¢–æ–ø-5 –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    sorted_components = sorted(
        components.items(), 
        key=lambda x: x[1]["count"], 
        reverse=True
    )[:5]
    
    print("\n–¢–æ–ø-5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ:")
    for comp_name, comp_data in sorted_components:
        print(f"   {comp_name}: {comp_data['count']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
        if comp_data["paths"]:
            print(f"      –ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ: {comp_data['paths'][0]}")
    
    # –°–≤—è–∑–∏
    references = component_map["references"]
    print(f"\n–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏: {len(references)}")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–µ–π
    if references:
        print("\n–ü—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–µ–π:")
        for ref in references[:3]:
            print(f"   {ref['from']} ‚Üí {ref['to']} (—Ç–∏–ø: {ref['type']})")
    
    # –ò–µ—Ä–∞—Ä—Ö–∏—è
    hierarchy = component_map["hierarchy"]
    
    def print_hierarchy(node, level=0):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø–µ—á–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏–∏."""
        indent = "  " * level
        print(f"{indent}‚îú‚îÄ {node['type']}")
        for child in node.get("children", [])[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –¥–æ—á–µ—Ä–Ω–∏—Ö
            print_hierarchy(child, level + 1)
        if len(node.get("children", [])) > 2:
            print(f"{indent}  ‚îî‚îÄ ... –µ—â–µ {len(node['children']) - 2}")
    
    print("\n–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    print_hierarchy(hierarchy)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = component_map["statistics"]
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {stats['total_components']}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {stats['unique_types']}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {stats['max_depth']}")
    if stats['stateaware_count'] > 0:
        print(f"   StateAware –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {stats['stateaware_count']}")


# ============================================================================
# –ü–†–ò–ú–ï–† 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ required –ø–æ–ª–µ–π
# ============================================================================
def example_required_fields_validation():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ —Å—Ö–µ–º–µ."""
    print("\n" + "="*60)
    print("–ü–†–ò–ú–ï–† 7: –í–∞–ª–∏–¥–∞—Ü–∏—è required –ø–æ–ª–µ–π")
    print("="*60)
    
    config = ResolverConfig(
        base_path="/Users/username/Documents/front-middle-schema/SDUI",
        validation_level=ValidationLevel.STRICT,
        verbose=False
    )
    
    resolver = SDUIEnhancedResolver(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    test_contract = {
        "type": "Button",
        "text": "–ù–∞–∂–º–∏ –º–µ–Ω—è",
        # "action" - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        "style": {
            "color": "#FF0000"
            # "backgroundColor" - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
        }
    }
    
    # –°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    button_schema = {
        "type": "object",
        "required": ["type", "text", "action"],
        "properties": {
            "type": {"type": "string"},
            "text": {"type": "string"},
            "action": {"type": "object"},
            "style": {
                "type": "object",
                "required": ["backgroundColor"],
                "properties": {
                    "color": {"type": "string"},
                    "backgroundColor": {"type": "string"}
                }
            }
        }
    }
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = resolver.validate_required_fields(test_contract, button_schema)
    
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ required –ø–æ–ª–µ–π:")
    
    if validation["valid"]:
        print("   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    else:
        print("   ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        
        if validation["missing_fields"]:
            print(f"\n   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:")
            for field in validation["missing_fields"]:
                print(f"      - {field}")
        
        if validation["type_mismatches"]:
            print(f"\n   –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤:")
            for mismatch in validation["type_mismatches"]:
                print(f"      - {mismatch['field']}: –æ–∂–∏–¥–∞–ª—Å—è {mismatch['expected']}, –ø–æ–ª—É—á–µ–Ω {mismatch['actual']}")
        
        if validation["extra_fields"]:
            print(f"\n   –õ–∏—à–Ω–∏–µ –ø–æ–ª—è (–Ω–µ –≤ —Å—Ö–µ–º–µ):")
            for field in validation["extra_fields"]:
                print(f"      - {field}")
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ Truth Score
    missing_count = len(validation.get("missing_fields", []))
    type_mismatch_count = len(validation.get("type_mismatches", []))
    
    score_penalty = (missing_count * 0.1) + (type_mismatch_count * 0.05)
    final_score = max(0, 1.0 - score_penalty)
    
    print(f"\nüìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ Truth Score:")
    print(f"   –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: -{missing_count * 0.1:.2f}")
    print(f"   –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤: -{type_mismatch_count * 0.05:.2f}")
    print(f"   –ò—Ç–æ–≥–æ–≤—ã–π Truth Score: {final_score:.2f}")


# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
# ============================================================================
def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SDUI Enhanced Resolver."""
    
    print("‚ïî" + "‚ïê"*58 + "‚ïó")
    print("‚ïë" + " SDUI ENHANCED RESOLVER - –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ".center(58) + "‚ïë")
    print("‚ïö" + "‚ïê"*58 + "‚ïù")
    
    examples = [
        ("–ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", example_basic_resolution),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å –º–µ—Ç–∞—Å—Ö–µ–º–æ–π", example_validation_with_metaschema),
        ("StateAware –ø–∞—Ç—Ç–µ—Ä–Ω—ã", example_stateaware_patterns),
        ("Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞", example_batch_processing),
        ("API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", example_api_interface),
        ("–ö–∞—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", example_component_map),
        ("Required –ø–æ–ª—è", example_required_fields_validation)
    ]
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
    for i, (name, _) in enumerate(examples, 1):
        print(f"  {i}. {name}")
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä (1-7) –∏–ª–∏ 'all' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö: ", end="")
    
    try:
        choice = input().strip().lower()
        
        if choice == 'all':
            for name, func in examples:
                try:
                    func()
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ '{name}': {e}")
        elif choice.isdigit() and 1 <= int(choice) <= len(examples):
            idx = int(choice) - 1
            name, func = examples[idx]
            func()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    
    print("\n" + "="*60)
    print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("="*60)


if __name__ == "__main__":
    main()
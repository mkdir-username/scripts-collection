#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –≤—Å–µ—Ö $ref —Å—Å—ã–ª–æ–∫ –≤ JSON —Å—Ö–µ–º–∞—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
"""

import json
import sys
from pathlib import Path
from typing import Dict, List, Set, Tuple, Any
import argparse
from collections import defaultdict
from datetime import datetime
import re


class RefValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö $ref —Å—Å—ã–ª–æ–∫"""

    def __init__(self, base_path: Path, verbose: bool = False, fix: bool = False):
        self.base_path = base_path.resolve()
        self.verbose = verbose
        self.fix = fix

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_refs = 0
        self.valid_refs = 0
        self.invalid_refs = 0
        self.internal_refs = 0
        self.fixed_refs = 0

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
        self.broken_refs: Dict[Path, List[Tuple[str, str]]] = defaultdict(list)
        self.missing_extensions: Dict[Path, List[str]] = defaultdict(list)
        self.invalid_format: Dict[Path, List[str]] = defaultdict(list)
        self.circular_refs: Set[Tuple[Path, Path]] = set()
        self.processed_files: Set[Path] = set()

    def validate_file(self, file_path: Path) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
        result = {
            'file': file_path,
            'total_refs': 0,
            'valid_refs': 0,
            'invalid_refs': 0,
            'errors': []
        }

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            try:
                data = json.loads(content)
            except json.JSONDecodeError as e:
                result['errors'].append(f"JSON parse error: {e}")
                return result

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ ref'—ã
            self._validate_refs_recursive(data, file_path, result)

            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            if self.fix and result['invalid_refs'] > 0:
                self._fix_refs_in_file(file_path, data)

        except Exception as e:
            result['errors'].append(f"Error reading file: {e}")

        return result

    def _validate_refs_recursive(self, obj: Any, source_file: Path, result: Dict,
                                depth: int = 0, visited: Set[str] = None) -> None:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ $ref –≤ –æ–±—ä–µ–∫—Ç–µ"""
        if depth > 50:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
            return

        if visited is None:
            visited = set()

        if isinstance(obj, dict):
            for key, value in obj.items():
                if key == "$ref" and isinstance(value, str):
                    result['total_refs'] += 1
                    self.total_refs += 1

                    validation = self._validate_single_ref(value, source_file, visited)

                    if validation['valid']:
                        result['valid_refs'] += 1
                        self.valid_refs += 1
                    else:
                        result['invalid_refs'] += 1
                        self.invalid_refs += 1
                        result['errors'].append(validation['error'])

                        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                        if validation['category'] == 'broken':
                            self.broken_refs[source_file].append((value, validation['error']))
                        elif validation['category'] == 'missing_extension':
                            self.missing_extensions[source_file].append(value)
                        elif validation['category'] == 'invalid_format':
                            self.invalid_format[source_file].append(value)
                else:
                    self._validate_refs_recursive(value, source_file, result, depth + 1, visited)

        elif isinstance(obj, list):
            for item in obj:
                self._validate_refs_recursive(item, source_file, result, depth + 1, visited)

    def _validate_single_ref(self, ref: str, source_file: Path, visited: Set[str]) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–Ω—É $ref —Å—Å—ã–ª–∫—É"""

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (#/definitions/...)
        if ref.startswith("#"):
            self.internal_refs += 1
            return {'valid': True, 'category': 'internal'}

        # HTTP/HTTPS —Å—Å—ã–ª–∫–∏
        if ref.startswith("http://") or ref.startswith("https://"):
            return {'valid': True, 'category': 'external'}

        # file:/// —Å—Å—ã–ª–∫–∏
        if ref.startswith("file:///"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–ª—ç—à–∞, –Ω–µ 4)
            if ref.startswith("file:////"):
                return {
                    'valid': False,
                    'category': 'invalid_format',
                    'error': f"Invalid format (4 slashes): {ref}"
                }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å
            path_str = ref[7:]  # –£–±–∏—Ä–∞–µ–º file:// (7 —Å–∏–º–≤–æ–ª–æ–≤)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            if not path_str.endswith('.json'):
                return {
                    'valid': False,
                    'category': 'missing_extension',
                    'error': f"Missing .json extension: {ref}"
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            target_path = Path(path_str)
            if not target_path.exists():
                return {
                    'valid': False,
                    'category': 'broken',
                    'error': f"File not found: {path_str}"
                }

            # –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤

            return {'valid': True, 'category': 'local'}

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ (–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
        if "../" in ref or "./" in ref or not ref.startswith("file://"):
            return {
                'valid': False,
                'category': 'invalid_format',
                'error': f"Relative path should be absolute: {ref}"
            }

        return {
            'valid': False,
            'category': 'unknown',
            'error': f"Unknown reference format: {ref}"
        }

    def _fix_refs_in_file(self, file_path: Path, data: Any) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
        fixed = False

        def fix_recursive(obj: Any) -> bool:
            nonlocal fixed

            if isinstance(obj, dict):
                for key, value in list(obj.items()):
                    if key == "$ref" and isinstance(value, str):
                        new_ref = self._try_fix_ref(value, file_path)
                        if new_ref != value:
                            obj[key] = new_ref
                            fixed = True
                            self.fixed_refs += 1
                            if self.verbose:
                                print(f"  üîß Fixed: {value} ‚Üí {new_ref}")
                    else:
                        fix_recursive(value)
            elif isinstance(obj, list):
                for item in obj:
                    fix_recursive(item)

            return fixed

        if fix_recursive(data):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                f.write('\n')
            return True

        return False

    def _try_fix_ref(self, ref: str, source_file: Path) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Å—ã–ª–∫—É"""

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º 4 —Å–ª—ç—à–∞ –Ω–∞ 3
        if ref.startswith("file:////"):
            ref = "file:///" + ref[9:]

        # –î–æ–±–∞–≤–ª—è–µ–º .json –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if ref.startswith("file:///") and not ref.endswith('.json'):
            test_path = ref + '.json'
            if Path(test_path[8:]).exists():
                return test_path

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
        if not ref.startswith("file:///") and not ref.startswith("#") and not ref.startswith("http"):
            if ref.startswith("../") or ref.startswith("./"):
                try:
                    target = (source_file.parent / ref).resolve()
                    if target.exists():
                        return f"file:///{target.as_posix()}"
                except:
                    pass

        return ref

    def scan_directory(self, directory: Path, pattern: str = "**/*.json") -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã"""
        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {directory.relative_to(self.base_path)}")

        json_files = list(directory.glob(pattern))
        total = len(json_files)

        if total == 0:
            print("  ‚ÑπÔ∏è  –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤")
            return

        print(f"  üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total}")

        errors_in_dir = 0
        for i, json_file in enumerate(json_files, 1):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if any(part.startswith('.') for part in json_file.parts):
                continue

            if json_file in self.processed_files:
                continue

            self.processed_files.add(json_file)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if i % 100 == 0 or self.verbose:
                print(f"  [{i}/{total}] {json_file.name}...")

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
            result = self.validate_file(json_file)

            if result['invalid_refs'] > 0:
                errors_in_dir += 1
                if not self.verbose:
                    rel_path = json_file.relative_to(self.base_path)
                    print(f"  ‚ùå {rel_path}: {result['invalid_refs']} invalid refs")

        if errors_in_dir > 0:
            print(f"  ‚ö†Ô∏è  –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {errors_in_dir}")

    def scan_all(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç"""

        directories = [
            "SDUI",
            "widgets",
            "multistep",
            "valuefields",
            "dependentfields",
            "analytics",
            "metaschema"
        ]

        for dir_name in directories:
            dir_path = self.base_path / dir_name
            if dir_path.exists():
                self.scan_directory(dir_path)

    def print_report(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–Å–¢ –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("="*60)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(self.processed_files)}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {self.total_refs}")
        print(f"  ‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {self.valid_refs}")
        print(f"  ‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {self.invalid_refs}")
        print(f"  ‚Ä¢ üîó –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö (#): {self.internal_refs}")

        if self.fix:
            print(f"  ‚Ä¢ üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.fixed_refs}")

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
        if self.broken_refs:
            print(f"\n‚ùå –ë–ò–¢–´–ï –°–°–´–õ–ö–ò ({sum(len(v) for v in self.broken_refs.values())} total):")
            for file, refs in list(self.broken_refs.items())[:10]:
                print(f"\n  üìÑ {file.relative_to(self.base_path)}:")
                for ref, error in refs[:3]:
                    print(f"    ‚Ä¢ {ref}")
                    print(f"      {error}")
                if len(refs) > 3:
                    print(f"    ... –∏ –µ—â—ë {len(refs) - 3}")

        if self.missing_extensions:
            print(f"\n‚ö†Ô∏è  –ë–ï–ó –†–ê–°–®–ò–†–ï–ù–ò–Ø .json ({sum(len(v) for v in self.missing_extensions.values())} total):")
            for file, refs in list(self.missing_extensions.items())[:5]:
                print(f"  üìÑ {file.relative_to(self.base_path)}:")
                for ref in refs[:3]:
                    print(f"    ‚Ä¢ {ref}")

        if self.invalid_format:
            print(f"\n‚ö†Ô∏è  –ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ ({sum(len(v) for v in self.invalid_format.values())} total):")
            for file, refs in list(self.invalid_format.items())[:5]:
                print(f"  üìÑ {file.relative_to(self.base_path)}:")
                for ref in refs[:3]:
                    print(f"    ‚Ä¢ {ref}")

        if self.circular_refs:
            print(f"\nüîÑ –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ({len(self.circular_refs)} total):")
            for source, target in list(self.circular_refs)[:5]:
                print(f"  ‚Ä¢ {source.name} ‚Üí {target.name}")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if self.invalid_refs == 0:
            print("\n‚úÖ –í–°–ï –°–°–´–õ–ö–ò –ö–û–†–†–ï–ö–¢–ù–´!")
        else:
            print(f"\n‚ùå –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: {self.invalid_refs}")
            if not self.fix:
                print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --fix –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


def main():
    parser = argparse.ArgumentParser(
        description="–í–∞–ª–∏–¥–∞—Ç–æ—Ä –≤—Å–µ—Ö $ref —Å—Å—ã–ª–æ–∫ –≤ JSON —Å—Ö–µ–º–∞—Ö"
    )
    parser.add_argument(
        "path",
        nargs='?',
        default=".",
        help="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É front-middle-schema"
    )
    parser.add_argument(
        "--fix",
        action="store_true",
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "-d", "--directory",
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
    )
    parser.add_argument(
        "-f", "--file",
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"
    )

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    base_path = Path(args.path).resolve()

    # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if base_path.name != "front-middle-schema":
        for parent in base_path.parents:
            if parent.name == "front-middle-schema":
                base_path = parent
                break
        else:
            potential = base_path / "front-middle-schema"
            if potential.exists():
                base_path = potential

    if not base_path.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {base_path}")
        sys.exit(1)

    print(f"üéØ –ü—Ä–æ–µ–∫—Ç: {base_path}")
    print(f"üìã –†–µ–∂–∏–º: {'–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï' if args.fix else '–ü–†–û–í–ï–†–ö–ê'}")

    # –°–æ–∑–¥–∞—ë–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = RefValidator(
        base_path=base_path,
        verbose=args.verbose,
        fix=args.fix
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    start_time = datetime.now()

    if args.file:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path = Path(args.file).resolve()
        if not file_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            sys.exit(1)
        result = validator.validate_file(file_path)
        print(f"\nüìÑ {file_path.name}:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {result['total_refs']}")
        print(f"  ‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {result['valid_refs']}")
        print(f"  ‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {result['invalid_refs']}")
        if result['errors']:
            print(f"  ‚Ä¢ –û—à–∏–±–∫–∏:")
            for error in result['errors']:
                print(f"    - {error}")

    elif args.directory:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        target_dir = base_path / args.directory
        if not target_dir.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {target_dir}")
            sys.exit(1)
        validator.scan_directory(target_dir)
        validator.print_report()

    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        validator.scan_all()
        validator.print_report()

    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    elapsed = datetime.now() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed.total_seconds():.2f} —Å–µ–∫")

    # –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if validator.invalid_refs == 0 else 1)


if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Universal JSON Schema $ref Converter
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –í–°–ï –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ $ref –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ file:/// –ø—É—Ç–∏
–¥–ª—è –í–°–ï–ì–û –ø—Ä–æ–µ–∫—Ç–∞ front-middle-schema
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, Optional, Set
import argparse
from datetime import datetime
import shutil


class UniversalRefConverter:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö $ref –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏"""

    def __init__(self, base_path: Path, verbose: bool = False, dry_run: bool = False):
        self.base_path = base_path.resolve()
        self.verbose = verbose
        self.dry_run = dry_run
        self.converted_count = 0
        self.files_modified = 0
        self.errors = []
        self.processed_files: Set[Path] = set()

    def convert_refs_in_file(self, file_path: Path) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ ref'—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                original_content = content

            # –ü–∞—Ä—Å–∏–º JSON
            try:
                data = json.loads(content)
            except json.JSONDecodeError as e:
                if self.verbose:
                    print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é {file_path.name}: –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON - {e}")
                return False

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ref'—ã
            file_modified = self._convert_refs_recursive(data, file_path)

            # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if file_modified and not self.dry_run:
                new_content = json.dumps(data, indent=2, ensure_ascii=False)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π
                backup_path = file_path.with_suffix('.json.backup')
                shutil.copy2(file_path, backup_path)

                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                    if not new_content.endswith('\n'):
                        f.write('\n')

                # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                backup_path.unlink()

                self.files_modified += 1
                return True

        except Exception as e:
            self.errors.append(f"{file_path}: {e}")
            if self.verbose:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {file_path.name}: {e}")

        return False

    def _convert_refs_recursive(self, obj: Any, source_file: Path, depth: int = 0) -> bool:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ $ref –≤ –æ–±—ä–µ–∫—Ç–µ"""
        if depth > 50:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
            return False

        modified = False

        if isinstance(obj, dict):
            for key, value in list(obj.items()):
                if key == "$ref" and isinstance(value, str):
                    new_ref = self._convert_ref(value, source_file)
                    if new_ref != value:
                        obj[key] = new_ref
                        self.converted_count += 1
                        modified = True
                        if self.verbose:
                            print(f"    ‚úì {value} ‚Üí file:///{Path(new_ref[8:]).as_posix()}")
                else:
                    if self._convert_refs_recursive(value, source_file, depth + 1):
                        modified = True

        elif isinstance(obj, list):
            for item in obj:
                if self._convert_refs_recursive(item, source_file, depth + 1):
                    modified = True

        return modified

    def _convert_ref(self, ref: str, source_file: Path) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É $ref —Å—Å—ã–ª–∫—É –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å"""

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ file:/// –ø—É—Ç–∏
        if ref.startswith("file:///"):
            return ref

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (#/definitions/...)
        if ref.startswith("#"):
            return ref

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTTP/HTTPS —Å—Å—ã–ª–∫–∏
        if ref.startswith("http://") or ref.startswith("https://"):
            return ref

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        try:
            # –£–±–∏—Ä–∞–µ–º file:// –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–æ –Ω–µ file:///)
            if ref.startswith("file://") and not ref.startswith("file:///"):
                ref = ref[7:]

            # –°–æ–∑–¥–∞—ë–º Path –æ–±—ä–µ–∫—Ç
            if ref.startswith("/"):
                # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è —Å–∏—Å—Ç–µ–º—ã
                ref_path = Path(ref)
            else:
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                ref_path = (source_file.parent / ref).resolve()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not ref_path.exists():
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                if self.verbose:
                    print(f"    ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ref_path}")
                return ref

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ file:/// URI
            # –£–±–∏—Ä–∞–µ–º –ª–∏–¥–∏—Ä—É—é—â–∏–π —Å–ª—ç—à –¥–ª—è POSIX –ø—É—Ç–µ–π
            posix_path = ref_path.as_posix()
            if posix_path.startswith('/'):
                absolute_uri = f"file://{posix_path}"
            else:
                absolute_uri = f"file:///{posix_path}"
            return absolute_uri

        except Exception as e:
            if self.verbose:
                print(f"    ‚ö†Ô∏è  –ù–µ –º–æ–≥—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {ref} - {e}")
            return ref

    def process_directory(self, directory: Path, pattern: str = "**/*.json") -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {directory.name}")

        json_files = list(directory.glob(pattern))
        total_files = len(json_files)

        if total_files == 0:
            print(f"  ‚ÑπÔ∏è  –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤")
            return

        print(f"  üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")

        converted_in_dir = 0
        for i, json_file in enumerate(json_files, 1):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if any(part.startswith('.') for part in json_file.parts):
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if json_file in self.processed_files:
                continue

            self.processed_files.add(json_file)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if self.verbose or (i % 100 == 0):
                print(f"  [{i}/{total_files}] {json_file.name}...")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ref'—ã
            if self.convert_refs_in_file(json_file):
                converted_in_dir += 1
                if not self.verbose:
                    print(f"  ‚úÖ {json_file.relative_to(self.base_path)}")

        if converted_in_dir > 0:
            print(f"  ‚ú® –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ {directory.name}: {converted_in_dir}")

    def process_all(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ front-middle-schema"""

        # –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        main_dirs = [
            "SDUI",
            "widgets",
            "multistep",
            "valuefields",
            "dependentfields",
            "analytics",
            "metaschema",
            "api",
            "documentation"
        ]

        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞: {self.base_path}")
        print(f"   –†–µ–∂–∏–º: {'DRY RUN (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)' if self.dry_run else '–û–ë–ù–û–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í'}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for dir_name in main_dirs:
            dir_path = self.base_path / dir_name
            if dir_path.exists() and dir_path.is_dir():
                self.process_directory(dir_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ JSON —Ñ–∞–π–ª—ã
        root_json_files = list(self.base_path.glob("*.json"))
        if root_json_files:
            print(f"\nüìÅ –ö–æ—Ä–Ω–µ–≤—ã–µ JSON —Ñ–∞–π–ª—ã")
            for json_file in root_json_files:
                if json_file not in self.processed_files:
                    self.processed_files.add(json_file)
                    if self.convert_refs_in_file(json_file):
                        print(f"  ‚úÖ {json_file.name}")

    def print_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.processed_files)}")
        print(f"  ‚úèÔ∏è  –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.files_modified}")
        print(f"  üîó –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {self.converted_count}")

        if self.errors:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors[:10]:
                print(f"    - {error}")
            if len(self.errors) > 10:
                print(f"    ... –∏ –µ—â—ë {len(self.errors) - 10} –æ—à–∏–±–æ–∫")

        if self.dry_run:
            print("\nüìå –≠—Ç–æ –±—ã–ª DRY RUN - —Ñ–∞–π–ª—ã –ù–ï –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")


def main():
    parser = argparse.ArgumentParser(
        description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä $ref –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ file:/// –ø—É—Ç–∏"
    )
    parser.add_argument(
        "path",
        nargs='?',
        default=".",
        help="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É front-middle-schema (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "-d", "--directory",
        help="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
    )

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    base_path = Path(args.path).resolve()

    # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ front-middle-schema
    if base_path.name != "front-middle-schema":
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ front-middle-schema –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        for parent in base_path.parents:
            if parent.name == "front-middle-schema":
                base_path = parent
                break
        else:
            # –ò–ª–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö
            potential = base_path / "front-middle-schema"
            if potential.exists():
                base_path = potential

    if not base_path.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {base_path}")
        sys.exit(1)

    print(f"üéØ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {base_path}")

    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    converter = UniversalRefConverter(
        base_path=base_path,
        verbose=args.verbose,
        dry_run=args.dry_run
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if args.directory:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        target_dir = base_path / args.directory
        if not target_dir.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {target_dir}")
            sys.exit(1)
        converter.process_directory(target_dir)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        converter.process_all()

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    converter.print_summary()


if __name__ == "__main__":
    main()
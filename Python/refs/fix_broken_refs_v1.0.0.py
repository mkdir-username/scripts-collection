#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏, –Ω–∞—Ö–æ–¥—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
"""

import json
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from collections import defaultdict


class BrokenRefFixer:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏, –Ω–∞—Ö–æ–¥—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""

    def __init__(self, base_path: Path, dry_run: bool = False):
        self.base_path = base_path.resolve()
        self.dry_run = dry_run

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_fixed = 0
        self.files_modified = 0

        # –ö–µ—à –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.file_index: Dict[str, List[Path]] = defaultdict(list)
        self._build_file_index()

        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        self.known_moves = {
            "file:///Users/username/Documents/front-middle-schema/SDUI/components/BannerWrapper/v1/TextContent.json":
                "file:///Users/username/Documents/front-middle-schema/SDUI/atoms/Text/v1/TextContent.json",
        }

    def _build_file_index(self):
        """–°—Ç—Ä–æ–∏—Ç –∏–Ω–¥–µ–∫—Å –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤"""
        print("üìö –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é –≤—Å–µ JSON —Ñ–∞–π–ª—ã...")

        for json_file in self.base_path.glob("**/*.json"):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ
            if any(part.startswith('.') for part in json_file.parts):
                continue

            filename = json_file.name
            self.file_index[filename].append(json_file)

        print(f"  ‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {sum(len(v) for v in self.file_index.values())} —Ñ–∞–π–ª–æ–≤")

    def find_correct_path(self, broken_ref: str) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–∏—Ç–æ–π —Å—Å—ã–ª–∫–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if broken_ref in self.known_moves:
            return self.known_moves[broken_ref]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –±–∏—Ç–æ–π —Å—Å—ã–ª–∫–∏
        if broken_ref.startswith("file:///"):
            path_str = broken_ref[8:]  # –£–±–∏—Ä–∞–µ–º file:///
        elif broken_ref.startswith("file://"):
            path_str = broken_ref[7:]  # –£–±–∏—Ä–∞–µ–º file://
        else:
            return None

        filename = Path(path_str).name

        # –ò—â–µ–º —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å–µ
        if filename in self.file_index:
            candidates = self.file_index[filename]

            if len(candidates) == 1:
                # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                correct_path = candidates[0]
                return f"file:///{correct_path.as_posix()}"

            elif len(candidates) > 1:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ - –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                broken_parts = Path(path_str).parts

                # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—É—Ç–µ–π
                best_match = None
                max_common = 0

                for candidate in candidates:
                    candidate_parts = candidate.parts

                    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ —á–∞—Å—Ç–∏ –ø—É—Ç–∏ —Å –∫–æ–Ω—Ü–∞
                    common = 0
                    for i in range(1, min(len(broken_parts), len(candidate_parts)) + 1):
                        if broken_parts[-i] == candidate_parts[-i]:
                            common += 1
                        else:
                            break

                    if common > max_common:
                        max_common = common
                        best_match = candidate

                if best_match and max_common >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    return f"file:///{best_match.as_posix()}"

        return None

    def fix_file(self, file_path: Path) -> int:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª–µ"""
        fixed_count = 0

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                data = json.loads(content)

            def fix_refs_recursive(obj):
                nonlocal fixed_count

                if isinstance(obj, dict):
                    for key, value in list(obj.items()):
                        if key == "$ref" and isinstance(value, str):
                            if value.startswith("file://"):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                                test_path = value[8:] if value.startswith("file:///") else value[7:]

                                if not Path(test_path).exists():
                                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
                                    correct_ref = self.find_correct_path(value)

                                    if correct_ref and correct_ref != value:
                                        obj[key] = correct_ref
                                        fixed_count += 1

                                        if not self.dry_run:
                                            print(f"    üîß {value}")
                                            print(f"       ‚Üí {correct_ref}")
                        else:
                            fix_refs_recursive(value)

                elif isinstance(obj, list):
                    for item in obj:
                        fix_refs_recursive(item)

            fix_refs_recursive(data)

            if fixed_count > 0 and not self.dry_run:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)
                    f.write('\n')

                self.total_fixed += fixed_count
                self.files_modified += 1

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")

        return fixed_count

    def scan_and_fix(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏"""

        print(f"\nüîç {'PREVIEW' if self.dry_run else '–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï'} –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫...")

        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        files_with_issues = []

        for json_file in self.base_path.glob("**/*.json"):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ
            if any(part.startswith('.') for part in json_file.parts):
                continue

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    content = f.read()

                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ file:// —Å—Å—ã–ª–æ–∫
                if '"file://' in content:
                    data = json.loads(content)

                    def has_broken_refs(obj):
                        if isinstance(obj, dict):
                            for key, value in obj.items():
                                if key == "$ref" and isinstance(value, str):
                                    if value.startswith("file://"):
                                        test_path = value[8:] if value.startswith("file:///") else value[7:]
                                        if not Path(test_path).exists():
                                            return True
                                else:
                                    if has_broken_refs(value):
                                        return True
                        elif isinstance(obj, list):
                            for item in obj:
                                if has_broken_refs(item):
                                    return True
                        return False

                    if has_broken_refs(data):
                        files_with_issues.append(json_file)

            except:
                continue

        if not files_with_issues:
            print("‚úÖ –ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –±–∏—Ç—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏: {len(files_with_issues)}")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
        for json_file in files_with_issues:
            rel_path = json_file.relative_to(self.base_path)
            fixed = self.fix_file(json_file)

            if fixed > 0:
                if self.dry_run:
                    print(f"  üîç {rel_path}: –Ω–∞–π–¥–µ–Ω–æ {fixed} –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫")
                else:
                    print(f"  ‚úÖ {rel_path}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed} —Å—Å—ã–ª–æ–∫")

        # –ò—Ç–æ–≥–∏
        print(f"\nüìä –ò—Ç–æ–≥–∏:")
        if self.dry_run:
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {self.total_fixed}")
            print(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {self.files_modified}")
            print(f"\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            print(f"  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {self.total_fixed}")
            print(f"  ‚Ä¢ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.files_modified}")


def main():
    import argparse

    parser = argparse.ArgumentParser(
        description="–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏—Ç—ã–µ $ref —Å—Å—ã–ª–∫–∏, –Ω–∞—Ö–æ–¥—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏"
    )
    parser.add_argument(
        "path",
        nargs='?',
        default=".",
        help="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É front-middle-schema"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
    )

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    base_path = Path(args.path).resolve()

    # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if base_path.name != "front-middle-schema":
        for parent in base_path.parents:
            if parent.name == "front-middle-schema":
                base_path = parent
                break
        else:
            potential = base_path / "front-middle-schema"
            if potential.exists():
                base_path = potential

    if not base_path.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {base_path}")
        sys.exit(1)

    print(f"üéØ –ü—Ä–æ–µ–∫—Ç: {base_path}")

    # –°–æ–∑–¥–∞—ë–º –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    fixer = BrokenRefFixer(base_path, dry_run=args.dry_run)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    fixer.scan_and_fix()


if __name__ == "__main__":
    main()
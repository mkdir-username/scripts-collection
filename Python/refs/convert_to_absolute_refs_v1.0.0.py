#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö $ref –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ file:/// –ø—É—Ç–∏
"""

import json
import os
from pathlib import Path

BASE_PATH = "/Users/username/Documents/front-middle-schema"

def resolve_ref_path(ref_value, current_file_path):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π file:/// URI"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    if ref_value.startswith("#"):
        return ref_value

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    if ref_value.startswith("file:///"):
        return ref_value

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    current_dir = Path(current_file_path).parent

    # –†–µ–∑–æ–ª–≤–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    resolved_path = (current_dir / ref_value).resolve()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ file:/// URI
    return f"file://{resolved_path}"

def fix_refs_in_dict(obj, current_file_path):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç $ref –≤ —Å–ª–æ–≤–∞—Ä–µ"""
    if isinstance(obj, dict):
        for key, value in obj.items():
            if key == "$ref" and isinstance(value, str):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                obj[key] = resolve_ref_path(value, current_file_path)
            else:
                fix_refs_in_dict(value, current_file_path)
    elif isinstance(obj, list):
        for item in obj:
            fix_refs_in_dict(item, current_file_path)

def process_schema_file(filepath):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—Ö–µ–º—ã"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            schema = json.load(f)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        original = json.dumps(schema, sort_keys=True)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        fix_refs_in_dict(schema, filepath)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        modified = json.dumps(schema, sort_keys=True)
        if original != modified:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(schema, f, indent=2, ensure_ascii=False)
            print(f"‚úì –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: {filepath}")
            return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ {filepath}: {e}")
    return False

def main():
    sdui_path = Path("SDUI")

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON —Å—Ö–µ–º
    patterns = [
        "components/*/v*/*.json",
        "atoms/*/*.json",
        "common/*/*.json",
        "layouts/*/*.json",
        "actions/*/*.json",
        "functions/*/*.json",
        "models/*/*.json"
    ]

    total_files = 0
    fixed_files = 0

    for pattern in patterns:
        for filepath in sdui_path.glob(pattern):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º samples
            if "samples" in str(filepath):
                continue

            total_files += 1
            if process_schema_file(filepath):
                fixed_files += 1

    print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_files}")

if __name__ == "__main__":
    main()
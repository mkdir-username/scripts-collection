#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è $ref –≤ JSON —Å—Ö–µ–º–∞—Ö - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json
"""

import json
import os
from pathlib import Path

def fix_refs_in_dict(obj, current_file_path=None):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç $ref –≤ —Å–ª–æ–≤–∞—Ä–µ"""
    if isinstance(obj, dict):
        for key, value in obj.items():
            if key == "$ref" and isinstance(value, str):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å #)
                if value.startswith("#"):
                    continue

                # –ï—Å–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .json, –¥–æ–±–∞–≤–ª—è–µ–º
                if not value.endswith(".json"):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    # (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç / –∏–ª–∏ ..)
                    if "/" not in value and ".." not in value:
                        # –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        obj[key] = value + ".json"
                    else:
                        # –≠—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –¥—Ä—É–≥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        obj[key] = value + ".json"
            else:
                fix_refs_in_dict(value, current_file_path)
    elif isinstance(obj, list):
        for item in obj:
            fix_refs_in_dict(item, current_file_path)

def process_schema_file(filepath):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—Ö–µ–º—ã"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            schema = json.load(f)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        original = json.dumps(schema, sort_keys=True)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        fix_refs_in_dict(schema, filepath)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        modified = json.dumps(schema, sort_keys=True)
        if original != modified:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(schema, f, indent=2, ensure_ascii=False)
            print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {filepath}")
            return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ {filepath}: {e}")
    return False

def main():
    sdui_path = Path("SDUI")

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON —Å—Ö–µ–º
    patterns = [
        "components/*/v*/*.json",
        "atoms/*/*.json",
        "common/*/*.json",
        "layouts/*/*.json",
        "actions/*/*.json",
        "functions/*/*.json",
        "models/*/*.json"
    ]

    total_files = 0
    fixed_files = 0

    for pattern in patterns:
        for filepath in sdui_path.glob(pattern):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º samples
            if "samples" in str(filepath):
                continue

            total_files += 1
            if process_schema_file(filepath):
                fixed_files += 1

    print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_files}")

if __name__ == "__main__":
    main()
#!/usr/bin/env node
/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä json.schemas –ø—Ä–∞–≤–∏–ª –¥–ª—è settings.json
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ SDUI
 */

const fs = require('fs').promises;
const path = require('path');

const SDUI_ROOT = '/Users/username/Documents/front-middle-schema';

async function loadJson(filePath) {
  try {
    const content = await fs.readFile(filePath, 'utf8');
    return JSON.parse(content);
  } catch (err) {
    console.warn(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: ${path.basename(filePath)}`);
    return null;
  }
}

async function findComponentSchemas(dir, componentList = []) {
  const entries = await fs.readdir(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);

    if (entry.isDirectory()) {
      await findComponentSchemas(fullPath, componentList);
    } else if (entry.isFile() && entry.name.endsWith('.json')) {
      const schema = await loadJson(fullPath);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–∏–º–µ–µ—Ç $schema –∏ properties —Å type)
      if (schema?.$schema && schema?.properties?.type) {
        const relativePath = fullPath.replace(SDUI_ROOT + '/', './');
        const componentName = path.basename(entry.name, '.json');

        componentList.push({
          name: componentName,
          path: relativePath,
          fullPath: fullPath
        });
      }
    }
  }

  return componentList;
}

async function main() {
  console.log('üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ö–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...\n');

  const componentsDir = path.join(SDUI_ROOT, 'SDUI');
  const components = await findComponentSchemas(componentsDir);

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${components.length} —Å—Ö–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è settings.json
  const schemaRules = components.map(comp => ({
    fileMatch: [
      `**/${comp.name}/**/*.json`,
      `**/${comp.name}.json`,
      `**/*${comp.name}*.json`
    ],
    url: comp.path
  }));

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (—Ñ–∞–π–ª—ã —Å rootElement)
  schemaRules.unshift({
    fileMatch: [
      ".JSON/**/*.json"
    ],
    url: "./SDUI/contract/SDUIContract.json"
  });

  const output = {
    "json.schemas": schemaRules
  };

  const outputPath = path.join(SDUI_ROOT, 'Scripts/settings_schemas_rules.json');
  await fs.writeFile(outputPath, JSON.stringify(output, null, 2) + '\n', 'utf8');

  console.log(`üìù –°–æ–∑–¥–∞–Ω–æ ${schemaRules.length} –ø—Ä–∞–≤–∏–ª`);
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${outputPath}`);
  console.log('\nüìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ .vscode/settings.json');
}

main().catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  process.exit(1);
});